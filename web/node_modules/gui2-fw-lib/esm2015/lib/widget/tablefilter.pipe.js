/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
/**
 * Only return the tabledata that matches filtering with some queries
 *
 * Note: the pipe is marked pure here as we need to filter on the
 * content of the filter object (it's not a primitive type)
 */
export class TableFilterPipe {
    /**
     * From an array of table items just return those that match the filter
     * @param {?} items
     * @param {?} tableDataFilter
     * @return {?}
     */
    transform(items, tableDataFilter) {
        if (!items) {
            return [];
        }
        if (!tableDataFilter.queryStr) {
            return items;
        }
        /** @type {?} */
        const queryStr = tableDataFilter.queryStr.toLowerCase();
        return items.filter(it => {
            if (tableDataFilter.queryBy === '$') {
                /** @type {?} */
                const t1 = Object.values(it);
                /** @type {?} */
                const t2 = Object.values(it).filter(value => {
                    return ((/** @type {?} */ (value))).toLowerCase().includes(queryStr);
                });
                return Object.values(it).filter(value => {
                    return ((/** @type {?} */ (value))).toLowerCase().includes(queryStr);
                }).length > 0;
            }
            else {
                return it[tableDataFilter.queryBy].toLowerCase().includes(queryStr);
            }
        });
    }
}
TableFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filter',
                pure: false
            },] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVmaWx0ZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3dpZGdldC90YWJsZWZpbHRlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQWFwRCxNQUFNLE9BQU8sZUFBZTs7Ozs7OztJQUt4QixTQUFTLENBQUMsS0FBWSxFQUFFLGVBQTRCO1FBQ2hELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUU7WUFDM0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7O2NBRUssUUFBUSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO1FBRXZELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBRSxFQUFFLENBQUMsRUFBRTtZQUN0QixJQUFJLGVBQWUsQ0FBQyxPQUFPLEtBQUssR0FBRyxFQUFFOztzQkFDM0IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDOztzQkFDdEIsRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUM3QixPQUFPLENBQUMsbUJBQVEsS0FBSyxFQUFBLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzVELENBQUMsQ0FBQztnQkFDYixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNwQyxPQUFPLENBQUMsbUJBQVEsS0FBSyxFQUFBLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzVELENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0gsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN2RTtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBaENKLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsUUFBUTtnQkFDZCxJQUFJLEVBQUUsS0FBSzthQUNaIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGFibGVGaWx0ZXIgfSBmcm9tICcuL3RhYmxlLmJhc2UnO1xuXG4vKipcbiAqIE9ubHkgcmV0dXJuIHRoZSB0YWJsZWRhdGEgdGhhdCBtYXRjaGVzIGZpbHRlcmluZyB3aXRoIHNvbWUgcXVlcmllc1xuICpcbiAqIE5vdGU6IHRoZSBwaXBlIGlzIG1hcmtlZCBwdXJlIGhlcmUgYXMgd2UgbmVlZCB0byBmaWx0ZXIgb24gdGhlXG4gKiBjb250ZW50IG9mIHRoZSBmaWx0ZXIgb2JqZWN0IChpdCdzIG5vdCBhIHByaW1pdGl2ZSB0eXBlKVxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdmaWx0ZXInLFxuICBwdXJlOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZUZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIC8qKlxuICAgICAqIEZyb20gYW4gYXJyYXkgb2YgdGFibGUgaXRlbXMganVzdCByZXR1cm4gdGhvc2UgdGhhdCBtYXRjaCB0aGUgZmlsdGVyXG4gICAgICovXG4gICAgdHJhbnNmb3JtKGl0ZW1zOiBhbnlbXSwgdGFibGVEYXRhRmlsdGVyOiBUYWJsZUZpbHRlcik6IGFueVtdIHtcbiAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGFibGVEYXRhRmlsdGVyLnF1ZXJ5U3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBxdWVyeVN0ciA9IHRhYmxlRGF0YUZpbHRlci5xdWVyeVN0ci50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiBpdGVtcy5maWx0ZXIoIGl0ID0+IHtcbiAgICAgICAgICAgIGlmICh0YWJsZURhdGFGaWx0ZXIucXVlcnlCeSA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdDEgPSBPYmplY3QudmFsdWVzKGl0KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0MiA9IE9iamVjdC52YWx1ZXMoaXQpLmZpbHRlcih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICg8c3RyaW5nPnZhbHVlKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5U3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGl0KS5maWx0ZXIodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDxzdHJpbmc+dmFsdWUpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnlTdHIpO1xuICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdFt0YWJsZURhdGFGaWx0ZXIucXVlcnlCeV0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeVN0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==