/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const REFRESH_INTERVAL = 2000;
/** @type {?} */
const SEARCH_REGEX = '\\W';
/**
 * Model of table annotations within this table base class
 * @record
 */
export function TableAnnots() { }
if (false) {
    /** @type {?} */
    TableAnnots.prototype.noRowsMsg;
}
/**
 * A model of data returned from Web Socket in a TableResponse
 *
 * There is an interface extending from this one in the parent component
 * @record
 */
export function TableResponse() { }
if (false) {
    /** @type {?} */
    TableResponse.prototype.annots;
}
/**
 * A criteria for filtering the tableData
 * @record
 */
export function TableFilter() { }
if (false) {
    /** @type {?} */
    TableFilter.prototype.queryStr;
    /** @type {?} */
    TableFilter.prototype.queryBy;
    /** @type {?} */
    TableFilter.prototype.sortBy;
}
/** @enum {string} */
const SortDir = {
    asc: 'asc', desc: 'desc',
};
export { SortDir };
/**
 * A structure to format sort params for table
 * This is sent to WebSocket as part of table request
 * @record
 */
export function SortParams() { }
if (false) {
    /** @type {?} */
    SortParams.prototype.firstCol;
    /** @type {?} */
    SortParams.prototype.firstDir;
    /** @type {?} */
    SortParams.prototype.secondCol;
    /** @type {?} */
    SortParams.prototype.secondDir;
}
/**
 * @record
 */
export function PayloadParams() { }
if (false) {
    /** @type {?} */
    PayloadParams.prototype.devId;
}
/**
 * ONOS GUI -- Widget -- Table Base class
 * @abstract
 */
export class TableBaseImpl {
    /**
     * @param {?} fs
     * @param {?} ls
     * @param {?} log
     * @param {?} wss
     * @param {?} tag
     * @param {?=} idKey
     * @param {?=} selCb
     */
    constructor(fs, ls, log, wss, tag, idKey = 'id', selCb = () => ({}) // Function
    ) {
        this.fs = fs;
        this.ls = ls;
        this.log = log;
        this.wss = wss;
        this.tag = tag;
        this.idKey = idKey;
        this.selCb = selCb;
        this.changedData = [];
        // Function
        this.parentSelCb = null;
        // Function
        this.selId = undefined;
        this.tableData = [];
        // Function
        this.autoRefresh = true;
        this.autoRefreshTip = 'Toggle auto refresh'; // TODO: get LION string
        this.refreshPromise = null;
        this.handlers = [];
        this.root = tag + 's';
        this.req = tag + 'DataRequest';
        this.resp = tag + 'DataResponse';
        this.selectCallback = this.rowSelectionCb;
        this.toggleRefresh = () => {
            this.autoRefresh = !this.autoRefresh;
            this.autoRefresh ? this.startRefresh() : this.stopRefresh();
        };
        // Mapped to the search and searchBy inputs in template
        // Changes are handled through TableFilterPipe
        this.tableDataFilter = (/** @type {?} */ ({
            queryStr: '',
            queryBy: '$',
        }));
    }
    /**
     * @return {?}
     */
    init() {
        this.wss.bindHandlers(new Map([
            [this.resp, (data) => this.tableDataResponseCb(data)]
        ]));
        this.handlers.push(this.resp);
        this.annots = (/** @type {?} */ ({
            noRowsMsg: ''
        }));
        // Now send the WebSocket request and make it repeat every 2 seconds
        this.requestTableData();
        this.startRefresh();
        this.log.debug('TableBase initialized. Calling ', this.req, 'every', REFRESH_INTERVAL, 'ms');
    }
    /**
     * @return {?}
     */
    destroy() {
        this.wss.unbindHandlers(this.handlers);
        this.stopRefresh();
        this.ls.stop();
    }
    /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     * @param {?} data
     * @return {?}
     */
    tableDataResponseCb(data) {
        this.ls.stop();
        /** @type {?} */
        const newTableData = Array.from(data[this.root]);
        this.annots.noRowsMsg = data.annots.no_rows_msg;
        // If the parents onResp() function is set then call it
        if (this.responseCallback) {
            this.responseCallback(data);
        }
        this.changedData = [];
        // checks if data changed for row flashing
        if (JSON.stringify(newTableData) !== JSON.stringify(this.tableData)) {
            this.log.debug('table data has changed');
            /** @type {?} */
            const oldTableData = this.tableData;
            this.tableData = [...newTableData]; // ES6 spread syntax
            // only flash the row if the data already exists
            if (oldTableData.length > 0) {
                for (const idx in newTableData) {
                    if (!this.fs.containsObj(oldTableData, newTableData[idx])) {
                        this.changedData.push(newTableData[idx][this.idKey]);
                    }
                }
            }
        }
    }
    /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     * @return {?}
     */
    requestTableData() {
        /** @type {?} */
        const p = Object.assign({}, this.sortParams, this.payloadParams);
        // Allow it to sit in pending events
        if (this.wss.isConnected()) {
            if (this.fs.debugOn('table')) {
                this.log.debug('Table data REQUEST:', this.req, p);
            }
            this.wss.sendEvent(this.req, p);
            this.ls.start();
        }
    }
    /**
     * Row Selected
     * @param {?} event
     * @param {?} selRow
     * @return {?}
     */
    rowSelectionCb(event, selRow) {
        /** @type {?} */
        const selId = selRow[this.idKey];
        this.selId = (this.selId === selId) ? undefined : selId;
        this.log.debug('Row', selId, 'selected');
        if (this.parentSelCb) {
            this.parentSelCb(event, selRow);
        }
    }
    /**
     * autoRefresh functions
     * @return {?}
     */
    startRefresh() {
        this.refreshPromise =
            setInterval(() => {
                if (!this.ls.waiting()) {
                    if (this.fs.debugOn('table')) {
                        this.log.debug('Refreshing ' + this.root + ' page');
                    }
                    this.requestTableData();
                }
            }, REFRESH_INTERVAL);
    }
    /**
     * @return {?}
     */
    stopRefresh() {
        if (this.refreshPromise) {
            clearInterval(this.refreshPromise);
            this.refreshPromise = null;
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    isChanged(id) {
        return (this.fs.inArray(id, this.changedData) === -1) ? false : true;
    }
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    dummyLion(key) {
        return '%' + key + '%';
    }
    /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     * @param {?} colName
     * @return {?}
     */
    onSort(colName) {
        if (this.sortParams.firstCol === colName) {
            if (this.sortParams.firstDir === SortDir.desc) {
                this.sortParams.firstDir = SortDir.asc;
                return;
            }
            else {
                this.sortParams.firstDir = SortDir.desc;
                return;
            }
        }
        else {
            this.sortParams.secondCol = this.sortParams.firstCol;
            this.sortParams.secondDir = this.sortParams.firstDir;
            this.sortParams.firstCol = colName;
            this.sortParams.firstDir = SortDir.desc;
        }
        this.log.debug('Sort params', this.sortParams);
        this.requestTableData();
    }
    /**
     * @param {?} column
     * @return {?}
     */
    sortIcon(column) {
        if (this.sortParams.firstCol === column) {
            if (this.sortParams.firstDir === SortDir.asc) {
                return 'upArrow';
            }
            else {
                return 'downArrow';
            }
        }
        else {
            return '';
        }
    }
    /**
     * De-selects the row
     * @param {?} event
     * @return {?}
     */
    deselectRow(event) {
        this.log.debug('Details panel close event');
        this.selId = event;
    }
}
if (false) {
    /** @type {?} */
    TableBaseImpl.prototype.annots;
    /** @type {?} */
    TableBaseImpl.prototype.changedData;
    /** @type {?} */
    TableBaseImpl.prototype.payloadParams;
    /** @type {?} */
    TableBaseImpl.prototype.sortParams;
    /** @type {?} */
    TableBaseImpl.prototype.selectCallback;
    /** @type {?} */
    TableBaseImpl.prototype.parentSelCb;
    /** @type {?} */
    TableBaseImpl.prototype.responseCallback;
    /** @type {?} */
    TableBaseImpl.prototype.selId;
    /** @type {?} */
    TableBaseImpl.prototype.tableData;
    /** @type {?} */
    TableBaseImpl.prototype.tableDataFilter;
    /** @type {?} */
    TableBaseImpl.prototype.toggleRefresh;
    /** @type {?} */
    TableBaseImpl.prototype.autoRefresh;
    /** @type {?} */
    TableBaseImpl.prototype.autoRefreshTip;
    /** @type {?} */
    TableBaseImpl.prototype.root;
    /** @type {?} */
    TableBaseImpl.prototype.req;
    /** @type {?} */
    TableBaseImpl.prototype.resp;
    /** @type {?} */
    TableBaseImpl.prototype.refreshPromise;
    /** @type {?} */
    TableBaseImpl.prototype.handlers;
    /** @type {?} */
    TableBaseImpl.prototype.fs;
    /** @type {?} */
    TableBaseImpl.prototype.ls;
    /** @type {?} */
    TableBaseImpl.prototype.log;
    /** @type {?} */
    TableBaseImpl.prototype.wss;
    /** @type {?} */
    TableBaseImpl.prototype.tag;
    /** @type {?} */
    TableBaseImpl.prototype.idKey;
    /** @type {?} */
    TableBaseImpl.prototype.selCb;
}
//# sourceMappingURL=data:application/json;base64,