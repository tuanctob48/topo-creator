/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { PanelBaseImpl } from './panel.base';
import { Output, EventEmitter, Input } from '@angular/core';
/**
 * A generic model of the data returned from the *DetailsResponse
 * @record
 */
export function DetailsResponse() { }
if (false) {
    /** @type {?} */
    DetailsResponse.prototype.details;
}
/**
 * Extends the PanelBase abstract class specifically for showing details
 *
 * This makes another call through WSS to the server for specific
 * details to fill the panel with
 *
 * This replaces the detailspanel service in the old gui
 * @abstract
 */
export class DetailsPanelBaseImpl extends PanelBaseImpl {
    /**
     * @param {?} fs
     * @param {?} ls
     * @param {?} log
     * @param {?} wss
     * @param {?} tag
     */
    constructor(fs, ls, log, wss, tag) {
        super(fs, ls, log);
        this.fs = fs;
        this.ls = ls;
        this.log = log;
        this.wss = wss;
        this.tag = tag;
        this.closeEvent = new EventEmitter();
        this.handlers = [];
        this.detailsData = {};
        this.closed = false;
        this.root = tag + 's';
        this.req = tag + 'DetailsRequest';
        this.resp = tag + 'DetailsResponse';
    }
    /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     * @return {?}
     */
    init() {
        this.wss.bindHandlers(new Map([
            [this.resp, (data) => this.detailsPanelResponseCb(data)]
        ]));
        this.handlers.push(this.resp);
    }
    /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     * @return {?}
     */
    destroy() {
        this.wss.unbindHandlers(this.handlers);
    }
    /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     * @param {?} data
     * @return {?}
     */
    detailsPanelResponseCb(data) {
        this.detailsData = data['details'];
    }
    /**
     * Details Panel Data Request - should be called whenever row id changes
     * @param {?} query
     * @return {?}
     */
    requestDetailsPanelData(query) {
        this.closed = false;
        // Do not send if the Web Socket hasn't opened
        if (this.wss.isConnected()) {
            if (this.fs.debugOn('panel')) {
                this.log.debug('Details panel data REQUEST:', this.req, query);
            }
            this.wss.sendEvent(this.req, query);
        }
    }
    /**
     * this should be called when the details panel close button is clicked
     * @return {?}
     */
    close() {
        this.closed = true;
        this.id = null;
        this.closeEvent.emit(this.id);
    }
}
DetailsPanelBaseImpl.propDecorators = {
    id: [{ type: Input }],
    closeEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.id;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.closeEvent;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.root;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.req;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.resp;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.handlers;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.detailsData;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.closed;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.fs;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.ls;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.log;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.wss;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.tag;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsc3BhbmVsLmJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi93aWRnZXQvZGV0YWlsc3BhbmVsLmJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQW9CQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFLNUQscUNBRUM7OztJQURHLGtDQUFhOzs7Ozs7Ozs7OztBQVdqQixNQUFNLE9BQWdCLG9CQUFxQixTQUFRLGFBQWE7Ozs7Ozs7O0lBWTVELFlBQ2MsRUFBYSxFQUNiLEVBQWtCLEVBQ2xCLEdBQWUsRUFDZixHQUFxQixFQUNyQixHQUFXO1FBRXJCLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBTlQsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQUNiLE9BQUUsR0FBRixFQUFFLENBQWdCO1FBQ2xCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBZGYsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFLMUMsYUFBUSxHQUFhLEVBQUUsQ0FBQztRQUN6QixnQkFBVyxHQUFRLEVBQUUsQ0FBQztRQUN0QixXQUFNLEdBQVksS0FBSyxDQUFDO1FBVTNCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFNRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLENBQXlCO1lBQ2xELENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNELENBQUMsQ0FBQyxDQUFDO1FBQ0osSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7OztJQU1ELE9BQU87UUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7OztJQU1ELHNCQUFzQixDQUFDLElBQXFCO1FBQ3hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7OztJQUtELHVCQUF1QixDQUFDLEtBQVU7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsOENBQThDO1FBQzlDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN4QixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2QztJQUNMLENBQUM7Ozs7O0lBS0QsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OztpQkF2RUEsS0FBSzt5QkFDTCxNQUFNOzs7O0lBRFAsa0NBQW9COztJQUNwQiwwQ0FBa0Q7O0lBRWxELG9DQUFxQjs7SUFDckIsbUNBQW9COztJQUNwQixvQ0FBcUI7O0lBQ3JCLHdDQUFnQzs7SUFDaEMsMkNBQTZCOztJQUM3QixzQ0FBK0I7O0lBRzNCLGtDQUF1Qjs7SUFDdkIsa0NBQTRCOztJQUM1QixtQ0FBeUI7O0lBQ3pCLG1DQUErQjs7SUFDL0IsbUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEZuU2VydmljZSB9IGZyb20gJy4uL3V0aWwvZm4uc2VydmljZSc7XG5pbXBvcnQgeyBMb2FkaW5nU2VydmljZSB9IGZyb20gJy4uL2xheWVyL2xvYWRpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJy4uL3JlbW90ZS93ZWJzb2NrZXQuc2VydmljZSc7XG5cbmltcG9ydCB7IFBhbmVsQmFzZUltcGwgfSBmcm9tICcuL3BhbmVsLmJhc2UnO1xuaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQSBnZW5lcmljIG1vZGVsIG9mIHRoZSBkYXRhIHJldHVybmVkIGZyb20gdGhlICpEZXRhaWxzUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZXRhaWxzUmVzcG9uc2Uge1xuICAgIGRldGFpbHM6IGFueTtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBQYW5lbEJhc2UgYWJzdHJhY3QgY2xhc3Mgc3BlY2lmaWNhbGx5IGZvciBzaG93aW5nIGRldGFpbHNcbiAqXG4gKiBUaGlzIG1ha2VzIGFub3RoZXIgY2FsbCB0aHJvdWdoIFdTUyB0byB0aGUgc2VydmVyIGZvciBzcGVjaWZpY1xuICogZGV0YWlscyB0byBmaWxsIHRoZSBwYW5lbCB3aXRoXG4gKlxuICogVGhpcyByZXBsYWNlcyB0aGUgZGV0YWlsc3BhbmVsIHNlcnZpY2UgaW4gdGhlIG9sZCBndWlcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERldGFpbHNQYW5lbEJhc2VJbXBsIGV4dGVuZHMgUGFuZWxCYXNlSW1wbCB7XG5cbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICAgIEBPdXRwdXQoKSBjbG9zZUV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICBwcml2YXRlIHJvb3Q6IHN0cmluZztcbiAgICBwcml2YXRlIHJlcTogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVzcDogc3RyaW5nO1xuICAgIHByaXZhdGUgaGFuZGxlcnM6IHN0cmluZ1tdID0gW107XG4gICAgcHVibGljIGRldGFpbHNEYXRhOiBhbnkgPSB7fTtcbiAgICBwdWJsaWMgY2xvc2VkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJvdGVjdGVkIGZzOiBGblNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBsczogTG9hZGluZ1NlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBsb2c6IExvZ1NlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCB3c3M6IFdlYlNvY2tldFNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCB0YWc6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZnMsIGxzLCBsb2cpO1xuICAgICAgICB0aGlzLnJvb3QgPSB0YWcgKyAncyc7XG4gICAgICAgIHRoaXMucmVxID0gdGFnICsgJ0RldGFpbHNSZXF1ZXN0JztcbiAgICAgICAgdGhpcy5yZXNwID0gdGFnICsgJ0RldGFpbHNSZXNwb25zZSc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgZGV0YWlscyBwYW5lbCBpcyBjcmVhdGVkIHNldCB1cCBhIGxpc3RlbmVyIG9uXG4gICAgICogV2ViIFNvY2tldCBmb3IgZGV0YWlscyByZXNwb25zZXNcbiAgICAgKi9cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLndzcy5iaW5kSGFuZGxlcnMobmV3IE1hcDxzdHJpbmcsIChkYXRhKSA9PiB2b2lkPihbXG4gICAgICAgICAgICBbdGhpcy5yZXNwLCAoZGF0YSkgPT4gdGhpcy5kZXRhaWxzUGFuZWxSZXNwb25zZUNiKGRhdGEpXVxuICAgICAgICBdKSk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMucHVzaCh0aGlzLnJlc3ApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGRldGFpbHMgcGFuZWwgaXMgZGVzdHJveWVkIHRoaXMgc2hvdWxkIGJlIGNhbGxlZCB0b1xuICAgICAqIGRlLXJlZ2lzdGVyIGZyb20gdGhlIFdlYlNvY2tldFxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMud3NzLnVuYmluZEhhbmRsZXJzKHRoaXMuaGFuZGxlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgY2FsbGJhY2sgdGhhdCBleGVjdXRlcyB3aGVuIHRoZSBkZXRhaWxzIGRhdGEgdGhhdCB3YXMgcmVxdWVzdGVkXG4gICAgICogb24gV2ViU29ja2V0U2VydmljZSBhcnJpdmVzLlxuICAgICAqL1xuICAgIGRldGFpbHNQYW5lbFJlc3BvbnNlQ2IoZGF0YTogRGV0YWlsc1Jlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMuZGV0YWlsc0RhdGEgPSBkYXRhWydkZXRhaWxzJ107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0YWlscyBQYW5lbCBEYXRhIFJlcXVlc3QgLSBzaG91bGQgYmUgY2FsbGVkIHdoZW5ldmVyIHJvdyBpZCBjaGFuZ2VzXG4gICAgICovXG4gICAgcmVxdWVzdERldGFpbHNQYW5lbERhdGEocXVlcnk6IGFueSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICAvLyBEbyBub3Qgc2VuZCBpZiB0aGUgV2ViIFNvY2tldCBoYXNuJ3Qgb3BlbmVkXG4gICAgICAgIGlmICh0aGlzLndzcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mcy5kZWJ1Z09uKCdwYW5lbCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0RldGFpbHMgcGFuZWwgZGF0YSBSRVFVRVNUOicsIHRoaXMucmVxLCBxdWVyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLndzcy5zZW5kRXZlbnQodGhpcy5yZXEsIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRoaXMgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBkZXRhaWxzIHBhbmVsIGNsb3NlIGJ1dHRvbiBpcyBjbGlja2VkXG4gICAgICovXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2xvc2VFdmVudC5lbWl0KHRoaXMuaWQpO1xuICAgIH1cblxufVxuIl19