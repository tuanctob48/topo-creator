/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Inject } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import { MastService } from '../mast/mast.service';
import { HostListener } from '@angular/core';
import * as d3 from 'd3';
/**
 * ONOS GUI -- Widget -- Table Resize Directive
 */
export class TableResizeDirective {
    /**
     * @param {?} fs
     * @param {?} log
     * @param {?} mast
     * @param {?} w
     */
    constructor(fs, log, mast, w) {
        this.fs = fs;
        this.log = log;
        this.mast = mast;
        this.w = w;
        this.pdg = 22;
        log.info('TableResizeDirective constructed');
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.tables = {
            thead: d3.select('div.table-header').select('table'),
            tbody: d3.select('div.table-body').select('table')
        };
        this.windowSize(this.tables);
    }
    /**
     * @param {?} tables
     * @return {?}
     */
    windowSize(tables) {
        /** @type {?} */
        const wsz = this.fs.windowSize(0, 30);
        this.adjustTable(tables, wsz.width, wsz.height);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.windowSize(this.tables);
        return {
            h: this.w.innerHeight,
            w: this.w.innerWidth
        };
    }
    /**
     * @param {?} tables
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    adjustTable(tables, width, height) {
        this._width(tables.thead, width + 'px');
        this._width(tables.tbody, width + 'px');
        this.setHeight(tables.thead, d3.select('div.table-body'), height);
    }
    /**
     * @param {?} elem
     * @param {?} width
     * @return {?}
     */
    _width(elem, width) {
        elem.style('width', width);
    }
    /**
     * @param {?} thead
     * @param {?} body
     * @param {?} height
     * @return {?}
     */
    setHeight(thead, body, height) {
        /** @type {?} */
        const h = height - (this.mast.mastHeight +
            this.fs.noPxStyle(d3.select('.tabular-header'), 'height') +
            this.fs.noPxStyle(thead, 'height') + this.pdg);
        body.style('height', h + 'px');
    }
}
TableResizeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[onosTableResize]',
            },] },
];
/** @nocollapse */
TableResizeDirective.ctorParameters = () => [
    { type: FnService },
    { type: LogService },
    { type: MastService },
    { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
];
TableResizeDirective.propDecorators = {
    onResize: [{ type: HostListener, args: ['window:resize', ['$event.target'],] }]
};
if (false) {
    /** @type {?} */
    TableResizeDirective.prototype.pdg;
    /** @type {?} */
    TableResizeDirective.prototype.tables;
    /** @type {?} */
    TableResizeDirective.prototype.fs;
    /** @type {?} */
    TableResizeDirective.prototype.log;
    /** @type {?} */
    TableResizeDirective.prototype.mast;
    /** @type {?} */
    TableResizeDirective.prototype.w;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVyZXNpemUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvd2lkZ2V0L3RhYmxlcmVzaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsT0FBTyxFQUF1QixTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7Ozs7QUFRekIsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7OztJQUs3QixZQUFzQixFQUFhLEVBQ3JCLEdBQWUsRUFDZixJQUFpQixFQUNELENBQU07UUFIZCxPQUFFLEdBQUYsRUFBRSxDQUFXO1FBQ3JCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ0QsTUFBQyxHQUFELENBQUMsQ0FBSztRQU5wQyxRQUFHLEdBQUcsRUFBRSxDQUFDO1FBUUwsR0FBRyxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFRCxxQkFBcUI7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNWLEtBQUssRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNwRCxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDckQsQ0FBQztRQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLE1BQVc7O2NBQ1osR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Ozs7SUFHRCxRQUFRLENBQUMsS0FBVTtRQUNmLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLE9BQU87WUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXO1lBQ3JCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVU7U0FDdkIsQ0FBQztJQUNOLENBQUM7Ozs7Ozs7SUFFRCxXQUFXLENBQUMsTUFBVyxFQUFFLEtBQWEsRUFBRSxNQUFjO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBVSxFQUFFLElBQVMsRUFBRSxNQUFjOztjQUNyQyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO1lBQ3BDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRSxRQUFRLENBQUM7WUFDekQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7OztZQXRESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjthQUNoQzs7OztZQVhRLFNBQVM7WUFDVCxVQUFVO1lBQ1YsV0FBVzs0Q0FrQlgsTUFBTSxTQUFDLFFBQVE7Ozt1QkFrQm5CLFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxlQUFlLENBQUM7Ozs7SUF4QmhELG1DQUFTOztJQUNULHNDQUFZOztJQUVBLGtDQUF1Qjs7SUFDL0IsbUNBQXlCOztJQUN6QixvQ0FBMkI7O0lBQzNCLGlDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC1wcmVzZW50IE9wZW4gTmV0d29ya2luZyBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRDaGVja2VkLCBEaXJlY3RpdmUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm5TZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBNYXN0U2VydmljZSB9IGZyb20gJy4uL21hc3QvbWFzdC5zZXJ2aWNlJztcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuXG4vKipcbiAqIE9OT1MgR1VJIC0tIFdpZGdldCAtLSBUYWJsZSBSZXNpemUgRGlyZWN0aXZlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW29ub3NUYWJsZVJlc2l6ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZVJlc2l6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQge1xuXG4gICAgcGRnID0gMjI7XG4gICAgdGFibGVzOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZnM6IEZuU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIGxvZzogTG9nU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIG1hc3Q6IE1hc3RTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KCdXaW5kb3cnKSBwcml2YXRlIHc6IGFueSkge1xuXG4gICAgICAgIGxvZy5pbmZvKCdUYWJsZVJlc2l6ZURpcmVjdGl2ZSBjb25zdHJ1Y3RlZCcpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy50YWJsZXMgPSB7XG4gICAgICAgICAgICB0aGVhZDogZDMuc2VsZWN0KCdkaXYudGFibGUtaGVhZGVyJykuc2VsZWN0KCd0YWJsZScpLFxuICAgICAgICAgICAgdGJvZHk6IGQzLnNlbGVjdCgnZGl2LnRhYmxlLWJvZHknKS5zZWxlY3QoJ3RhYmxlJylcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53aW5kb3dTaXplKHRoaXMudGFibGVzKTtcbiAgICB9XG5cbiAgICB3aW5kb3dTaXplKHRhYmxlczogYW55KSB7XG4gICAgICAgIGNvbnN0IHdzeiA9IHRoaXMuZnMud2luZG93U2l6ZSgwLCAzMCk7XG4gICAgICAgIHRoaXMuYWRqdXN0VGFibGUodGFibGVzLCB3c3oud2lkdGgsIHdzei5oZWlnaHQpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnLCBbJyRldmVudC50YXJnZXQnXSlcbiAgICBvblJlc2l6ZShldmVudDogYW55KSB7XG4gICAgICAgIHRoaXMud2luZG93U2l6ZSh0aGlzLnRhYmxlcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoOiB0aGlzLncuaW5uZXJIZWlnaHQsXG4gICAgICAgICAgICB3OiB0aGlzLncuaW5uZXJXaWR0aFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkanVzdFRhYmxlKHRhYmxlczogYW55LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLl93aWR0aCh0YWJsZXMudGhlYWQsIHdpZHRoICsgJ3B4Jyk7XG4gICAgICAgIHRoaXMuX3dpZHRoKHRhYmxlcy50Ym9keSwgd2lkdGggKyAncHgnKTtcblxuICAgICAgICB0aGlzLnNldEhlaWdodCh0YWJsZXMudGhlYWQsIGQzLnNlbGVjdCgnZGl2LnRhYmxlLWJvZHknKSwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBfd2lkdGgoZWxlbSwgd2lkdGgpIHtcbiAgICAgICAgZWxlbS5zdHlsZSgnd2lkdGgnLCB3aWR0aCk7XG4gICAgfVxuXG4gICAgc2V0SGVpZ2h0KHRoZWFkOiBhbnksIGJvZHk6IGFueSwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaCA9IGhlaWdodCAtICh0aGlzLm1hc3QubWFzdEhlaWdodCArXG4gICAgICAgICAgICB0aGlzLmZzLm5vUHhTdHlsZShkMy5zZWxlY3QoJy50YWJ1bGFyLWhlYWRlcicpLCAnaGVpZ2h0JykgK1xuICAgICAgICAgICAgdGhpcy5mcy5ub1B4U3R5bGUodGhlYWQsICdoZWlnaHQnKSArIHRoaXMucGRnKTtcbiAgICAgICAgYm9keS5zdHlsZSgnaGVpZ2h0JywgaCArICdweCcpO1xuICAgIH1cblxufVxuIl19