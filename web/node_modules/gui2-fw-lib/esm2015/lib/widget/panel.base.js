/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Base model of panel view - implemented by Panel components
 * @record
 */
export function PanelBase() { }
if (false) {
    /**
     * @param {?} cb
     * @return {?}
     */
    PanelBase.prototype.showPanel = function (cb) { };
    /**
     * @param {?} cb
     * @return {?}
     */
    PanelBase.prototype.hidePanel = function (cb) { };
    /**
     * @param {?} cb
     * @return {?}
     */
    PanelBase.prototype.togglePanel = function (cb) { };
    /**
     * @return {?}
     */
    PanelBase.prototype.panelIsVisible = function () { };
}
/**
 * ONOS GUI -- Widget -- Panel Base class
 *
 * Replacing the panel service in the old implementation
 * @abstract
 */
export class PanelBaseImpl {
    /**
     * @param {?} fs
     * @param {?} ls
     * @param {?} log
     */
    constructor(fs, ls, log) {
        this.fs = fs;
        this.ls = ls;
        this.log = log;
        //        this.log.debug('Panel base class constructed');
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    showPanel(cb) {
        this.on = true;
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    hidePanel(cb) {
        this.on = false;
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    togglePanel(cb) {
        if (this.on) {
            this.hidePanel(cb);
        }
        else {
            this.showPanel(cb);
        }
        return this.on;
    }
    /**
     * @return {?}
     */
    panelIsVisible() {
        return this.on;
    }
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    dummyLion(key) {
        return '%' + key + '%';
    }
}
if (false) {
    /** @type {?} */
    PanelBaseImpl.prototype.on;
    /** @type {?} */
    PanelBaseImpl.prototype.fs;
    /** @type {?} */
    PanelBaseImpl.prototype.ls;
    /** @type {?} */
    PanelBaseImpl.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3dpZGdldC9wYW5lbC5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBdUJBLCtCQUtDOzs7Ozs7SUFKRyxrREFBeUI7Ozs7O0lBQ3pCLGtEQUF5Qjs7Ozs7SUFDekIsb0RBQTJCOzs7O0lBQzNCLHFEQUEwQjs7Ozs7Ozs7QUFROUIsTUFBTSxPQUFnQixhQUFhOzs7Ozs7SUFJL0IsWUFDYyxFQUFhLEVBQ2IsRUFBa0IsRUFDbEIsR0FBZTtRQUZmLE9BQUUsR0FBRixFQUFFLENBQVc7UUFDYixPQUFFLEdBQUYsRUFBRSxDQUFnQjtRQUNsQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBRWpDLHlEQUF5RDtJQUNyRCxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxFQUFFO1FBQ1IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsRUFBRTtRQUNSLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEVBQUU7UUFDVixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7Ozs7Ozs7SUFNRCxTQUFTLENBQUMsR0FBVztRQUNqQixPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQzNCLENBQUM7Q0FDSjs7O0lBdENHLDJCQUFZOztJQUdSLDJCQUF1Qjs7SUFDdkIsMkJBQTRCOztJQUM1Qiw0QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRm5TZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7IExvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vbGF5ZXIvbG9hZGluZy5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2cuc2VydmljZSc7XG5cblxuLyoqXG4gKiBCYXNlIG1vZGVsIG9mIHBhbmVsIHZpZXcgLSBpbXBsZW1lbnRlZCBieSBQYW5lbCBjb21wb25lbnRzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFuZWxCYXNlIHtcbiAgICBzaG93UGFuZWwoY2I6IGFueSk6IHZvaWQ7XG4gICAgaGlkZVBhbmVsKGNiOiBhbnkpOiB2b2lkO1xuICAgIHRvZ2dsZVBhbmVsKGNiOiBhbnkpOiB2b2lkO1xuICAgIHBhbmVsSXNWaXNpYmxlKCk6IGJvb2xlYW47XG59XG5cbi8qKlxuICogT05PUyBHVUkgLS0gV2lkZ2V0IC0tIFBhbmVsIEJhc2UgY2xhc3NcbiAqXG4gKiBSZXBsYWNpbmcgdGhlIHBhbmVsIHNlcnZpY2UgaW4gdGhlIG9sZCBpbXBsZW1lbnRhdGlvblxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGFuZWxCYXNlSW1wbCBpbXBsZW1lbnRzIFBhbmVsQmFzZSB7XG5cbiAgICBvbjogYm9vbGVhbjtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJvdGVjdGVkIGZzOiBGblNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBsczogTG9hZGluZ1NlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBsb2c6IExvZ1NlcnZpY2VcbiAgICApIHtcbi8vICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnUGFuZWwgYmFzZSBjbGFzcyBjb25zdHJ1Y3RlZCcpO1xuICAgIH1cblxuICAgIHNob3dQYW5lbChjYikge1xuICAgICAgICB0aGlzLm9uID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoaWRlUGFuZWwoY2IpIHtcbiAgICAgICAgdGhpcy5vbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRvZ2dsZVBhbmVsKGNiKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLm9uKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVQYW5lbChjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3dQYW5lbChjYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMub247XG4gICAgfVxuXG4gICAgcGFuZWxJc1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgZHVtbXkgaW1wbGVtZW50YXRpb24gb2YgdGhlIGxpb25GbiB1bnRpbCB0aGUgcmVzcG9uc2UgaXMgcmVjZWl2ZWQgYW5kIHRoZSBMSU9OXG4gICAgICogYnVuZGxlIGlzIHJlY2VpdmVkIGZyb20gdGhlIFdlYlNvY2tldFxuICAgICAqL1xuICAgIGR1bW15TGlvbihrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnJScgKyBrZXkgKyAnJSc7XG4gICAgfVxufVxuIl19