/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable, Inject } from '@angular/core';
import { FnService } from '../util/fn.service';
import { GlyphService } from '../svg/glyph.service';
import { LogService } from '../log.service';
import { UrlFnService } from './urlfn.service';
import { WSock } from './wsock.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../svg/glyph.service";
import * as i3 from "../log.service";
import * as i4 from "./urlfn.service";
import * as i5 from "./wsock.service";
/**
 * Event Type structure for the WebSocketService
 * @record
 */
export function EventType() { }
if (false) {
    /** @type {?} */
    EventType.prototype.event;
    /** @type {?} */
    EventType.prototype.payload;
}
/**
 * @record
 */
export function Callback() { }
if (false) {
    /** @type {?} */
    Callback.prototype.id;
    /** @type {?} */
    Callback.prototype.error;
    /**
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    Callback.prototype.cb = function (host, url) { };
}
/**
 * @record
 */
function ClusterNode() { }
if (false) {
    /** @type {?} */
    ClusterNode.prototype.id;
    /** @type {?} */
    ClusterNode.prototype.ip;
    /** @type {?} */
    ClusterNode.prototype.m_uiAttached;
}
/**
 * @record
 */
function Glyph() { }
if (false) {
    /** @type {?} */
    Glyph.prototype.id;
    /** @type {?} */
    Glyph.prototype.viewbox;
    /** @type {?} */
    Glyph.prototype.path;
}
/**
 * @record
 */
function Bootstrap() { }
if (false) {
    /** @type {?} */
    Bootstrap.prototype.user;
    /** @type {?} */
    Bootstrap.prototype.clusterNodes;
    /** @type {?} */
    Bootstrap.prototype.glyphs;
}
/**
 * @record
 */
function ErrorData() { }
if (false) {
    /** @type {?} */
    ErrorData.prototype.message;
}
/**
 * @record
 */
export function WsOptions() { }
if (false) {
    /** @type {?} */
    WsOptions.prototype.wsport;
}
/**
 * ONOS GUI -- Remote -- Web Socket Service
 *
 * To see debug messages add ?debug=txrx to the URL
 */
export class WebSocketService {
    /**
     * @param {?} fs
     * @param {?} gs
     * @param {?} log
     * @param {?} ufs
     * @param {?} wsock
     * @param {?} window
     */
    constructor(fs, gs, log, ufs, wsock, window) {
        this.fs = fs;
        this.gs = gs;
        this.log = log;
        this.ufs = ufs;
        this.wsock = wsock;
        this.window = window;
        // web socket options
        this.ws = null; // web socket reference
        // web socket reference
        this.wsUp = false; // web socket is good to go
        // web socket is good to go
        // A map of event handler bindings - names and functions (that accept data and return void)
        this.handlers = new Map([]);
        this.pendingEvents = []; // events TX'd while socket not up
        // web socket URL
        this.clusterNodes = []; // ONOS instances data for failover
        // ONOS instances data for failover
        this.clusterIndex = -1; // the instance to which we are connected
        // the instance to which we are connected
        this.glyphs = [];
        this.connectRetries = 0; // limit our attempts at reconnecting
        // limit our attempts at reconnecting
        // A map of registered Callbacks for websocket open()
        this.openListeners = new Map([]);
        this.nextListenerId = 1; // internal ID for open listeners
        // internal ID for open listeners
        this.loggedInUser = null; // name of logged-in user
        this.log.debug(window.location.hostname);
        // Bind the boot strap event by default
        this.bindHandlers(new Map([
            ['bootstrap', (data) => this.bootstrap(data)],
            ['error', (data) => this.error(data)]
        ]));
        this.log.debug('WebSocketService constructed');
    }
    // The veil component delegate
    /**
     * built-in handler for the 'boostrap' event
     * @param {?} data
     * @return {?}
     */
    bootstrap(data) {
        this.loggedInUser = data.user;
        this.log.info('Websocket connection bootstraped', data);
        this.clusterNodes = data.clusterNodes;
        this.clusterNodes.forEach((d, i) => {
            if (d.m_uiAttached) {
                this.clusterIndex = i;
                this.log.info('Connected to cluster node ' + d.ip);
                // TODO: add connect info to masthead somewhere
            }
        });
        this.glyphs = data.glyphs;
        /** @type {?} */
        const glyphsMap = new Map([]);
        this.glyphs.forEach((d) => {
            glyphsMap.set('_' + d.id, d.viewbox);
            glyphsMap.set(d.id, d.path);
            this.gs.registerGlyphs(glyphsMap);
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    error(data) {
        /** @type {?} */
        const m = data.message || 'error from server';
        this.log.error(m, data);
        // Unrecoverable error - throw up the veil...
        if (this.vcd) {
            this.vcd.show([
                'Oops!',
                'Server reports error...',
                m,
            ]);
        }
    }
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     * @return {?}
     */
    handleOpen() {
        this.log.info('Web socket open - ', this.url);
        // Hide the veil
        if (this.vcd) {
            this.vcd.hide();
        }
        if (this.fs.debugOn('txrx')) {
            this.log.debug('Sending ' + this.pendingEvents.length + ' pending event(s)...');
        }
        this.pendingEvents.forEach((ev) => {
            this.send(ev);
        });
        this.pendingEvents = [];
        this.connectRetries = 0;
        this.wsUp = true;
        this.informListeners(this.host, this.url);
    }
    /**
     * Function called when WebSocket send a message
     * @param {?} msgEvent
     * @return {?}
     */
    handleMessage(msgEvent) {
        /** @type {?} */
        let ev;
        /** @type {?} */
        let h;
        try {
            ev = JSON.parse(msgEvent.data);
        }
        catch (e) {
            this.log.error('Message.data is not valid JSON', msgEvent.data, e);
            return null;
        }
        if (this.fs.debugOn('txrx')) {
            this.log.debug(' << *Rx* ', ev.event, ev.payload);
        }
        h = this.handlers.get(ev.event);
        if (h) {
            try {
                h(ev.payload);
            }
            catch (e) {
                this.log.error('Problem handling event:', ev, e);
                return null;
            }
        }
        else {
            this.log.warn('Unhandled event:', ev);
        }
    }
    /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     * @return {?}
     */
    handleClose() {
        this.log.warn('Web socket closed');
        if (this.lcd) {
            this.lcd.stop();
        }
        this.wsUp = false;
        /** @type {?} */
        let gsucc;
        if (gsucc = this.findGuiSuccessor()) {
            this.url = this.createWebSocket(this.webSockOpts, gsucc);
        }
        else {
            // If no controllers left to contact, show the Veil...
            if (this.vcd) {
                this.vcd.show([
                    'Oops!',
                    'Web-socket connection to server closed...',
                    'Try refreshing the page.',
                ]);
            }
        }
    }
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     * @return {?}
     */
    findGuiSuccessor() {
        /** @type {?} */
        const ncn = this.clusterNodes.length;
        /** @type {?} */
        let ip;
        /** @type {?} */
        let node;
        while (this.connectRetries < ncn && !ip) {
            this.connectRetries++;
            this.clusterIndex = (this.clusterIndex + 1) % ncn;
            node = this.clusterNodes[this.clusterIndex];
            ip = node && node.ip;
        }
        return ip;
    }
    /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    informListeners(host, url) {
        for (const [key, cb] of this.openListeners.entries()) {
            cb.cb(host, url);
        }
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    send(ev) {
        if (this.fs.debugOn('txrx')) {
            this.log.debug(' *Tx* >> ', ev.event, ev.payload);
        }
        this.ws.send(JSON.stringify(ev));
    }
    /**
     * Check if there are no WSS event handlers left
     * @param {?} handlers
     * @param {?} caller
     * @return {?}
     */
    noHandlersWarn(handlers, caller) {
        if (!handlers || handlers.size === 0) {
            this.log.warn('WSS.' + caller + '(): no event handlers');
            return true;
        }
        return false;
    }
    /* ===================
         * === API Functions
         */
    /**
     * Required for unit tests to set to known state
     * @return {?}
     */
    resetState() {
        this.webSockOpts = undefined;
        this.ws = null;
        this.wsUp = false;
        this.host = undefined;
        this.url = undefined;
        this.pendingEvents = [];
        this.handlers.clear();
        this.clusterNodes = [];
        this.clusterIndex = -1;
        this.glyphs = [];
        this.connectRetries = 0;
        this.openListeners.clear();
        this.nextListenerId = 1;
    }
    /*
         * Currently supported opts:
         *  wsport: web socket port (other than default 8181)
         *  host:   if defined, is the host address to use
         */
    /**
     * @param {?=} opts
     * @param {?=} host
     * @return {?}
     */
    createWebSocket(opts, host) {
        this.webSockOpts = opts; // preserved for future calls
        this.host = host === undefined ? this.window.location.host : host;
        this.url = this.ufs.wsUrl('core', opts === undefined ? '' : opts['wsport'].toString(), host);
        this.log.debug('Attempting to open websocket to: ' + this.url);
        this.ws = this.wsock.newWebSocket(this.url);
        if (this.ws) {
            // fat arrow => syntax means that the 'this' context passed will
            // be of WebSocketService, not the WebSocket
            this.ws.onopen = (() => this.handleOpen());
            this.ws.onmessage = ((msgEvent) => this.handleMessage(msgEvent));
            this.ws.onclose = (() => this.handleClose());
            /** @type {?} */
            const authToken = this.window['onosAuth'];
            this.log.debug('Auth Token for opening WebSocket', authToken);
            this.sendEvent('authentication', { token: authToken });
        }
        // Note: Wsock logs an error if the new WebSocket call fails
        return this.url;
    }
    /**
     * Tell the WebSocket to close - this should call the handleClose() method
     * @return {?}
     */
    closeWebSocket() {
        this.ws.close();
    }
    /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     * @param {?} handlerMap
     * @return {?}
     */
    bindHandlers(handlerMap) {
        /** @type {?} */
        const dups = [];
        if (this.noHandlersWarn(handlerMap, 'bindHandlers')) {
            return null;
        }
        for (const [eventId, api] of handlerMap) {
            this.log.debug('Adding handler for ', eventId);
            /** @type {?} */
            const fn = this.fs.isF(api) || this.fs.isF(api[eventId]);
            if (!fn) {
                this.log.warn(eventId + ' handler not a function');
                return;
            }
            if (this.handlers.get(eventId)) {
                dups.push(eventId);
            }
            else {
                this.handlers.set(eventId, fn);
            }
        }
        if (dups.length) {
            this.log.warn('duplicate bindings ignored:', dups);
        }
    }
    /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     * @param {?} handlerIds
     * @return {?}
     */
    unbindHandlers(handlerIds) {
        if (handlerIds.length === 0) {
            this.log.warn('WSS.unbindHandlers(): no event handlers');
            return null;
        }
        for (const eventId of handlerIds) {
            this.handlers.delete(eventId);
        }
    }
    /**
     * @param {?} handlerId
     * @return {?}
     */
    isHandling(handlerId) {
        return this.handlers.get(handlerId) !== undefined;
    }
    /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     * @param {?} callback
     * @return {?}
     */
    addOpenListener(callback) {
        /** @type {?} */
        const id = this.nextListenerId++;
        /** @type {?} */
        const cb = this.fs.isF(callback);
        /** @type {?} */
        const o = (/** @type {?} */ ({ id: id, cb: cb }));
        if (cb) {
            this.openListeners.set(id, o);
        }
        else {
            this.log.error('WSS.addOpenListener(): callback not a function');
            o.error = 'No callback defined';
        }
        return o;
    }
    /**
     * Remove a listener of WebSocket opening
     * @param {?} lsnr
     * @return {?}
     */
    removeOpenListener(lsnr) {
        /** @type {?} */
        const id = this.fs.isO(lsnr) && lsnr.id;
        /** @type {?} */
        let o;
        if (!id) {
            this.log.warn('WSS.removeOpenListener(): invalid listener', lsnr);
            return null;
        }
        o = this.openListeners[id];
        if (o) {
            this.openListeners.delete(id);
        }
    }
    /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     * @param {?} evType
     * @param {?} payload
     * @return {?}
     */
    sendEvent(evType, payload) {
        /** @type {?} */
        const ev = (/** @type {?} */ ({
            event: evType,
            payload: payload
        }));
        if (this.wsUp) {
            this.send(ev);
        }
        else {
            this.pendingEvents.push(ev);
        }
    }
    /**
     * Binds the veil service as a delegate.
     * @param {?} vd
     * @return {?}
     */
    setVeilDelegate(vd) {
        this.vcd = vd;
    }
    /**
     * Binds the loading service as a delegate
     * @param {?} ld
     * @return {?}
     */
    setLoadingDelegate(ld) {
        // TODO - Investigate changing Loading Service to LoadingComponent
        this.log.debug('Loading delegate set', ld);
        this.lcd = ld;
    }
    /**
     * @return {?}
     */
    isConnected() {
        return this.wsUp;
    }
}
WebSocketService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
WebSocketService.ctorParameters = () => [
    { type: FnService },
    { type: GlyphService },
    { type: LogService },
    { type: UrlFnService },
    { type: WSock },
    { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
];
/** @nocollapse */ WebSocketService.ngInjectableDef = i0.defineInjectable({ factory: function WebSocketService_Factory() { return new WebSocketService(i0.inject(i1.FnService), i0.inject(i2.GlyphService), i0.inject(i3.LogService), i0.inject(i4.UrlFnService), i0.inject(i5.WSock), i0.inject("Window")); }, token: WebSocketService, providedIn: "root" });
if (false) {
    /** @type {?} */
    WebSocketService.prototype.webSockOpts;
    /** @type {?} */
    WebSocketService.prototype.ws;
    /** @type {?} */
    WebSocketService.prototype.wsUp;
    /** @type {?} */
    WebSocketService.prototype.handlers;
    /** @type {?} */
    WebSocketService.prototype.pendingEvents;
    /** @type {?} */
    WebSocketService.prototype.host;
    /** @type {?} */
    WebSocketService.prototype.url;
    /** @type {?} */
    WebSocketService.prototype.clusterNodes;
    /** @type {?} */
    WebSocketService.prototype.clusterIndex;
    /** @type {?} */
    WebSocketService.prototype.glyphs;
    /** @type {?} */
    WebSocketService.prototype.connectRetries;
    /** @type {?} */
    WebSocketService.prototype.openListeners;
    /** @type {?} */
    WebSocketService.prototype.nextListenerId;
    /** @type {?} */
    WebSocketService.prototype.loggedInUser;
    /** @type {?} */
    WebSocketService.prototype.lcd;
    /** @type {?} */
    WebSocketService.prototype.vcd;
    /** @type {?} */
    WebSocketService.prototype.fs;
    /** @type {?} */
    WebSocketService.prototype.gs;
    /** @type {?} */
    WebSocketService.prototype.log;
    /** @type {?} */
    WebSocketService.prototype.ufs;
    /** @type {?} */
    WebSocketService.prototype.wsock;
    /** @type {?} */
    WebSocketService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,