/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { LogService } from '../log.service';
import * as i0 from "@angular/core";
import * as i1 from "../log.service";
/**
 * ONOS GUI -- Remote -- Web Socket Wrapper Service
 *
 * This service provided specifically so that it can be mocked in unit tests.
 */
export class WSock {
    /**
     * @param {?} log
     */
    constructor(log) {
        this.log = log;
        this.log.debug('WSockService constructed');
    }
    /**
     * @param {?} url
     * @return {?}
     */
    newWebSocket(url) {
        /** @type {?} */
        let ws = null;
        try {
            ws = new WebSocket(url);
        }
        catch (e) {
            this.log.error('Unable to create web socket:', e);
        }
        return ws;
    }
}
WSock.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
WSock.ctorParameters = () => [
    { type: LogService }
];
/** @nocollapse */ WSock.ngInjectableDef = i0.defineInjectable({ factory: function WSock_Factory() { return new WSock(i0.inject(i1.LogService)); }, token: WSock, providedIn: "root" });
if (false) {
    /** @type {?} */
    WSock.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3NvY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3JlbW90ZS93c29jay5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7QUFVNUMsTUFBTSxPQUFPLEtBQUs7Ozs7SUFFaEIsWUFDVSxHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUV2QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBR0QsWUFBWSxDQUFDLEdBQUc7O1lBQ1IsRUFBRSxHQUFHLElBQUk7UUFDYixJQUFJO1lBQ0EsRUFBRSxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQzs7O1lBcEJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVRRLFVBQVU7Ozs7O0lBYWYsb0JBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2cuc2VydmljZSc7XG5cbi8qKlxuICogT05PUyBHVUkgLS0gUmVtb3RlIC0tIFdlYiBTb2NrZXQgV3JhcHBlciBTZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIHByb3ZpZGVkIHNwZWNpZmljYWxseSBzbyB0aGF0IGl0IGNhbiBiZSBtb2NrZWQgaW4gdW5pdCB0ZXN0cy5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFdTb2NrIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy5sb2cuZGVidWcoJ1dTb2NrU2VydmljZSBjb25zdHJ1Y3RlZCcpO1xuICB9XG5cblxuICBuZXdXZWJTb2NrZXQodXJsKSB7XG4gICAgICBsZXQgd3MgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgICB3cyA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLmxvZy5lcnJvcignVW5hYmxlIHRvIGNyZWF0ZSB3ZWIgc29ja2V0OicsIGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdzO1xuICB9XG5cbn1cbiJdfQ==