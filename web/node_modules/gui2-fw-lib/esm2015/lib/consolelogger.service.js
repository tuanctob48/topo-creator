/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { environment } from '../environments/environment';
import * as i0 from "@angular/core";
/** @type {?} */
export let isDebugMode = !environment.production;
/** @type {?} */
const noop = () => undefined;
const ɵ0 = noop;
/**
 * ONOS GUI -- LogService
 * Inspired by https://robferguson.org/blog/2017/09/09/a-simple-logging-service-for-angular-4/
 */
export class ConsoleLoggerService {
    /**
     * @return {?}
     */
    get debug() {
        if (isDebugMode) {
            return console.debug.bind(console);
        }
        else {
            return noop;
        }
    }
    /**
     * @return {?}
     */
    get info() {
        if (isDebugMode) {
            return console.info.bind(console);
        }
        else {
            return noop;
        }
    }
    /**
     * @return {?}
     */
    get warn() {
        return console.warn.bind(console);
    }
    /**
     * @return {?}
     */
    get error() {
        return console.error.bind(console);
    }
    /**
     * @param {?} type
     * @param {?=} args
     * @return {?}
     */
    invokeConsoleMethod(type, args) {
        /** @type {?} */
        const logFn = (console)[type] || console.log || noop;
        logFn.apply(console, [args]);
    }
}
ConsoleLoggerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */ ConsoleLoggerService.ngInjectableDef = i0.defineInjectable({ factory: function ConsoleLoggerService_Factory() { return new ConsoleLoggerService(); }, token: ConsoleLoggerService, providedIn: "root" });
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZWxvZ2dlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvY29uc29sZWxvZ2dlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBRzFELE1BQU0sS0FBSyxXQUFXLEdBQVksQ0FBQyxXQUFXLENBQUMsVUFBVTs7TUFFbkQsSUFBSSxHQUFHLEdBQVEsRUFBRSxDQUFDLFNBQVM7Ozs7OztBQVNqQyxNQUFNLE9BQU8sb0JBQW9COzs7O0lBRS9CLElBQUksS0FBSztRQUNQLElBQUksV0FBVyxFQUFFO1lBQ2YsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLElBQUk7UUFDTixJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxJQUFZLEVBQUUsSUFBVTs7Y0FDcEMsS0FBSyxHQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSSxJQUFJO1FBQzlELEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7WUFoQ0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vZW52aXJvbm1lbnRzL2Vudmlyb25tZW50JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nLnNlcnZpY2UnO1xuXG5leHBvcnQgbGV0IGlzRGVidWdNb2RlOiBib29sZWFuID0gIWVudmlyb25tZW50LnByb2R1Y3Rpb247XG5cbmNvbnN0IG5vb3AgPSAoKTogYW55ID0+IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBPTk9TIEdVSSAtLSBMb2dTZXJ2aWNlXG4gKiBJbnNwaXJlZCBieSBodHRwczovL3JvYmZlcmd1c29uLm9yZy9ibG9nLzIwMTcvMDkvMDkvYS1zaW1wbGUtbG9nZ2luZy1zZXJ2aWNlLWZvci1hbmd1bGFyLTQvXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nZ2VyU2VydmljZSBpbXBsZW1lbnRzIExvZ2dlciB7XG5cbiAgZ2V0IGRlYnVnKCkge1xuICAgIGlmIChpc0RlYnVnTW9kZSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZGVidWcuYmluZChjb25zb2xlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGluZm8oKSB7XG4gICAgaWYgKGlzRGVidWdNb2RlKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5pbmZvLmJpbmQoY29uc29sZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgfVxuXG4gIGdldCB3YXJuKCkge1xuICAgIHJldHVybiBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbiAgfVxuXG4gIGdldCBlcnJvcigpIHtcbiAgICByZXR1cm4gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuICB9XG5cbiAgaW52b2tlQ29uc29sZU1ldGhvZCh0eXBlOiBzdHJpbmcsIGFyZ3M/OiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBsb2dGbjogRnVuY3Rpb24gPSAoY29uc29sZSlbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcDtcbiAgICBsb2dGbi5hcHBseShjb25zb2xlLCBbYXJnc10pO1xuICB9XG59XG4iXX0=