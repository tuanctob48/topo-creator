/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';
/**
 * ONOS GUI -- Layer -- Flash Component
 *
 * Replaces Flash Service in old GUI.
 * Provides a mechanism to flash short informational messages to the screen
 * to alert the user of something, e.g. "Hosts visible" or "Hosts hidden".
 *
 * It can be used in a warning mode, where text will appear in red
 * The dwell time (milliseconds) can be controlled or the default is 1200ms
 *
 * To use add an element to the template like
 *   <onos-flash message="Hosts visible" dwell="2000" warning="true"></onos-flash>
 * This whole element can be disabled until needed with an ngIf, but if this is done
 * the animated fade-in and fade-out will not happen
 * There is also a (closed) event that tells you when the message is closed, or
 * fades-out
 */
export class FlashComponent {
    constructor() {
        this.dwell = 1200; // milliseconds
        // milliseconds
        this.warning = false;
        this.closed = new EventEmitter();
        this.visible = false;
    }
    /**
     * Flash a message up for 1200ms then disappear again.
     * See animation parameter for the ease in and ease out params
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['message'] && this.message && this.message !== '') {
            this.visible = true;
            setTimeout(() => {
                this.visible = false;
                this.closed.emit(false);
            }, this.dwell);
        }
    }
    /**
     * The message will flash up for 'dwell' milliseconds
     * If dwell is > 2000ms, then there will be a button that allows it to be dismissed now
     * @return {?}
     */
    closeNow() {
        this.visible = false;
        this.closed.emit(false);
    }
}
FlashComponent.decorators = [
    { type: Component, args: [{
                selector: 'onos-flash',
                template: `<!--
~ Copyright 2018-present Open Networking Foundation
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<div id="flash" class="dialog" [ngClass]="warning?'warning':''" [@flashState]="visible">
    <div id="flashBox" *ngIf="visible">
        <p id="flashText">{{ message }}</p>
        <div class="dialog-button" *ngIf="dwell>1200" (click)="closeNow()">Dismiss</div>
    </div>
</div>`,
                styles: [`#flash{position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);z-index:1400}#flash.warning div#flashBox{border:2px solid #222;border-radius:10px;background:#fff;padding:10px}#flash div#flashBox{background:#ccc;border-radius:10px;padding:1px}#flash div#flashBox div.dialog-button{-webkit-transform:translateY(-32px);transform:translateY(-32px)}#flash.warning p#flashText{stroke:red;color:red;text-anchor:middle;alignment-baseline:middle;text-align:center;font-size:16pt;border-radius:10px;background:#fff;padding:10px}#flash p#flashText{stroke:none;color:#222;text-anchor:middle;alignment-baseline:middle;text-align:center;font-size:16pt;border-radius:10px;background:#ccc;padding:5px}`, `.dialog h2{margin:0;word-wrap:break-word;display:inline-block;width:210px;vertical-align:middle}.dialog .dialog-button{display:inline-block;cursor:pointer;height:20px;padding:6px 8px 2px;margin:4px;float:right}`, `.dialog .dialog-button{background-color:#518ecc;color:#fff}.dark .dialog .dialog-button{background-color:#345e85;color:#cccccd}`],
                animations: [
                    trigger('flashState', [
                        state('false', style({
                            //                transform: 'translateY(-400%)',
                            opacity: '0.0',
                        })),
                        state('true', style({
                            //                transform: 'translateY(0%)',
                            opacity: '1.0',
                        })),
                        transition('0 => 1', animate('200ms ease-in')),
                        transition('1 => 0', animate('200ms ease-out'))
                    ])
                ]
            },] },
];
FlashComponent.propDecorators = {
    message: [{ type: Input }],
    dwell: [{ type: Input }],
    warning: [{ type: Input }],
    closed: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FlashComponent.prototype.message;
    /** @type {?} */
    FlashComponent.prototype.dwell;
    /** @type {?} */
    FlashComponent.prototype.warning;
    /** @type {?} */
    FlashComponent.prototype.closed;
    /** @type {?} */
    FlashComponent.prototype.visible;
}
//# sourceMappingURL=data:application/json;base64,