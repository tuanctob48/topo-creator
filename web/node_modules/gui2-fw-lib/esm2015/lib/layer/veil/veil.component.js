/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component } from '@angular/core';
import { FnService } from '../../util/fn.service';
import { GlyphService } from '../../svg/glyph.service';
import { LogService } from '../../log.service';
import { SvgUtilService } from '../../svg/svgutil.service';
import { WebSocketService } from '../../remote/websocket.service';
/** @type {?} */
const BIRD = 'bird';
/**
 * ONOS GUI -- Layer -- Veil Component
 *
 * Provides a mechanism to display an overlaying div with information.
 * Used mainly for web socket connection interruption.
 *
 * It can be added to an component's template as follows:
 *     <onos-veil #veil></onos-veil>
 *     <p (click)="veil.show(['t1','t2','t3'])">Test Veil</p>
 */
export class VeilComponent {
    /**
     * @param {?} fs
     * @param {?} gs
     * @param {?} log
     * @param {?} sus
     * @param {?} wss
     */
    constructor(fs, gs, log, sus, wss) {
        this.fs = fs;
        this.gs = gs;
        this.log = log;
        this.sus = sus;
        this.wss = wss;
        this.enabled = false;
        this.messages = [];
        /** @type {?} */
        const wSize = this.fs.windowSize();
        this.ww = wSize.width;
        this.wh = wSize.height;
        /** @type {?} */
        const shrink = this.wh * 0.3;
        this.birdDim = this.wh - shrink;
        /** @type {?} */
        const birdCenter = (this.ww - this.birdDim) / 2;
        this.trans = this.sus.translate([birdCenter, shrink / 2]);
        this.log.debug('VeilComponent with ' + BIRD + ' constructed');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // msg should be an array of strings
    /**
     * @param {?} msgs
     * @return {?}
     */
    show(msgs) {
        this.messages = msgs;
        this.enabled = true;
        //        this.ks.enableKeys(false);
    }
    /**
     * @return {?}
     */
    hide() {
        this.veilStyle = 'display: none';
        //        this.ks.enableKeys(true);
    }
}
VeilComponent.decorators = [
    { type: Component, args: [{
                selector: 'onos-veil',
                template: `<!--
~ Copyright 2018-present Open Networking Foundation
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->

<div id="veil" *ngIf="enabled">
    <p *ngFor="let msg of messages">{{ msg }}</p>
    <svg [attr.width]="fs.windowSize().width" [attr.height]="fs.windowSize().height">
        <use [attr.width]="birdDim" [attr.height]="birdDim" class="glyph"
             style="opacity: 0.2;"
             xlink:href = "#bird" [attr.transform]="trans"/>

    </svg>
</div>
`,
                styles: [`#veil{z-index:5000;display:block;position:absolute;top:0;left:0;padding:60px}#veil p{display:block;text-align:left;font-size:14pt;font-style:italic}`, `#veil,.light{background-color:rgba(0,0,0,.75)}#veil,.dark{background-color:rgba(64,64,64,.75)}#veil p{color:#ddd}#veil svg .glyph{fill:#222}`]
            },] },
];
/** @nocollapse */
VeilComponent.ctorParameters = () => [
    { type: FnService },
    { type: GlyphService },
    { type: LogService },
    { type: SvgUtilService },
    { type: WebSocketService }
];
if (false) {
    /** @type {?} */
    VeilComponent.prototype.ww;
    /** @type {?} */
    VeilComponent.prototype.wh;
    /** @type {?} */
    VeilComponent.prototype.birdSvg;
    /** @type {?} */
    VeilComponent.prototype.birdDim;
    /** @type {?} */
    VeilComponent.prototype.enabled;
    /** @type {?} */
    VeilComponent.prototype.trans;
    /** @type {?} */
    VeilComponent.prototype.messages;
    /** @type {?} */
    VeilComponent.prototype.veilStyle;
    /** @type {?} */
    VeilComponent.prototype.fs;
    /** @type {?} */
    VeilComponent.prototype.gs;
    /** @type {?} */
    VeilComponent.prototype.log;
    /** @type {?} */
    VeilComponent.prototype.sus;
    /** @type {?} */
    VeilComponent.prototype.wss;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVpbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9sYXllci92ZWlsL3ZlaWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7TUFFNUQsSUFBSSxHQUFHLE1BQU07Ozs7Ozs7Ozs7O0FBMENuQixNQUFNLE9BQU8sYUFBYTs7Ozs7Ozs7SUFVdEIsWUFDVyxFQUFhLEVBQ1osRUFBZ0IsRUFDaEIsR0FBZSxFQUNmLEdBQW1CLEVBQ25CLEdBQXFCO1FBSnRCLE9BQUUsR0FBRixFQUFFLENBQVc7UUFDWixPQUFFLEdBQUYsRUFBRSxDQUFjO1FBQ2hCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUNuQixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQVZqQyxZQUFPLEdBQVksS0FBSyxDQUFDO1FBRXpCLGFBQVEsR0FBYSxFQUFFLENBQUM7O2NBVWQsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFO1FBQ2xDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7O2NBQ2pCLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUc7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQzs7Y0FDMUIsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixHQUFHLElBQUksR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7Ozs7OztJQUdELElBQUksQ0FBQyxJQUFjO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDNUIsb0NBQW9DO0lBQ2hDLENBQUM7Ozs7SUFFRCxJQUFJO1FBQ0EsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUM7UUFDekMsbUNBQW1DO0lBQy9CLENBQUM7OztZQXZFSixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXlCWDtnQkFDQyxNQUFNLEVBQUUsQ0FBQyxzSkFBc0osRUFBRSw4SUFBOEksQ0FBQzthQUNqVDs7OztZQS9DUSxTQUFTO1lBQ1QsWUFBWTtZQUNaLFVBQVU7WUFDVixjQUFjO1lBQ2QsZ0JBQWdCOzs7O0lBNkNyQiwyQkFBVzs7SUFDWCwyQkFBVzs7SUFDWCxnQ0FBZ0I7O0lBQ2hCLGdDQUFnQjs7SUFDaEIsZ0NBQXlCOztJQUN6Qiw4QkFBYzs7SUFDZCxpQ0FBd0I7O0lBQ3hCLGtDQUFrQjs7SUFHZCwyQkFBb0I7O0lBQ3BCLDJCQUF3Qjs7SUFDeEIsNEJBQXVCOztJQUN2Qiw0QkFBMkI7O0lBQzNCLDRCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC1wcmVzZW50IE9wZW4gTmV0d29ya2luZyBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm5TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7IEdseXBoU2VydmljZSB9IGZyb20gJy4uLy4uL3N2Zy9nbHlwaC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBTdmdVdGlsU2VydmljZSB9IGZyb20gJy4uLy4uL3N2Zy9zdmd1dGlsLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJy4uLy4uL3JlbW90ZS93ZWJzb2NrZXQuc2VydmljZSc7XG5cbmNvbnN0IEJJUkQgPSAnYmlyZCc7XG5cbi8qKlxuICogT05PUyBHVUkgLS0gTGF5ZXIgLS0gVmVpbCBDb21wb25lbnRcbiAqXG4gKiBQcm92aWRlcyBhIG1lY2hhbmlzbSB0byBkaXNwbGF5IGFuIG92ZXJsYXlpbmcgZGl2IHdpdGggaW5mb3JtYXRpb24uXG4gKiBVc2VkIG1haW5seSBmb3Igd2ViIHNvY2tldCBjb25uZWN0aW9uIGludGVycnVwdGlvbi5cbiAqXG4gKiBJdCBjYW4gYmUgYWRkZWQgdG8gYW4gY29tcG9uZW50J3MgdGVtcGxhdGUgYXMgZm9sbG93czpcbiAqICAgICA8b25vcy12ZWlsICN2ZWlsPjwvb25vcy12ZWlsPlxuICogICAgIDxwIChjbGljayk9XCJ2ZWlsLnNob3coWyd0MScsJ3QyJywndDMnXSlcIj5UZXN0IFZlaWw8L3A+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ29ub3MtdmVpbCcsXG4gIHRlbXBsYXRlOiBgPCEtLVxufiBDb3B5cmlnaHQgMjAxOC1wcmVzZW50IE9wZW4gTmV0d29ya2luZyBGb3VuZGF0aW9uXG5+XG5+IExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG5+IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbn4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5+XG5+ICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbn5cbn4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxufiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5+IFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxufiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5+IGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLS0+XG5cbjxkaXYgaWQ9XCJ2ZWlsXCIgKm5nSWY9XCJlbmFibGVkXCI+XG4gICAgPHAgKm5nRm9yPVwibGV0IG1zZyBvZiBtZXNzYWdlc1wiPnt7IG1zZyB9fTwvcD5cbiAgICA8c3ZnIFthdHRyLndpZHRoXT1cImZzLndpbmRvd1NpemUoKS53aWR0aFwiIFthdHRyLmhlaWdodF09XCJmcy53aW5kb3dTaXplKCkuaGVpZ2h0XCI+XG4gICAgICAgIDx1c2UgW2F0dHIud2lkdGhdPVwiYmlyZERpbVwiIFthdHRyLmhlaWdodF09XCJiaXJkRGltXCIgY2xhc3M9XCJnbHlwaFwiXG4gICAgICAgICAgICAgc3R5bGU9XCJvcGFjaXR5OiAwLjI7XCJcbiAgICAgICAgICAgICB4bGluazpocmVmID0gXCIjYmlyZFwiIFthdHRyLnRyYW5zZm9ybV09XCJ0cmFuc1wiLz5cblxuICAgIDwvc3ZnPlxuPC9kaXY+XG5gLFxuICBzdHlsZXM6IFtgI3ZlaWx7ei1pbmRleDo1MDAwO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3BhZGRpbmc6NjBweH0jdmVpbCBwe2Rpc3BsYXk6YmxvY2s7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtc2l6ZToxNHB0O2ZvbnQtc3R5bGU6aXRhbGljfWAsIGAjdmVpbCwubGlnaHR7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC43NSl9I3ZlaWwsLmRhcmt7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDY0LDY0LDY0LC43NSl9I3ZlaWwgcHtjb2xvcjojZGRkfSN2ZWlsIHN2ZyAuZ2x5cGh7ZmlsbDojMjIyfWBdXG59KVxuZXhwb3J0IGNsYXNzIFZlaWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHd3OiBudW1iZXI7XG4gICAgd2g6IG51bWJlcjtcbiAgICBiaXJkU3ZnOiBzdHJpbmc7XG4gICAgYmlyZERpbTogbnVtYmVyO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB0cmFuczogc3RyaW5nO1xuICAgIG1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHZlaWxTdHlsZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmczogRm5TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGdzOiBHbHlwaFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9nOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHN1czogU3ZnVXRpbFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgd3NzOiBXZWJTb2NrZXRTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHdTaXplID0gdGhpcy5mcy53aW5kb3dTaXplKCk7XG4gICAgICAgIHRoaXMud3cgPSB3U2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy53aCA9IHdTaXplLmhlaWdodDtcbiAgICAgICAgY29uc3Qgc2hyaW5rID0gdGhpcy53aCAqIDAuMztcbiAgICAgICAgdGhpcy5iaXJkRGltID0gdGhpcy53aCAtIHNocmluaztcbiAgICAgICAgY29uc3QgYmlyZENlbnRlciA9ICh0aGlzLnd3IC0gdGhpcy5iaXJkRGltKSAvIDI7XG4gICAgICAgIHRoaXMudHJhbnMgPSB0aGlzLnN1cy50cmFuc2xhdGUoW2JpcmRDZW50ZXIsIHNocmluayAvIDJdKTtcblxuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnVmVpbENvbXBvbmVudCB3aXRoICcgKyBCSVJEICsgJyBjb25zdHJ1Y3RlZCcpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgIH1cblxuICAgIC8vIG1zZyBzaG91bGQgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nc1xuICAgIHNob3cobXNnczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG1zZ3M7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4vLyAgICAgICAgdGhpcy5rcy5lbmFibGVLZXlzKGZhbHNlKTtcbiAgICB9XG5cbiAgICBoaWRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZlaWxTdHlsZSA9ICdkaXNwbGF5OiBub25lJztcbi8vICAgICAgICB0aGlzLmtzLmVuYWJsZUtleXModHJ1ZSk7XG4gICAgfVxuXG5cbn1cbiJdfQ==