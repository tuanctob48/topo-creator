/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { LogService } from '../../log.service';
import { LionService } from '../../util/lion.service';
/**
 * ONOS GUI -- Layer -- Confirm Component
 *
 * Replaces Flash Service in old GUI.
 * Provides a mechanism to present a confirm dialog to the screen
 *
 * To use add an element to the template like
 *   <onos-confirm message="Performing something dangerous. Would you like to proceed"></onos-flash>
 *
 * An event is raised with either OK or Cancel
 */
export class ConfirmComponent {
    /**
     * @param {?} log
     * @param {?} lion
     */
    constructor(log, lion) {
        this.log = log;
        this.lion = lion;
        this.chosen = new EventEmitter();
        this.log.debug('ConfirmComponent constructed');
        this.doLion();
    }
    /**
     * When OK or Cancel is pressed, send an event to parent with choice
     * @param {?} chosen
     * @return {?}
     */
    choice(chosen) {
        this.chosen.emit(chosen);
    }
    /**
     * Read the LION bundle for App to get confirm dialouge header
     * @return {?}
     */
    doLion() {
        this.lionFn = this.lion.bundle('core.view.App');
    }
}
ConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'onos-confirm',
                template: `<!--
~ Copyright 2018-present Open Networking Foundation
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<div id="app-dialog" class="floatpanel dialog" [@confirmDlgState]="message!==''">
    <h3> {{ title }} </h3>
    <p>{{ message }}</p>
    <p *ngIf="warning" class="warning strong">{{ warning }}</p>
    <div tabindex="10" class="dialog-button" (click)="choice(true)">OK</div>
    <div tabindex="11" class="dialog-button" (click)="choice(false)">Cancel</div>
</div>
`,
                styles: [`#app-dialog{top:140px;padding:12px}#app-dialog h3{display:inline-block;font-weight:700;font-size:18pt}#app-dialog p{font-size:12pt}#app-dialog p.strong{font-weight:700;padding:8px;text-align:center}`, `#app-dialog.floatpanel.dialog{background-color:#fff}#app-dialog p.strong{color:#fff;background-color:#ce5b58}`, `.dialog h2{margin:0;word-wrap:break-word;display:inline-block;width:210px;vertical-align:middle}.dialog .dialog-button{display:inline-block;cursor:pointer;height:20px;padding:6px 8px 2px;margin:4px;float:right}`, `.dialog .dialog-button{background-color:#518ecc;color:#fff}.dark .dialog .dialog-button{background-color:#345e85;color:#cccccd}`, `.floatpanel{position:absolute;z-index:100;display:block;top:160px;width:544px;right:-550px;opacity:100;padding:2px;font-size:10pt;background-color:#fff;color:#3c3a3a;border:1px solid #c7c7c0}.floatpanel hr{border:1px solid #c7c7c0}.floatpanel .bottom tr:nth-child(odd){background-color:#f4f4f4}.floatpanel .bottom tr:nth-child(even){background-color:#fbfbfb}.floatpanel.dialog{top:180px}html[data-platform=iPad] .floatpanel{top:80px}`, `.light .floatpanel{background-color:#fff;color:#3c3a3a;border:1px solid #c7c7c0}.light .floatpanel hr{border:1px solid #c7c7c0}.light .floatpanel .bottom tr:nth-child(odd){background-color:#f4f4f4}.light .floatpanel .bottom tr:nth-child(even){background-color:#fbfbfb}.dark .floatpanel{background-color:#282528;color:#888c8c;border:1px solid #364144}.dark .floatpanel th{background-color:#242424}.dark .floatpanel h2{color:#ddd}.dark .floatpanel hr{border:1px solid #30303a}.dark .floatpanel .bottom tr:nth-child(odd){background-color:#333}.dark .floatpanel .bottom tr:nth-child(even){background-color:#3a3a3a}`],
                animations: [
                    trigger('confirmDlgState', [
                        state('true', style({
                            transform: 'translateX(-100%)',
                            opacity: '100'
                        })),
                        state('false', style({
                            transform: 'translateX(0%)',
                            opacity: '0'
                        })),
                        transition('0 => 1', animate('100ms ease-in')),
                        transition('1 => 0', animate('100ms ease-out'))
                    ])
                ]
            },] },
];
/** @nocollapse */
ConfirmComponent.ctorParameters = () => [
    { type: LogService },
    { type: LionService }
];
ConfirmComponent.propDecorators = {
    message: [{ type: Input }],
    warning: [{ type: Input }],
    title: [{ type: Input }],
    chosen: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ConfirmComponent.prototype.lionFn;
    /** @type {?} */
    ConfirmComponent.prototype.message;
    /** @type {?} */
    ConfirmComponent.prototype.warning;
    /** @type {?} */
    ConfirmComponent.prototype.title;
    /** @type {?} */
    ConfirmComponent.prototype.chosen;
    /** @type {?} */
    ConfirmComponent.prototype.log;
    /** @type {?} */
    ConfirmComponent.prototype.lion;
}
//# sourceMappingURL=data:application/json;base64,