/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
import * as i3 from "@angular/common/http";
/**
 * @record
 */
export function UiView() { }
if (false) {
    /** @type {?} */
    UiView.prototype.id;
    /** @type {?} */
    UiView.prototype.icon;
    /** @type {?} */
    UiView.prototype.cat;
    /** @type {?} */
    UiView.prototype.label;
}
/**
 * ONOS GUI -- Navigation Service
 */
export class NavService {
    /**
     * @param {?} _fn_
     * @param {?} log
     * @param {?} httpClient
     */
    constructor(_fn_, log, httpClient) {
        this._fn_ = _fn_;
        this.log = log;
        this.httpClient = httpClient;
        this.showNav = false;
        this.uiPlatformViews = new Array();
        this.uiNetworkViews = new Array();
        this.uiOtherViews = new Array();
        this.uiHiddenViews = new Array();
        this.log.debug('NavService constructed');
    }
    /**
     * @return {?}
     */
    hideNav() {
        this.showNav = false;
        this.log.debug('Hiding Nav menu');
    }
    /**
     * @return {?}
     */
    toggleNav() {
        this.showNav = !this.showNav;
        if (this.showNav) {
            this.log.debug('Showing Nav menu');
        }
        else {
            this.log.debug('Hiding Nav menu');
        }
    }
    /**
     * @return {?}
     */
    getUiViews() {
        this.uiPlatformViews = new Array();
        this.uiNetworkViews = new Array();
        this.uiOtherViews = new Array();
        this.uiHiddenViews = new Array();
        this.httpClient.get('rs/nav/uiextensions').subscribe((v) => {
            v.forEach((uiView) => {
                if (uiView.cat === 'PLATFORM') {
                    this.uiPlatformViews.push(uiView);
                }
                else if (uiView.cat === 'NETWORK') {
                    if (uiView.id !== 'topo') {
                        this.uiNetworkViews.push(uiView);
                    }
                    else {
                        this.uiNetworkViews.push((/** @type {?} */ ({
                            id: 'topo2',
                            icon: 'nav_topo',
                            cat: 'NETWORK',
                            label: uiView.label
                        })));
                    }
                }
                else if (uiView.cat === 'HIDDEN') {
                    this.uiHiddenViews.push(uiView);
                }
                else {
                    this.uiOtherViews.push(uiView);
                }
            });
        });
    }
}
NavService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
NavService.ctorParameters = () => [
    { type: FnService },
    { type: LogService },
    { type: HttpClient }
];
/** @nocollapse */ NavService.ngInjectableDef = i0.defineInjectable({ factory: function NavService_Factory() { return new NavService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.HttpClient)); }, token: NavService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NavService.prototype.showNav;
    /** @type {?} */
    NavService.prototype.uiPlatformViews;
    /** @type {?} */
    NavService.prototype.uiNetworkViews;
    /** @type {?} */
    NavService.prototype.uiOtherViews;
    /** @type {?} */
    NavService.prototype.uiHiddenViews;
    /** @type {?} */
    NavService.prototype._fn_;
    /** @type {?} */
    NavService.prototype.log;
    /** @type {?} */
    NavService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9uYXYvbmF2LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWVBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7O0FBRTVDLDRCQUtDOzs7SUFKRyxvQkFBVzs7SUFDWCxzQkFBYTs7SUFDYixxQkFBWTs7SUFDWix1QkFBYzs7Ozs7QUFTbEIsTUFBTSxPQUFPLFVBQVU7Ozs7OztJQVFuQixZQUNZLElBQWUsRUFDZixHQUFlLEVBQ2YsVUFBc0I7UUFGdEIsU0FBSSxHQUFKLElBQUksQ0FBVztRQUNmLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBVjNCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFFdkIsb0JBQWUsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQ3RDLG1CQUFjLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUNyQyxpQkFBWSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDbkMsa0JBQWEsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBT2hDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDN0MsQ0FBQzs7OztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCxTQUFTO1FBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7Ozs7SUFFRCxVQUFVO1FBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBVyxFQUFFLEVBQUU7WUFDakUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO2dCQUN6QixJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssVUFBVSxFQUFFO29CQUMzQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDckM7cUJBQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtvQkFDakMsSUFBSyxNQUFNLENBQUMsRUFBRSxLQUFLLE1BQU0sRUFBRTt3QkFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7cUJBQ3BDO3lCQUFNO3dCQUNILElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG1CQUFROzRCQUM3QixFQUFFLEVBQUUsT0FBTzs0QkFDWCxJQUFJLEVBQUUsVUFBVTs0QkFDaEIsR0FBRyxFQUFFLFNBQVM7NEJBQ2QsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO3lCQUN0QixFQUFBLENBQUMsQ0FBQztxQkFDTjtpQkFDSjtxQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFO29CQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbkM7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2xDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQTVESixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFmUSxTQUFTO1lBQ1QsVUFBVTtZQUZWLFVBQVU7Ozs7O0lBa0JmLDZCQUF1Qjs7SUFFdkIscUNBQXNDOztJQUN0QyxvQ0FBcUM7O0lBQ3JDLGtDQUFtQzs7SUFDbkMsbUNBQW9DOztJQUdoQywwQkFBdUI7O0lBQ3ZCLHlCQUF1Qjs7SUFDdkIsZ0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBGblNlcnZpY2UgfSBmcm9tICcuLi91dGlsL2ZuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2xvZy5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBVaVZpZXcge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIGNhdDogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG59XG5cbi8qKlxuICogT05PUyBHVUkgLS0gTmF2aWdhdGlvbiBTZXJ2aWNlXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOYXZTZXJ2aWNlIHtcbiAgICBwdWJsaWMgc2hvd05hdiA9IGZhbHNlO1xuXG4gICAgdWlQbGF0Zm9ybVZpZXdzID0gbmV3IEFycmF5PFVpVmlldz4oKTtcbiAgICB1aU5ldHdvcmtWaWV3cyA9IG5ldyBBcnJheTxVaVZpZXc+KCk7XG4gICAgdWlPdGhlclZpZXdzID0gbmV3IEFycmF5PFVpVmlldz4oKTtcbiAgICB1aUhpZGRlblZpZXdzID0gbmV3IEFycmF5PFVpVmlldz4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9mbl86IEZuU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2c6IExvZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudFxuICAgICkge1xuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnTmF2U2VydmljZSBjb25zdHJ1Y3RlZCcpO1xuICAgIH1cblxuICAgIGhpZGVOYXYoKSB7XG4gICAgICAgIHRoaXMuc2hvd05hdiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnSGlkaW5nIE5hdiBtZW51Jyk7XG4gICAgfVxuXG4gICAgdG9nZ2xlTmF2KCkge1xuICAgICAgICB0aGlzLnNob3dOYXYgPSAhdGhpcy5zaG93TmF2O1xuICAgICAgICBpZiAodGhpcy5zaG93TmF2KSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnU2hvd2luZyBOYXYgbWVudScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0hpZGluZyBOYXYgbWVudScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VWlWaWV3cygpIHtcbiAgICAgICAgdGhpcy51aVBsYXRmb3JtVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuICAgICAgICB0aGlzLnVpTmV0d29ya1ZpZXdzID0gbmV3IEFycmF5PFVpVmlldz4oKTtcbiAgICAgICAgdGhpcy51aU90aGVyVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuICAgICAgICB0aGlzLnVpSGlkZGVuVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQuZ2V0KCdycy9uYXYvdWlleHRlbnNpb25zJykuc3Vic2NyaWJlKCh2OiBVaVZpZXdbXSkgPT4ge1xuICAgICAgICAgICAgdi5mb3JFYWNoKCh1aVZpZXc6IFVpVmlldykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1aVZpZXcuY2F0ID09PSAnUExBVEZPUk0nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWlQbGF0Zm9ybVZpZXdzLnB1c2godWlWaWV3KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVpVmlldy5jYXQgPT09ICdORVRXT1JLJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHVpVmlldy5pZCAhPT0gJ3RvcG8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpTmV0d29ya1ZpZXdzLnB1c2godWlWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWlOZXR3b3JrVmlld3MucHVzaCg8VWlWaWV3PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3RvcG8yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnbmF2X3RvcG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdDogJ05FVFdPUksnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB1aVZpZXcubGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1aVZpZXcuY2F0ID09PSAnSElEREVOJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVpSGlkZGVuVmlld3MucHVzaCh1aVZpZXcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWlPdGhlclZpZXdzLnB1c2godWlWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iXX0=