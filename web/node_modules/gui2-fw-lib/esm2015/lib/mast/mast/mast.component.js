/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Inject, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { LionService } from '../../util/lion.service';
import { LogService } from '../../log.service';
import { NavService } from '../../nav/nav.service';
import { WebSocketService } from '../../remote/websocket.service';
/**
 * ONOS GUI -- Masthead Component
 */
export class MastComponent {
    /**
     * @param {?} lion
     * @param {?} log
     * @param {?} ns
     * @param {?} wss
     * @param {?} router
     * @param {?} zone
     * @param {?} window
     */
    constructor(lion, log, ns, wss, router, zone, window) {
        this.lion = lion;
        this.log = log;
        this.ns = ns;
        this.wss = wss;
        this.router = router;
        this.zone = zone;
        this.window = window;
        // Function
        this.viewMap = new Map([]); // A map of app names
        // A map of app names
        this.confirmMessage = '';
        this.strongWarning = '';
        this.viewMap.set('apps', 'https://wiki.onosproject.org/display/ONOS/GUI+Application+View');
        this.viewMap.set('device', 'https://wiki.onosproject.org/display/ONOS/GUI+Device+View');
        this.viewMap.set('', 'https://wiki.onosproject.org/display/ONOS/The+ONOS+Web+GUI');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.lion.ubercache.length === 0) {
            this.lionFn = this.dummyLion;
            this.lion.loadCbs.set('mast', () => this.doLion());
            this.log.debug('LION not available when MastComponent initialized');
        }
        else {
            this.doLion();
        }
        this.wss.bindHandlers(new Map([
            ['guiRemoved', (data) => this.triggerRefresh(data, false)],
            ['guiAdded', (data) => this.triggerRefresh(data, true)]
        ]));
        this.log.debug('MastComponent initialized');
    }
    /**
     * Nav component should never be closed, but in case it does, it's
     * safer to tidy up after itself
     * @return {?}
     */
    ngOnDestroy() {
        this.lion.loadCbs.delete('mast');
    }
    /**
     * Read the LION bundle for App and set up the lionFn
     * @return {?}
     */
    doLion() {
        this.lionFn = this.lion.bundle('core.fw.Mast');
        if (this.username === undefined) {
            this.username = this.lionFn('unknown_user');
        }
    }
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    dummyLion(key) {
        return '%' + key + '%';
    }
    /**
     * @return {?}
     */
    directTo() {
        /** @type {?} */
        const curId = this.window.location.pathname.replace('/', '');
        /** @type {?} */
        let helpUrl = this.viewMap.get(curId);
        if (helpUrl === undefined) {
            helpUrl = this.viewMap.get('');
            this.log.warn('No help file linked for view:', curId);
        }
        this.window.open(helpUrl);
    }
    /**
     * @param {?} data
     * @param {?} added
     * @return {?}
     */
    triggerRefresh(data, added) {
        this.confirmMessage = this.lionFn(added ? 'uicomp_added' : 'uicomp_removed');
        this.log.debug('Refresh has been triggered - item', added ? 'added' : 'removed', ' - ', data);
    }
    /**
     * Callback when the Confirm dialog is shown and a choice is made
     * @param {?} choice
     * @return {?}
     */
    dOk(choice) {
        if (choice) {
            this.ns.getUiViews();
            this.router.navigate(['/']);
            this.zone.runOutsideAngular(() => {
                location.reload();
            });
            this.log.debug('Refresh confirmed'); // Will not be printed if page reloads
        }
        else {
            this.log.debug('Refresh cancelled');
        }
        this.confirmMessage = '';
        this.strongWarning = '';
    }
}
MastComponent.decorators = [
    { type: Component, args: [{
                selector: 'onos-mast',
                template: `<!--
~ Copyright 2018-present Open Networking Foundation
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~     http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<div id="mast-top-block"></div>
<!-- The mast-top-block is an inline display element that pushes any
  subsequent elements down the page. It has a height of 48px
     The mast block overlays the mast-top-block. It is is positioned
     absolutely so that the nav component can slide in behind it when
     not shown -->
<div id="mast" align="left">
    <span class="nav-menu-button clickable" (click)="ns.toggleNav()">
        <img src="data/img/nav-menu-mojo.png"/>
    </span>
    <img class="logo" src="data/img/masthead-logo-mojo.png">
    <onos-confirm title="{{ lionFn('ui_ok_to_update') }}" message="{{ confirmMessage }}" warning="{{ strongWarning }}" (chosen)="dOk($event)"></onos-confirm>
    <div id="mast-right">
        <nav>
            <div class="dropdown-parent">
                <a class="clickable user-menu__name">{{ username }} <i class="dropdown-icon"></i></a>
                <div class="dropdown">
                    <a href="rs/logout"> {{ lionFn('logout') }} </a>
                </div>
            </div>
            <div class="ctrl-btns">
                <div class="active clickable icon" (click)="directTo()">
                    <onos-icon iconId="query" iconSize="32" toolTip="{{ lionFn('tt_help') }}"></onos-icon>
                </div>
            </div>
        </nav>

    </div>
</div>
`,
                styles: [`#mast-top-block{display:block;z-index:-1;height:48px;width:100%}#mast{position:absolute;width:100%;top:0;height:48px;padding:0;z-index:10000}#mast a:hover{text-decoration:none}html[data-platform=iPad] #mast{padding-top:16px}#mast .nav-menu-button{display:inline-block;vertical-align:middle;text-align:center;line-height:48px;padding:0 12px;cursor:pointer;cursor:hand;font-size:0}#mast .nav-menu-button img{width:25px;vertical-align:middle}#mast .logo{height:47px;width:511px;vertical-align:bottom}#mast-right{display:inline-block;float:right;position:relative;top:0;padding-right:15px;line-height:48px}#mast-right div.ctrl-btns{float:right}#mast-right div.icon{box-sizing:border-box;position:relative;height:48px;width:48px;padding:9px}#mast .dropdown-parent{position:relative;float:right}#mast .dropdown-parent i.dropdown-icon{display:inline-block;height:7px;width:9px;margin-left:10px;background:url(data/img/dropdown-icon.png) no-repeat}#mast .dropdown{position:absolute;top:40px;right:-8px;display:none;min-width:100px;line-height:16px;font-size:12pt;z-index:1000}#mast .dropdown a{text-decoration:none;font-size:12px;display:block;padding:8px 16px 6px 12px}#mast .dropdown-parent:hover .dropdown{display:block}#mast .dropdown-parent:hover i.dropdown-icon{background-position-x:-14px}html[data-platform=iPad] #mast .dropdown{top:57px}`, `#mast{background-color:#231f20}#mast .nav-menu-button:hover{background-color:#888}#mast nav,#mast-right a{color:#009fdb}#mast .dropdown{background-color:#231f20;border:1px solid #ddd}#mast .dropdown a{color:#009fdb;border-bottom:1px solid #444}#mast .dropdown a:hover{color:#fff}`]
            },] },
];
/** @nocollapse */
MastComponent.ctorParameters = () => [
    { type: LionService },
    { type: LogService },
    { type: NavService },
    { type: WebSocketService },
    { type: Router },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
];
MastComponent.propDecorators = {
    username: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MastComponent.prototype.username;
    /** @type {?} */
    MastComponent.prototype.lionFn;
    /** @type {?} */
    MastComponent.prototype.viewMap;
    /** @type {?} */
    MastComponent.prototype.confirmMessage;
    /** @type {?} */
    MastComponent.prototype.strongWarning;
    /** @type {?} */
    MastComponent.prototype.lion;
    /** @type {?} */
    MastComponent.prototype.log;
    /** @type {?} */
    MastComponent.prototype.ns;
    /** @type {?} */
    MastComponent.prototype.wss;
    /** @type {?} */
    MastComponent.prototype.router;
    /** @type {?} */
    MastComponent.prototype.zone;
    /** @type {?} */
    MastComponent.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,