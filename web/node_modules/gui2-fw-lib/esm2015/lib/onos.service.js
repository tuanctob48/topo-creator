/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { LogService } from './log.service';
import * as i0 from "@angular/core";
import * as i1 from "./log.service";
/**
 * A structure of View elements for the OnosService
 * @record
 */
export function View() { }
if (false) {
    /** @type {?} */
    View.prototype.id;
    /** @type {?} */
    View.prototype.path;
}
/**
 * ONOS GUI -- OnosService - a placeholder for the global onos variable
 */
export class OnosService {
    /**
     * @param {?} log
     */
    constructor(log) {
        this.log = log;
        //        this.log.debug('OnosService constructed');
    }
}
OnosService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
OnosService.ctorParameters = () => [
    { type: LogService }
];
/** @nocollapse */ OnosService.ngInjectableDef = i0.defineInjectable({ factory: function OnosService_Factory() { return new OnosService(i0.inject(i1.LogService)); }, token: OnosService, providedIn: "root" });
if (false) {
    /** @type {?} */
    OnosService.prototype.browser;
    /** @type {?} */
    OnosService.prototype.mobile;
    /** @type {?} */
    OnosService.prototype.viewMap;
    /** @type {?} */
    OnosService.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25vcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvb25vcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7QUFLM0MsMEJBR0M7OztJQUZHLGtCQUFXOztJQUNYLG9CQUFhOzs7OztBQVNqQixNQUFNLE9BQU8sV0FBVzs7OztJQU1wQixZQUNZLEdBQWU7UUFBZixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBRS9CLG9EQUFvRDtJQUNoRCxDQUFDOzs7WUFiSixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFmUSxVQUFVOzs7OztJQWtCZiw4QkFBdUI7O0lBQ3ZCLDZCQUF1Qjs7SUFDdkIsOEJBQXVCOztJQUduQiwwQkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4vbG9nLnNlcnZpY2UnO1xuXG4vKipcbiAqIEEgc3RydWN0dXJlIG9mIFZpZXcgZWxlbWVudHMgZm9yIHRoZSBPbm9zU2VydmljZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZpZXcge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcGF0aDogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9OT1MgR1VJIC0tIE9ub3NTZXJ2aWNlIC0gYSBwbGFjZWhvbGRlciBmb3IgdGhlIGdsb2JhbCBvbm9zIHZhcmlhYmxlXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBPbm9zU2VydmljZSB7XG4gICAgLy8gR2xvYmFsIHZhcmlhYmxlXG4gICAgcHVibGljIGJyb3dzZXI6IHN0cmluZztcbiAgICBwdWJsaWMgbW9iaWxlOiBib29sZWFuO1xuICAgIHB1YmxpYyB2aWV3TWFwOiBWaWV3W107XG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIHByaXZhdGUgbG9nOiBMb2dTZXJ2aWNlXG4gICAgKSB7XG4vLyAgICAgICAgdGhpcy5sb2cuZGVidWcoJ09ub3NTZXJ2aWNlIGNvbnN0cnVjdGVkJyk7XG4gICAgfVxufVxuIl19