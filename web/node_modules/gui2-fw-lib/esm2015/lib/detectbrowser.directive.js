/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject } from '@angular/core';
import { Directive } from '@angular/core';
import { FnService } from './util/fn.service';
import { LogService } from './log.service';
import { OnosService } from './onos.service';
/**
 * ONOS GUI -- Detect Browser Directive
 */
export class DetectBrowserDirective {
    /**
     * @param {?} fs
     * @param {?} log
     * @param {?} onos
     * @param {?} w
     */
    constructor(fs, log, onos, w) {
        this.fs = fs;
        this.log = log;
        this.onos = onos;
        this.w = w;
        /** @type {?} */
        const body = document.getElementsByTagName('body')[0];
        //        let body = d3.select('body');
        /** @type {?} */
        let browser = '';
        if (fs.isChrome()) {
            browser = 'chrome';
        }
        else if (fs.isChromeHeadless()) {
            browser = 'chromeheadless';
        }
        else if (fs.isSafari()) {
            browser = 'safari';
        }
        else if (fs.isFirefox()) {
            browser = 'firefox';
        }
        else {
            this.log.warn('Unknown browser. ', 'Vendor:', this.w.navigator.vendor, 'Agent:', this.w.navigator.userAgent);
            return;
        }
        body.classList.add(browser);
        //        body.classed(browser, true);
        this.onos.browser = browser;
        if (fs.isMobile()) {
            body.classList.add('mobile');
            this.onos.mobile = true;
        }
        //        this.log.debug('Detected browser is', fs.cap(browser));
    }
}
DetectBrowserDirective.decorators = [
    { type: Directive, args: [{
                selector: '[onosDetectBrowser]'
            },] },
];
/** @nocollapse */
DetectBrowserDirective.ctorParameters = () => [
    { type: FnService },
    { type: LogService },
    { type: OnosService },
    { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
];
if (false) {
    /** @type {?} */
    DetectBrowserDirective.prototype.fs;
    /** @type {?} */
    DetectBrowserDirective.prototype.log;
    /** @type {?} */
    DetectBrowserDirective.prototype.onos;
    /** @type {?} */
    DetectBrowserDirective.prototype.w;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0ZWN0YnJvd3Nlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9kZXRlY3Ricm93c2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVE3QyxNQUFNLE9BQU8sc0JBQXNCOzs7Ozs7O0lBQ2pDLFlBQ1UsRUFBYSxFQUNiLEdBQWUsRUFDZixJQUFpQixFQUdDLENBQU07UUFMeEIsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQUNiLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFhO1FBR0MsTUFBQyxHQUFELENBQUMsQ0FBSzs7Y0FFdEIsSUFBSSxHQUFvQixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7WUFFbEUsT0FBTyxHQUFHLEVBQUU7UUFDaEIsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDZixPQUFPLEdBQUcsUUFBUSxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUM5QixPQUFPLEdBQUcsZ0JBQWdCLENBQUM7U0FDOUI7YUFBTSxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN0QixPQUFPLEdBQUcsUUFBUSxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDdkIsT0FBTyxHQUFHLFNBQVMsQ0FBQztTQUN2QjthQUFNO1lBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQ2pDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQ2xDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN0QyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxzQ0FBc0M7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRTVCLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQzNCO1FBRVQsaUVBQWlFO0lBQzdELENBQUM7OztZQXZDSixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjthQUNoQzs7OztZQVRRLFNBQVM7WUFDVCxVQUFVO1lBQ1YsV0FBVzs0Q0FlZixNQUFNLFNBQUMsUUFBUTs7OztJQUxoQixvQ0FBcUI7O0lBQ3JCLHFDQUF1Qjs7SUFDdkIsc0NBQXlCOztJQUd6QixtQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZuU2VydmljZSB9IGZyb20gJy4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IE9ub3NTZXJ2aWNlIH0gZnJvbSAnLi9vbm9zLnNlcnZpY2UnO1xuXG4vKipcbiAqIE9OT1MgR1VJIC0tIERldGVjdCBCcm93c2VyIERpcmVjdGl2ZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbb25vc0RldGVjdEJyb3dzZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBEZXRlY3RCcm93c2VyRGlyZWN0aXZlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBmczogRm5TZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9nOiBMb2dTZXJ2aWNlLFxuICAgIHByaXZhdGUgb25vczogT25vc1NlcnZpY2UsXG5cbiAgICAvLyBUT0RPOiBDaGFuZ2UgdGhlIGFueSB0eXBlIHRvIFdpbmRvdyB3aGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE1NjQwIGlzIGZpeGVkLlxuICAgIEBJbmplY3QoJ1dpbmRvdycpIHByaXZhdGUgdzogYW55XG4gICkge1xuICAgICAgICBjb25zdCBib2R5OiBIVE1MQm9keUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuLy8gICAgICAgIGxldCBib2R5ID0gZDMuc2VsZWN0KCdib2R5Jyk7XG4gICAgICAgIGxldCBicm93c2VyID0gJyc7XG4gICAgICAgIGlmIChmcy5pc0Nocm9tZSgpKSB7XG4gICAgICAgICAgICBicm93c2VyID0gJ2Nocm9tZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoZnMuaXNDaHJvbWVIZWFkbGVzcygpKSB7XG4gICAgICAgICAgICBicm93c2VyID0gJ2Nocm9tZWhlYWRsZXNzJztcbiAgICAgICAgfSBlbHNlIGlmIChmcy5pc1NhZmFyaSgpKSB7XG4gICAgICAgICAgICBicm93c2VyID0gJ3NhZmFyaSc7XG4gICAgICAgIH0gZWxzZSBpZiAoZnMuaXNGaXJlZm94KCkpIHtcbiAgICAgICAgICAgIGJyb3dzZXIgPSAnZmlyZWZveCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZy53YXJuKCdVbmtub3duIGJyb3dzZXIuICcsXG4gICAgICAgICAgICAnVmVuZG9yOicsIHRoaXMudy5uYXZpZ2F0b3IudmVuZG9yLFxuICAgICAgICAgICAgJ0FnZW50OicsIHRoaXMudy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBib2R5LmNsYXNzTGlzdC5hZGQoYnJvd3Nlcik7XG4vLyAgICAgICAgYm9keS5jbGFzc2VkKGJyb3dzZXIsIHRydWUpO1xuICAgICAgICB0aGlzLm9ub3MuYnJvd3NlciA9IGJyb3dzZXI7XG5cbiAgICAgICAgaWYgKGZzLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZCgnbW9iaWxlJyk7XG4gICAgICAgICAgICB0aGlzLm9ub3MubW9iaWxlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4vLyAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0RldGVjdGVkIGJyb3dzZXIgaXMnLCBmcy5jYXAoYnJvd3NlcikpO1xuICAgIH1cbn1cbiJdfQ==