/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as d3 from 'd3';
import { LogService } from '../log.service';
import { FnService } from '../util/fn.service';
import { LionService } from './lion.service';
import { NavService } from '../nav/nav.service';
import * as i0 from "@angular/core";
import * as i1 from "../log.service";
import * as i2 from "./fn.service";
import * as i3 from "./lion.service";
import * as i4 from "../nav/nav.service";
/**
 * @record
 */
export function KeyHandler() { }
if (false) {
    /** @type {?} */
    KeyHandler.prototype.globalKeys;
    /** @type {?} */
    KeyHandler.prototype.maskedKeys;
    /** @type {?} */
    KeyHandler.prototype.dialogKeys;
    /** @type {?} */
    KeyHandler.prototype.viewKeys;
    /** @type {?} */
    KeyHandler.prototype.viewFn;
    /** @type {?} */
    KeyHandler.prototype.viewGestures;
}
/** @enum {string} */
const KeysToken = {
    KEYEV: 'keyev',
};
export { KeysToken };
/**
 * ONOS GUI -- Keys Service Module.
 */
export class KeysService {
    /**
     * @param {?} log
     * @param {?} fs
     * @param {?} ls
     * @param {?} ns
     */
    constructor(log, fs, ls, ns) {
        this.log = log;
        this.fs = fs;
        this.ls = ls;
        this.ns = ns;
        this.enabled = true;
        this.globalEnabled = true;
        this.keyHandler = (/** @type {?} */ ({
            globalKeys: {},
            maskedKeys: {},
            dialogKeys: {},
            viewKeys: {},
            viewFn: null,
            viewGestures: [],
        }));
        this.seq = {};
        this.matching = false;
        this.matched = '';
        this.textFieldDoesNotBlock = {
            enter: 1,
            esc: 1,
        };
        this.quickHelpShown = false;
        this.log.debug('KeyService constructed');
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    installOn(elem) {
        this.log.debug('Installing keys handler');
        elem.on('keydown', () => { this.keyIn(); });
        this.setupGlobalKeys();
    }
    /**
     * @param {?} x
     * @return {?}
     */
    keyBindings(x) {
        if (x === undefined) {
            return this.getKeyBindings();
        }
        else {
            this.setKeyBindings(x);
        }
    }
    /**
     * @return {?}
     */
    unbindKeys() {
        this.keyHandler.viewKeys = {};
        this.keyHandler.viewFn = null;
        this.keyHandler.viewGestures = [];
    }
    /**
     * @param {?} x
     * @return {?}
     */
    dialogKeys(x) {
        if (x === undefined) {
            this.unbindDialogKeys();
        }
        else {
            this.bindDialogKeys(x);
        }
    }
    /**
     * @param {?} word
     * @param {?} data
     * @return {?}
     */
    addSeq(word, data) {
        this.fs.addToTrie(this.seq, word, data);
    }
    /**
     * @param {?} word
     * @return {?}
     */
    remSeq(word) {
        this.fs.removeFromTrie(this.seq, word);
    }
    /**
     * @param {?=} g
     * @return {?}
     */
    gestureNotes(g) {
        if (g === undefined) {
            return this.keyHandler.viewGestures;
        }
        else {
            this.keyHandler.viewGestures = this.fs.isA(g) || [];
        }
    }
    /**
     * @param {?} b
     * @return {?}
     */
    enableKeys(b) {
        this.enabled = b;
    }
    /**
     * @param {?} b
     * @return {?}
     */
    enableGlobalKeys(b) {
        this.globalEnabled = b;
    }
    /**
     * @param {?} o
     * @return {?}
     */
    checkNotGlobal(o) {
        /** @type {?} */
        const oops = [];
        if (this.fs.isO(o)) {
            o.forEach((val, key) => {
                if (this.keyHandler.globalKeys[key]) {
                    oops.push(key);
                }
            });
            if (oops.length) {
                this.log.warn('Ignoring reserved global key(s):', oops.join(','));
                oops.forEach((key) => {
                    delete o[key];
                });
            }
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    matchSeq(key) {
        if (!this.matching && key === 'shift-shift') {
            this.matching = true;
            return true;
        }
        if (this.matching) {
            this.matched += key;
            this.lookup = this.fs.trieLookup(this.seq, this.matched);
            if (this.lookup === -1) {
                return true;
            }
            this.matching = false;
            this.matched = '';
            if (!this.lookup) {
                return;
            }
            // ee.cluck(lookup);
            return true;
        }
    }
    /**
     * @param {?} code
     * @return {?}
     */
    whatKey(code) {
        switch (code) {
            case 8: return 'delete';
            case 9: return 'tab';
            case 13: return 'enter';
            case 16: return 'shift';
            case 27: return 'esc';
            case 32: return 'space';
            case 37: return 'leftArrow';
            case 38: return 'upArrow';
            case 39: return 'rightArrow';
            case 40: return 'downArrow';
            case 186: return 'semicolon';
            case 187: return 'equals';
            case 188: return 'comma';
            case 189: return 'dash';
            case 190: return 'dot';
            case 191: return 'slash';
            case 192: return 'backQuote';
            case 219: return 'openBracket';
            case 220: return 'backSlash';
            case 221: return 'closeBracket';
            case 222: return 'quote';
            default:
                if ((code >= 48 && code <= 57) ||
                    (code >= 65 && code <= 90)) {
                    return String.fromCharCode(code);
                }
                else if (code >= 112 && code <= 123) {
                    return 'F' + (code - 111);
                }
                return null;
        }
    }
    /**
     * @return {?}
     */
    textFieldInput() {
        /** @type {?} */
        const t = d3.event.target.tagName.toLowerCase();
        return t === 'input' || t === 'textarea';
    }
    /**
     * @return {?}
     */
    keyIn() {
        /** @type {?} */
        const event = d3.event;
        // d3.events can set the keyCode, but unit tests based on KeyboardEvent
        // cannot set keyCode since the attribute has been deprecated
        /** @type {?} */
        const code = event.keyCode ? event.keyCode : event.code;
        /** @type {?} */
        let key = this.whatKey(Number.parseInt(code));
        this.log.debug('Key detected', event, key, event.code, event.keyCode);
        /** @type {?} */
        const textBlockable = !this.textFieldDoesNotBlock[key];
        /** @type {?} */
        const modifiers = [];
        if (event.metaKey) {
            modifiers.push('cmd');
        }
        if (event.altKey) {
            modifiers.push('alt');
        }
        if (event.shiftKey) {
            modifiers.push('shift');
        }
        if (!key) {
            return;
        }
        modifiers.push(key);
        key = modifiers.join('-');
        if (textBlockable && this.textFieldInput()) {
            return;
        }
        /** @type {?} */
        const kh = this.keyHandler;
        /** @type {?} */
        const gk = kh.globalKeys[key];
        /** @type {?} */
        const gcb = this.fs.isF(gk) || (this.fs.isA(gk) && this.fs.isF(gk[0]));
        /** @type {?} */
        const dk = kh.dialogKeys[key];
        /** @type {?} */
        const dcb = this.fs.isF(dk);
        /** @type {?} */
        const vk = kh.viewKeys[key];
        /** @type {?} */
        const kl = this.fs.isF(kh.viewKeys._keyListener);
        /** @type {?} */
        const vcb = this.fs.isF(vk) || (this.fs.isA(vk) && this.fs.isF(vk[0])) || this.fs.isF(kh.viewFn);
        /** @type {?} */
        const token = KeysToken.KEYEV;
        event.stopPropagation();
        if (this.enabled) {
            if (this.matchSeq(key)) {
                return;
            }
            // global callback?
            if (gcb && gcb(token, key, code, event)) {
                // if the event was 'handled', we are done
                return;
            }
            // dialog callback?
            if (dcb) {
                dcb(token, key, code, event);
                // assume dialog handled the event
                return;
            }
            // otherwise, let the view callback have a shot
            if (vcb) {
                this.log.debug('Letting view callback have a shot', vcb, token, key, code, event);
                vcb(token, key, code, event);
            }
            if (kl) {
                kl(key);
            }
        }
    }
    // functions to obtain localized strings deferred from the setup of the
    //  global key data structures.
    /**
     * @return {?}
     */
    qhlion() {
        return this.ls.bundle('core.fw.QuickHelp');
    }
    /**
     * @return {?}
     */
    qhlionShowHide() {
        return this.qhlion()('qh_hint_show_hide_qh');
    }
    /**
     * @return {?}
     */
    qhlionHintEsc() {
        return this.qhlion()('qh_hint_esc');
    }
    /**
     * @return {?}
     */
    qhlionHintT() {
        return this.qhlion()('qh_hint_t');
    }
    /**
     * @return {?}
     */
    setupGlobalKeys() {
        Object.assign(this.keyHandler, {
            globalKeys: {
                backSlash: [(view, key, code, ev) => this.quickHelp(view, key, code, ev), this.qhlionShowHide],
                slash: [(view, key, code, ev) => this.quickHelp(view, key, code, ev), this.qhlionShowHide],
                esc: [(view, key, code, ev) => this.escapeKey(view, key, code, ev), this.qhlionHintEsc],
                T: [(view, key, code, ev) => this.toggleTheme(view, key, code, ev), this.qhlionHintT],
            },
            globalFormat: ['backSlash', 'slash', 'esc', 'T'],
            // Masked keys are global key handlers that always return true.
            // That is, the view will never see the event for that key.
            maskedKeys: {
                slash: 1,
                backSlash: 1,
                T: 1,
            },
        });
    }
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    quickHelp(view, key, code, ev) {
        if (!this.globalEnabled) {
            return false;
        }
        this.quickHelpShown = !this.quickHelpShown;
        return true;
    }
    // returns true if we 'consumed' the ESC keypress, false otherwise
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    escapeKey(view, key, code, ev) {
        this.quickHelpShown = false;
        return this.ns.hideNav();
    }
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    toggleTheme(view, key, code, ev) {
        if (!this.globalEnabled) {
            return false;
        }
        // ts.toggleTheme();
        return true;
    }
    /**
     * @param {?} map
     * @param {?} caller
     * @param {?} remove
     * @return {?}
     */
    filterMaskedKeys(map, caller, remove) {
        /** @type {?} */
        const masked = [];
        /** @type {?} */
        const msgs = [];
        d3.map(map).keys().forEach((key) => {
            if (this.keyHandler.maskedKeys[key]) {
                masked.push(key);
                msgs.push(caller, ': Key "' + key + '" is reserved');
            }
        });
        if (msgs.length) {
            this.log.warn(msgs.join('\n'));
        }
        if (remove) {
            masked.forEach((k) => {
                delete map[k];
            });
        }
        return masked;
    }
    /**
     * @param {?} fname
     * @param {?} x
     * @return {?}
     */
    unexParam(fname, x) {
        this.log.warn(fname, ': unexpected parameter-- ', x);
    }
    /**
     * @param {?} keyArg
     * @return {?}
     */
    setKeyBindings(keyArg) {
        /** @type {?} */
        const fname = 'setKeyBindings()';
        /** @type {?} */
        const kFunc = this.fs.isF(keyArg);
        /** @type {?} */
        const kMap = this.fs.isO(keyArg);
        if (kFunc) {
            // set general key handler callback
            this.keyHandler.viewFn = kFunc;
        }
        else if (kMap) {
            this.filterMaskedKeys(kMap, fname, true);
            this.keyHandler.viewKeys = kMap;
        }
        else {
            this.unexParam(fname, keyArg);
        }
    }
    /**
     * @return {?}
     */
    getKeyBindings() {
        /** @type {?} */
        const gkeys = d3.map(this.keyHandler.globalKeys).keys();
        /** @type {?} */
        const masked = d3.map(this.keyHandler.maskedKeys).keys();
        /** @type {?} */
        const vkeys = d3.map(this.keyHandler.viewKeys).keys();
        /** @type {?} */
        const vfn = !!this.fs.isF(this.keyHandler.viewFn);
        return {
            globalKeys: gkeys,
            maskedKeys: masked,
            viewKeys: vkeys,
            viewFunction: vfn,
        };
    }
    /**
     * @param {?} map
     * @return {?}
     */
    bindDialogKeys(map) {
        /** @type {?} */
        const fname = 'bindDialogKeys()';
        /** @type {?} */
        const kMap = this.fs.isO(map);
        if (kMap) {
            this.filterMaskedKeys(map, fname, true);
            this.keyHandler.dialogKeys = kMap;
        }
        else {
            this.unexParam(fname, map);
        }
    }
    /**
     * @return {?}
     */
    unbindDialogKeys() {
        this.keyHandler.dialogKeys = {};
    }
}
KeysService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
KeysService.ctorParameters = () => [
    { type: LogService },
    { type: FnService },
    { type: LionService },
    { type: NavService }
];
/** @nocollapse */ KeysService.ngInjectableDef = i0.defineInjectable({ factory: function KeysService_Factory() { return new KeysService(i0.inject(i1.LogService), i0.inject(i2.FnService), i0.inject(i3.LionService), i0.inject(i4.NavService)); }, token: KeysService, providedIn: "root" });
if (false) {
    /** @type {?} */
    KeysService.prototype.enabled;
    /** @type {?} */
    KeysService.prototype.globalEnabled;
    /** @type {?} */
    KeysService.prototype.keyHandler;
    /** @type {?} */
    KeysService.prototype.seq;
    /** @type {?} */
    KeysService.prototype.matching;
    /** @type {?} */
    KeysService.prototype.matched;
    /** @type {?} */
    KeysService.prototype.lookup;
    /** @type {?} */
    KeysService.prototype.textFieldDoesNotBlock;
    /** @type {?} */
    KeysService.prototype.quickHelpShown;
    /** @type {?} */
    KeysService.prototype.log;
    /** @type {?} */
    KeysService.prototype.fs;
    /** @type {?} */
    KeysService.prototype.ls;
    /** @type {?} */
    KeysService.prototype.ns;
}
//# sourceMappingURL=data:application/json;base64,