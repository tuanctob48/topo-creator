/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { LogService } from '../log.service';
import { Trie, TrieOp } from './trie';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../log.service";
/** @type {?} */
const matcher = /<\/?([a-zA-Z0-9]+)*(.*?)\/?>/igm;
/** @type {?} */
const whitelist = ['b', 'i', 'p', 'em', 'strong', 'br'];
/** @type {?} */
const evillist = ['script', 'style', 'iframe'];
/**
 * Used with the Window size function;
 *
 * @record
 */
export function WindowSize() { }
if (false) {
    /** @type {?} */
    WindowSize.prototype.width;
    /** @type {?} */
    WindowSize.prototype.height;
}
/**
 * For the sanitize() and analyze() functions
 * @record
 */
export function Match() { }
if (false) {
    /** @type {?} */
    Match.prototype.full;
    /** @type {?} */
    Match.prototype.name;
}
/**
 * ONOS GUI -- Util -- General Purpose Functions
 */
export class FnService {
    /**
     * @param {?} route
     * @param {?} log
     * @param {?} w
     */
    constructor(route, log, w) {
        this.route = route;
        this.log = log;
        this.w = w;
        // internal state
        this.debugFlags = new Map([
        //        [ "LoadingService", true ]
        ]);
        this.route.queryParams.subscribe(params => {
            /** @type {?} */
            const debugparam = params['debug'];
            //            log.debug('Param:', debugparam);
            this.parseDebugFlags(debugparam);
        });
        //        this.log.debug('FnService constructed');
    }
    /**
     * Test if an argument is a function
     *
     * Note: the need for this would go away if all functions
     * were strongly typed
     * @param {?} f
     * @return {?}
     */
    isF(f) {
        return typeof f === 'function' ? f : null;
    }
    /**
     * Test if an argument is an array
     *
     * Note: the need for this would go away if all arrays
     * were strongly typed
     * @param {?} a
     * @return {?}
     */
    isA(a) {
        // NOTE: Array.isArray() is part of EMCAScript 5.1
        return Array.isArray(a) ? a : null;
    }
    /**
     * Test if an argument is a string
     *
     * Note: the need for this would go away if all strings
     * were strongly typed
     * @param {?} s
     * @return {?}
     */
    isS(s) {
        return typeof s === 'string' ? s : null;
    }
    /**
     * Test if an argument is an object
     *
     * Note: the need for this would go away if all objects
     * were strongly typed
     * @param {?} o
     * @return {?}
     */
    isO(o) {
        return (o && typeof o === 'object' && o.constructor === Object) ? o : null;
    }
    /**
     * Test that an array contains an object
     * @param {?} a
     * @param {?} x
     * @return {?}
     */
    contains(a, x) {
        return this.isA(a) && a.indexOf(x) > -1;
    }
    /**
     * Returns width and height of window inner dimensions.
     * offH, offW : offset width/height are subtracted, if present
     * @param {?=} offH
     * @param {?=} offW
     * @return {?}
     */
    windowSize(offH = 0, offW = 0) {
        return {
            height: this.w.innerHeight - offH,
            width: this.w.innerWidth - offW
        };
    }
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise.
     * Also returns false if there are properties on the api that are NOT
     * listed in the array of names.
     *
     * This gets extra complicated when the api Object is an
     * Angular service - while the functions can be retrieved
     * by an indexed get, the ownProperties does not show the
     * functions of the class. We have to dive in to the prototypes
     * properties to get these - and even then we have to filter
     * out the constructor and any member variables
     * @param {?} api
     * @param {?} fnNames
     * @return {?}
     */
    areFunctions(api, fnNames) {
        /** @type {?} */
        const fnLookup = new Map();
        /** @type {?} */
        let extraFound = false;
        if (!this.isA(fnNames)) {
            return false;
        }
        /** @type {?} */
        const n = fnNames.length;
        /** @type {?} */
        let i;
        /** @type {?} */
        let name;
        for (i = 0; i < n; i++) {
            name = fnNames[i];
            if (!this.isF(api[name])) {
                return false;
            }
            fnLookup.set(name, true);
        }
        // check for properties on the API that are not listed in the array,
        /** @type {?} */
        const keys = Object.getOwnPropertyNames(api);
        if (keys.length === 0) {
            return true;
        }
        // If the api is a class it will have a name,
        //  else it will just be called 'Object'
        /** @type {?} */
        const apiObjectName = api.constructor.name;
        if (apiObjectName === 'Object') {
            Object.keys(api).forEach((key) => {
                if (!fnLookup.get(key)) {
                    extraFound = true;
                }
            });
        }
        else { // It is a class, so its functions will be in the child (prototype)
            // It is a class, so its functions will be in the child (prototype)
            /** @type {?} */
            const pObj = Object.getPrototypeOf(api);
            for (const key in Object.getOwnPropertyDescriptors(pObj)) {
                if (key === 'constructor') { // Filter out constructor
                    continue;
                }
                /** @type {?} */
                const value = Object.getOwnPropertyDescriptor(pObj, key);
                // Only compare functions. Look for any not given in the map
                if (this.isF(value.value) && !fnLookup.get(key)) {
                    extraFound = true;
                }
            }
        }
        return !extraFound;
    }
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise. This is a non-strict version
     * that does not care about other properties on the api.
     * @param {?} api
     * @param {?} fnNames
     * @return {?}
     */
    areFunctionsNonStrict(api, fnNames) {
        if (!this.isA(fnNames)) {
            return false;
        }
        /** @type {?} */
        const n = fnNames.length;
        /** @type {?} */
        let i;
        /** @type {?} */
        let name;
        for (i = 0; i < n; i++) {
            name = fnNames[i];
            if (!this.isF(api[name])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns true if current browser determined to be a mobile device
     * @return {?}
     */
    isMobile() {
        /** @type {?} */
        const ua = this.w.navigator.userAgent;
        /** @type {?} */
        const patt = /iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/;
        return patt.test(ua);
    }
    /**
     * Returns true if the current browser determined to be Chrome
     * @return {?}
     */
    isChrome() {
        /** @type {?} */
        const isChromium = ((/** @type {?} */ (this.w))).chrome;
        /** @type {?} */
        const vendorName = this.w.navigator.vendor;
        /** @type {?} */
        const isOpera = this.w.navigator.userAgent.indexOf('OPR') > -1;
        return (isChromium !== null &&
            isChromium !== undefined &&
            vendorName === 'Google Inc.' &&
            isOpera === false);
    }
    /**
     * @return {?}
     */
    isChromeHeadless() {
        /** @type {?} */
        const vendorName = this.w.navigator.vendor;
        /** @type {?} */
        const headlessChrome = this.w.navigator.userAgent.indexOf('HeadlessChrome') > -1;
        return (vendorName === 'Google Inc.' && headlessChrome === true);
    }
    /**
     * Returns true if the current browser determined to be Safari
     * @return {?}
     */
    isSafari() {
        return (this.w.navigator.userAgent.indexOf('Safari') !== -1 &&
            this.w.navigator.userAgent.indexOf('Chrome') === -1);
    }
    /**
     * Returns true if the current browser determined to be Firefox
     * @return {?}
     */
    isFirefox() {
        return typeof InstallTrigger !== 'undefined';
    }
    /**
     * search through an array of objects, looking for the one with the
     * tagged property matching the given key. tag defaults to 'id'.
     * returns the index of the matching object, or -1 for no match.
     * @param {?} key
     * @param {?} array
     * @param {?=} tag
     * @return {?}
     */
    find(key, array, tag = 'id') {
        /** @type {?} */
        let idx;
        /** @type {?} */
        const n = array.length;
        for (idx = 0; idx < n; idx++) {
            /** @type {?} */
            const d = array[idx];
            if (d[tag] === key) {
                return idx;
            }
        }
        return -1;
    }
    /**
     * search through array to find (the first occurrence of) item,
     * returning its index if found; otherwise returning -1.
     * @param {?} item
     * @param {?} array
     * @return {?}
     */
    inArray(item, array) {
        if (this.isA(array)) {
            for (let i = 0; i < array.length; i++) {
                if (array[i] === item) {
                    return i;
                }
            }
        }
        return -1;
    }
    /**
     * remove (the first occurrence of) the specified item from the given
     * array, if any. Return true if the removal was made; false otherwise.
     * @param {?} item
     * @param {?} array
     * @return {?}
     */
    removeFromArray(item, array) {
        /** @type {?} */
        const i = this.inArray(item, array);
        if (i >= 0) {
            array.splice(i, 1);
            return true;
        }
        return false;
    }
    /**
     * return true if the object is empty, return false otherwise
     * @param {?} obj
     * @return {?}
     */
    isEmptyObject(obj) {
        for (const key in obj) {
            if (true) {
                return false;
            }
        }
        return true;
    }
    /**
     * returns true if the two objects have all the same properties
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    sameObjProps(obj1, obj2) {
        for (const key in obj1) {
            if (obj1.hasOwnProperty(key)) {
                if (!(obj1[key] === obj2[key])) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * returns true if the array contains the object
     * does NOT use strict object reference equality,
     * instead checks each property individually for equality
     * @param {?} arr
     * @param {?} obj
     * @return {?}
     */
    containsObj(arr, obj) {
        /** @type {?} */
        const len = arr.length;
        for (let i = 0; i < len; i++) {
            if (this.sameObjProps(arr[i], obj)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Return the given string with the first character capitalized.
     * @param {?} s
     * @return {?}
     */
    cap(s) {
        return s ? s[0].toUpperCase() + s.slice(1).toLowerCase() : s;
    }
    /**
     * return the parameter without a px suffix
     * @param {?} num
     * @return {?}
     */
    noPx(num) {
        return Number(num.replace(/px$/, ''));
    }
    /**
     * return an element's given style property without px suffix
     * @param {?} elem
     * @param {?} prop
     * @return {?}
     */
    noPxStyle(elem, prop) {
        return Number(elem.style(prop).replace(/px$/, ''));
    }
    /**
     * Return true if a str ends with suffix
     * @param {?} str
     * @param {?} suffix
     * @return {?}
     */
    endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    /**
     * output debug message to console, if debug tag set...
     * e.g. fs.debug('mytag', arg1, arg2, ...)
     * @param {?} tag
     * @param {...?} args
     * @return {?}
     */
    debug(tag, ...args) {
        if (this.debugFlags.get(tag)) {
            //            this.log.debug(tag, args.join());
        }
    }
    /**
     * @param {?} dbgstr
     * @return {?}
     */
    parseDebugFlags(dbgstr) {
        /** @type {?} */
        const bits = dbgstr ? dbgstr.split(',') : [];
        bits.forEach((key) => {
            this.debugFlags.set(key, true);
        });
        //        this.log.debug('Debug flags:', dbgstr);
    }
    /**
     * Return true if the given debug flag was specified in the query params
     * @param {?} tag
     * @return {?}
     */
    debugOn(tag) {
        return this.debugFlags.get(tag);
    }
    // -----------------------------------------------------------------
    // The next section deals with sanitizing external strings destined
    // to be loaded via a .html() function call.
    //
    // See definition of matcher, evillist and whitelist at the top of this file
    /*
         * Returns true if the tag is in the evil list, (and is not an end-tag)
         */
    /**
     * @param {?} tag
     * @return {?}
     */
    inEvilList(tag) {
        return (evillist.indexOf(tag.name) !== -1 && tag.full.indexOf('/') === -1);
    }
    /*
         * Returns an array of Matches of matcher in html
         */
    /**
     * @param {?} html
     * @return {?}
     */
    analyze(html) {
        /** @type {?} */
        const matches = [];
        /** @type {?} */
        let match;
        // extract all tags
        while ((match = matcher.exec(html)) !== null) {
            matches.push({
                full: match[0],
                name: match[1],
            });
        }
        return matches;
    }
    /*
         * Returns a cleaned version of html
         */
    /**
     * @param {?} html
     * @return {?}
     */
    sanitize(html) {
        /** @type {?} */
        const matches = this.analyze(html);
        // completely obliterate evil tags and their contents...
        evillist.forEach((tag) => {
            /** @type {?} */
            const re = new RegExp('<' + tag + '(.*?)>(.*?[\r\n])*?(.*?)(.*?[\r\n])*?<\/' + tag + '>', 'gim');
            html = html.replace(re, '');
        });
        // filter out all but white-listed tags and end-tags
        matches.forEach((tag) => {
            if (whitelist.indexOf(tag.name) === -1) {
                html = html.replace(tag.full, '');
                if (this.inEvilList(tag)) {
                    this.log.warn('Unsanitary HTML input -- ' +
                        tag.full + ' detected!');
                }
            }
        });
        // TODO: consider encoding HTML entities, e.g. '&' -> '&amp;'
        return html;
    }
    /**
     * add word to trie (word will be converted to uppercase)
     * data associated with the word
     * returns 'added' or 'updated'
     * @param {?} trie
     * @param {?} word
     * @param {?} data
     * @return {?}
     */
    addToTrie(trie, word, data) {
        return new Trie(TrieOp.PLUS, trie, word, data);
    }
    /**
     * remove word from trie (word will be converted to uppercase)
     * returns 'removed' or 'absent'
     * @param {?} trie
     * @param {?} word
     * @return {?}
     */
    removeFromTrie(trie, word) {
        return new Trie(TrieOp.MINUS, trie, word);
    }
    /**
     * lookup word (converted to uppercase) in trie
     * returns:
     *    undefined if the word is not in the trie
     *    -1 for a partial match (word is a prefix to an existing word)
     *    data for the word for an exact match
     * @param {?} trie
     * @param {?} word
     * @return {?}
     */
    trieLookup(trie, word) {
        /** @type {?} */
        const s = word.toUpperCase().split('');
        /** @type {?} */
        let p = trie;
        /** @type {?} */
        let n;
        while (s.length) {
            n = s.shift();
            p = p[n];
            if (!p) {
                return undefined;
            }
        }
        if (p._data) {
            return p._data;
        }
        return -1;
    }
}
FnService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
FnService.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: LogService },
    { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
];
/** @nocollapse */ FnService.ngInjectableDef = i0.defineInjectable({ factory: function FnService_Factory() { return new FnService(i0.inject(i1.ActivatedRoute), i0.inject(i2.LogService), i0.inject("Window")); }, token: FnService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FnService.prototype.debugFlags;
    /** @type {?} */
    FnService.prototype.route;
    /** @type {?} */
    FnService.prototype.log;
    /** @type {?} */
    FnService.prototype.w;
}
//# sourceMappingURL=data:application/json;base64,