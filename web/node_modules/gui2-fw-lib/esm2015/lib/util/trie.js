/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @record
 */
export function TrieC() { }
if (false) {
    /** @type {?} */
    TrieC.prototype.p;
    /** @type {?} */
    TrieC.prototype.s;
}
/**
 * @record
 */
export function TrieT() { }
if (false) {
    /** @type {?} */
    TrieT.prototype.k;
    /** @type {?} */
    TrieT.prototype.p;
    /** @type {?} */
    TrieT.prototype.q;
}
/** @enum {string} */
const TrieRemoved = {
    REMOVED: 'removed',
    ABSENT: 'absent',
};
export { TrieRemoved };
/** @enum {string} */
const TrieInsert = {
    ADDED: 'added',
    UPDATED: 'updated',
};
export { TrieInsert };
/** @enum {string} */
const TrieOp = {
    PLUS: '+',
    MINUS: '-',
};
export { TrieOp };
export class Trie {
    /**
     * @param {?} op
     * @param {?} trie
     * @param {?} word
     * @param {?=} data
     */
    constructor(op, trie, word, data) {
        this.p = trie;
        this.w = word.toUpperCase();
        this.s = this.w.split('');
        this.c = { p: this.p, s: this.s },
            this.t = [];
        this.x = 0;
        this.f1 = op === TrieOp.PLUS ? this.add : this.probe;
        this.f2 = op === TrieOp.PLUS ? this.insert : this.remove;
        this.data = data;
        while (this.c.s.length) {
            this.c = this.f1(this.c);
        }
    }
    /**
     * @param {?} cAdded
     * @return {?}
     */
    add(cAdded) {
        /** @type {?} */
        const q = cAdded.s.shift();
        /** @type {?} */
        let np = cAdded.p[q];
        if (!np) {
            cAdded.p[q] = {};
            np = cAdded.p[q];
            this.x = 1;
        }
        return { p: np, s: cAdded.s };
    }
    /**
     * @param {?} cProbed
     * @return {?}
     */
    probe(cProbed) {
        /** @type {?} */
        const q = cProbed.s.shift();
        /** @type {?} */
        const k = Object.keys(cProbed.p).length;
        /** @type {?} */
        const np = cProbed.p[q];
        this.t.push({ q: q, k: k, p: cProbed.p });
        if (!np) {
            this.t = [];
            return { p: [], s: [] };
        }
        return { p: np, s: cProbed.s };
    }
    /**
     * @return {?}
     */
    insert() {
        this.c.p._data = this.data;
        return this.x ? TrieInsert.ADDED : TrieInsert.UPDATED;
    }
    /**
     * @return {?}
     */
    remove() {
        if (this.t.length) {
            this.t = this.t.reverse();
            while (this.t.length) {
                /** @type {?} */
                const d = this.t.shift();
                delete d.p[d.q];
                if (d.k > 1) {
                    this.t = [];
                }
            }
            return TrieRemoved.REMOVED;
        }
        return TrieRemoved.ABSENT;
    }
}
if (false) {
    /** @type {?} */
    Trie.prototype.p;
    /** @type {?} */
    Trie.prototype.w;
    /** @type {?} */
    Trie.prototype.s;
    /** @type {?} */
    Trie.prototype.c;
    /** @type {?} */
    Trie.prototype.t;
    /** @type {?} */
    Trie.prototype.x;
    /** @type {?} */
    Trie.prototype.f1;
    /** @type {?} */
    Trie.prototype.f2;
    /** @type {?} */
    Trie.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3V0aWwvdHJpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLDJCQUdDOzs7SUFGRyxrQkFBTzs7SUFDUCxrQkFBWTs7Ozs7QUFHaEIsMkJBSUM7OztJQUhHLGtCQUFPOztJQUNQLGtCQUFPOztJQUNQLGtCQUFPOzs7O0lBSVAsU0FBVSxTQUFTO0lBQ25CLFFBQVMsUUFBUTs7Ozs7SUFJakIsT0FBUSxPQUFPO0lBQ2YsU0FBVSxTQUFTOzs7OztJQVNuQixNQUFPLEdBQUc7SUFDVixPQUFRLEdBQUc7OztBQUlmLE1BQU0sT0FBTyxJQUFJOzs7Ozs7O0lBWWIsWUFDSSxFQUFVLEVBQ1YsSUFBUyxFQUNULElBQVksRUFDWixJQUFVO1FBRVYsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNyRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMs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QXFCOztJQUNyQixrQkFBc0I7O0lBQ3RCLG9CQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBUcmllQyB7XG4gICAgcDogYW55O1xuICAgIHM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyaWVUIHtcbiAgICBrOiBhbnk7XG4gICAgcDogYW55O1xuICAgIHE6IGFueTtcbn1cblxuZXhwb3J0IGVudW0gVHJpZVJlbW92ZWQge1xuICAgIFJFTU9WRUQgPSAncmVtb3ZlZCcsXG4gICAgQUJTRU5UID0gJ2Fic2VudCdcbn1cblxuZXhwb3J0IGVudW0gVHJpZUluc2VydCB7XG4gICAgQURERUQgPSAnYWRkZWQnLFxuICAgIFVQREFURUQgPSAndXBkYXRlZCdcbn1cblxuLyoqXG4gKiBDb21iaW5lIFRyaWVSZW1vdmVkIGFuZCBUcmllSW5zZXJ0IGluIHRvIGEgdW5pb24gdHlwZVxuICovXG5leHBvcnQgdHlwZSBUcmllQWN0aW9ucyA9IFRyaWVSZW1vdmVkIHwgVHJpZUluc2VydDtcblxuZXhwb3J0IGVudW0gVHJpZU9wIHtcbiAgICBQTFVTID0gJysnLFxuICAgIE1JTlVTID0gJy0nXG59XG5cblxuZXhwb3J0IGNsYXNzIFRyaWUge1xuICAgIHA6IGFueTtcbiAgICB3OiBzdHJpbmc7XG4gICAgczogc3RyaW5nW107XG4gICAgYzogVHJpZUM7XG4gICAgdDogVHJpZVRbXTtcbiAgICB4OiBudW1iZXI7XG4gICAgZjE6IChUcmllQykgPT4gVHJpZUM7XG4gICAgZjI6ICgpID0+IFRyaWVBY3Rpb25zO1xuICAgIGRhdGE6IGFueTtcblxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG9wOiBUcmllT3AsXG4gICAgICAgIHRyaWU6IGFueSxcbiAgICAgICAgd29yZDogc3RyaW5nLFxuICAgICAgICBkYXRhPzogYW55XG4gICAgKSB7XG4gICAgICAgIHRoaXMucCA9IHRyaWU7XG4gICAgICAgIHRoaXMudyA9IHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICAgICAgdGhpcy5zID0gdGhpcy53LnNwbGl0KCcnKTtcbiAgICAgICAgdGhpcy5jID0geyBwOiB0aGlzLnAsIHM6IHRoaXMucyB9LFxuICAgICAgICB0aGlzLnQgPSBbXTtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy5mMSA9IG9wID09PSBUcmllT3AuUExVUyA/IHRoaXMuYWRkIDogdGhpcy5wcm9iZTtcbiAgICAgICAgdGhpcy5mMiA9IG9wID09PSBUcmllT3AuUExVUyA/IHRoaXMuaW5zZXJ0IDogdGhpcy5yZW1vdmU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHdoaWxlICh0aGlzLmMucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuYyA9IHRoaXMuZjEodGhpcy5jKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZChjQWRkZWQ6IFRyaWVDKTogVHJpZUMge1xuICAgICAgICBjb25zdCBxID0gY0FkZGVkLnMuc2hpZnQoKTtcbiAgICAgICAgbGV0IG5wID0gY0FkZGVkLnBbcV07XG5cbiAgICAgICAgaWYgKCFucCkge1xuICAgICAgICAgICAgY0FkZGVkLnBbcV0gPSB7fTtcbiAgICAgICAgICAgIG5wID0gY0FkZGVkLnBbcV07XG4gICAgICAgICAgICB0aGlzLnggPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHA6IG5wLCBzOiBjQWRkZWQucyB9O1xuICAgIH1cblxuICAgIHByb2JlKGNQcm9iZWQ6IFRyaWVDKTogVHJpZUMge1xuICAgICAgICBjb25zdCBxID0gY1Byb2JlZC5zLnNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IGs6IG51bWJlciA9IE9iamVjdC5rZXlzKGNQcm9iZWQucCkubGVuZ3RoO1xuICAgICAgICBjb25zdCBucCA9IGNQcm9iZWQucFtxXTtcblxuICAgICAgICB0aGlzLnQucHVzaCh7IHE6IHEsIGs6IGssIHA6IGNQcm9iZWQucCB9KTtcbiAgICAgICAgaWYgKCFucCkge1xuICAgICAgICAgICAgdGhpcy50ID0gW107XG4gICAgICAgICAgICByZXR1cm4geyBwOiBbXSwgczogW10gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBwOiBucCwgczogY1Byb2JlZC5zIH07XG4gICAgfVxuXG4gICAgaW5zZXJ0KCk6IFRyaWVJbnNlcnQge1xuICAgICAgICB0aGlzLmMucC5fZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA/IFRyaWVJbnNlcnQuQURERUQgOiBUcmllSW5zZXJ0LlVQREFURUQ7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCk6IFRyaWVSZW1vdmVkIHtcbiAgICAgICAgaWYgKHRoaXMudC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudCA9IHRoaXMudC5yZXZlcnNlKCk7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLnQuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZC5wW2QucV07XG4gICAgICAgICAgICAgICAgaWYgKGQuayA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFRyaWVSZW1vdmVkLlJFTU9WRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFRyaWVSZW1vdmVkLkFCU0VOVDtcbiAgICB9XG59XG4iXX0=