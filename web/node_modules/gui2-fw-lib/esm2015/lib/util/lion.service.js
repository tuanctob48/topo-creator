/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import { Injectable } from '@angular/core';
import { LogService } from '../log.service';
import { WebSocketService } from '../remote/websocket.service';
import * as i0 from "@angular/core";
import * as i1 from "../log.service";
import * as i2 from "../remote/websocket.service";
/**
 * A definition of Lion data
 * @record
 */
export function Lion() { }
if (false) {
    /** @type {?} */
    Lion.prototype.locale;
    /** @type {?} */
    Lion.prototype.lion;
}
/**
 * ONOS GUI -- Lion -- Localization Utilities
 */
export class LionService {
    /**
     * @param {?} log
     * @param {?} wss
     */
    constructor(log, wss) {
        this.log = log;
        this.wss = wss;
        this.ubercache = [];
        this.loadCbs = new Map([]); // A map of functions
        this.wss.bindHandlers(new Map([
            ['uberlion', (data) => this.uberlion(data)]
        ]));
        this.log.debug('LionService constructed');
    }
    // A map of functions
    /**
     * Handler for uberlion event from WSS
     * @param {?} data
     * @return {?}
     */
    uberlion(data) {
        this.ubercache = data.lion;
        this.log.info('LION service: Locale... [' + data.locale + ']');
        this.log.info('LION service: Bundles installed...');
        for (const p in this.ubercache) {
            if (this.ubercache[p]) {
                this.log.info('            :=> ', p);
            }
        }
        // If any component had registered a callback, call it now
        // that LION is loaded
        for (const cbname of this.loadCbs.keys()) {
            this.log.debug('Updating', cbname, 'with LION');
            this.loadCbs.get(cbname)();
        }
        this.log.debug('LION service: uber-lion bundle received:', data);
    }
    /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     * @param {?} bundleId
     * @return {?}
     */
    bundle(bundleId) {
        /** @type {?} */
        let bundleObj = this.ubercache[bundleId];
        if (!bundleObj) {
            this.log.warn('No lion bundle registered:', bundleId);
            bundleObj = {};
        }
        return (key) => {
            return bundleObj[key] || '%' + key + '%';
        };
    }
}
LionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
LionService.ctorParameters = () => [
    { type: LogService },
    { type: WebSocketService }
];
/** @nocollapse */ LionService.ngInjectableDef = i0.defineInjectable({ factory: function LionService_Factory() { return new LionService(i0.inject(i1.LogService), i0.inject(i2.WebSocketService)); }, token: LionService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LionService.prototype.ubercache;
    /** @type {?} */
    LionService.prototype.loadCbs;
    /** @type {?} */
    LionService.prototype.log;
    /** @type {?} */
    LionService.prototype.wss;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvdXRpbC9saW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7Ozs7Ozs7O0FBSy9ELDBCQUdDOzs7SUFGRyxzQkFBWTs7SUFDWixvQkFBVTs7Ozs7QUFTZCxNQUFNLE9BQU8sV0FBVzs7Ozs7SUE2QnBCLFlBQ1ksR0FBZSxFQUNmLEdBQXFCO1FBRHJCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZixRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQTdCakMsY0FBUyxHQUFVLEVBQUUsQ0FBQztRQUN0QixZQUFPLEdBQUcsSUFBSSxHQUFHLENBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBQXFCO1FBOEI1RCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBeUI7WUFDbEQsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUU7U0FDL0MsQ0FBQyxDQUFDLENBQUM7UUFDSixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7Ozs7SUE3QkQsUUFBUSxDQUFDLElBQVU7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBRXBELEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0o7UUFDRCwwREFBMEQ7UUFDMUQsc0JBQXNCO1FBQ3RCLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7U0FDOUI7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7O0lBZ0JELE1BQU0sQ0FBQyxRQUFnQjs7WUFDZixTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFFeEMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RELFNBQVMsR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFFRCxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDWCxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUM3QyxDQUFDLENBQUM7SUFDTixDQUFDOzs7WUF6REosVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBaEJRLFVBQVU7WUFDVixnQkFBZ0I7Ozs7O0lBa0JyQixnQ0FBc0I7O0lBQ3RCLDhCQUEwQzs7SUEyQnRDLDBCQUF1Qjs7SUFDdkIsMEJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2ViU29ja2V0U2VydmljZSB9IGZyb20gJy4uL3JlbW90ZS93ZWJzb2NrZXQuc2VydmljZSc7XG5cbi8qKlxuICogQSBkZWZpbml0aW9uIG9mIExpb24gZGF0YVxuICovXG5leHBvcnQgaW50ZXJmYWNlIExpb24ge1xuICAgIGxvY2FsZTogYW55O1xuICAgIGxpb246IGFueTtcbn1cblxuLyoqXG4gKiBPTk9TIEdVSSAtLSBMaW9uIC0tIExvY2FsaXphdGlvbiBVdGlsaXRpZXNcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIExpb25TZXJ2aWNlIHtcblxuICAgIHViZXJjYWNoZTogYW55W10gPSBbXTtcbiAgICBsb2FkQ2JzID0gbmV3IE1hcDxzdHJpbmcsICgpID0+IHZvaWQ+KFtdKTsgLy8gQSBtYXAgb2YgZnVuY3Rpb25zXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciB1YmVybGlvbiBldmVudCBmcm9tIFdTU1xuICAgICAqL1xuICAgIHViZXJsaW9uKGRhdGE6IExpb24pIHtcbiAgICAgICAgdGhpcy51YmVyY2FjaGUgPSBkYXRhLmxpb247XG5cbiAgICAgICAgdGhpcy5sb2cuaW5mbygnTElPTiBzZXJ2aWNlOiBMb2NhbGUuLi4gWycgKyBkYXRhLmxvY2FsZSArICddJyk7XG4gICAgICAgIHRoaXMubG9nLmluZm8oJ0xJT04gc2VydmljZTogQnVuZGxlcyBpbnN0YWxsZWQuLi4nKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHAgaW4gdGhpcy51YmVyY2FjaGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnViZXJjYWNoZVtwXSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmluZm8oJyAgICAgICAgICAgIDo9PiAnLCBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBhbnkgY29tcG9uZW50IGhhZCByZWdpc3RlcmVkIGEgY2FsbGJhY2ssIGNhbGwgaXQgbm93XG4gICAgICAgIC8vIHRoYXQgTElPTiBpcyBsb2FkZWRcbiAgICAgICAgZm9yIChjb25zdCBjYm5hbWUgb2YgdGhpcy5sb2FkQ2JzLmtleXMoKSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoJ1VwZGF0aW5nJywgY2JuYW1lLCAnd2l0aCBMSU9OJyk7XG4gICAgICAgICAgICB0aGlzLmxvYWRDYnMuZ2V0KGNibmFtZSkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdMSU9OIHNlcnZpY2U6IHViZXItbGlvbiBidW5kbGUgcmVjZWl2ZWQ6JywgZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgbG9nOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHdzczogV2ViU29ja2V0U2VydmljZVxuICAgICkge1xuICAgICAgICB0aGlzLndzcy5iaW5kSGFuZGxlcnMobmV3IE1hcDxzdHJpbmcsIChkYXRhKSA9PiB2b2lkPihbXG4gICAgICAgICAgICBbJ3ViZXJsaW9uJywgKGRhdGEpID0+IHRoaXMudWJlcmxpb24oZGF0YSkgXVxuICAgICAgICBdKSk7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdMaW9uU2VydmljZSBjb25zdHJ1Y3RlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaW9uIGJ1bmRsZSAoZnVuY3Rpb24pIGZvciB0aGUgZ2l2ZW4gYnVuZGxlIElEIChzdHJpbmcpXG4gICAgICogcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAgICAgKi9cbiAgICBidW5kbGUoYnVuZGxlSWQ6IHN0cmluZyk6IChzdHJpbmcpID0+IHN0cmluZyB7XG4gICAgICAgIGxldCBidW5kbGVPYmogPSB0aGlzLnViZXJjYWNoZVtidW5kbGVJZF07XG5cbiAgICAgICAgaWYgKCFidW5kbGVPYmopIHtcbiAgICAgICAgICAgIHRoaXMubG9nLndhcm4oJ05vIGxpb24gYnVuZGxlIHJlZ2lzdGVyZWQ6JywgYnVuZGxlSWQpO1xuICAgICAgICAgICAgYnVuZGxlT2JqID0ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGtleSkgPT4gIHtcbiAgICAgICAgICAgIHJldHVybiBidW5kbGVPYmpba2V5XSB8fCAnJScgKyBrZXkgKyAnJSc7XG4gICAgICAgIH07XG4gICAgfVxufVxuIl19