/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import * as gds from './glyphdata.service';
import * as d3 from 'd3';
import { SvgUtilService } from './svgutil.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
import * as i3 from "./svgutil.service";
// constants
/** @type {?} */
const msgGS = 'GlyphService.';
/** @type {?} */
const rg = 'registerGlyphs(): ';
/** @type {?} */
const rgs = 'registerGlyphSet(): ';
/**
 * ONOS GUI -- SVG -- Glyph Service
 */
export class GlyphService {
    /**
     * @param {?} fs
     * @param {?} log
     * @param {?} sus
     */
    constructor(fs, log, sus) {
        this.fs = fs;
        this.log = log;
        this.sus = sus;
        // internal state
        this.glyphs = d3.map();
        this.clear();
        this.init();
        this.api = {
            registerGlyphs: this.registerGlyphs,
            registerGlyphSet: this.registerGlyphSet,
            ids: this.ids,
            glyph: this.glyph,
            glyphDefined: this.glyphDefined,
            loadDefs: this.loadDefs,
            addGlyph: this.addGlyph,
        };
        this.log.debug('GlyphService constructed');
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    warn(msg) {
        this.log.warn(msgGS + msg);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} vbox
     * @param {?} overwrite
     * @param {?} dups
     * @return {?}
     */
    addToMap(key, value, vbox, overwrite, dups) {
        if (!overwrite && this.glyphs.get(key)) {
            dups.push(key);
        }
        else {
            this.glyphs.set(key, { id: key, vb: vbox, d: value });
        }
    }
    /**
     * @param {?} dups
     * @param {?} which
     * @return {?}
     */
    reportDups(dups, which) {
        /** @type {?} */
        const ok = (dups.length === 0);
        /** @type {?} */
        const msg = 'ID collision: ';
        if (!ok) {
            dups.forEach((id) => {
                this.warn(which + msg + '"' + id + '"');
            });
        }
        return ok;
    }
    /**
     * @param {?} missing
     * @param {?} which
     * @return {?}
     */
    reportMissVb(missing, which) {
        /** @type {?} */
        const ok = (missing.length === 0);
        /** @type {?} */
        const msg = 'Missing viewbox property: ';
        if (!ok) {
            missing.forEach((vbk) => {
                this.warn(which + msg + '"' + vbk + '"');
            });
        }
        return ok;
    }
    /**
     * @return {?}
     */
    clear() {
        // start with a fresh map
        this.glyphs = d3.map();
    }
    /**
     * @return {?}
     */
    init() {
        this.log.info('Registering glyphs');
        this.registerGlyphs(gds.logos);
        this.registerGlyphSet(gds.glyphDataSet);
        this.registerGlyphSet(gds.badgeDataSet);
        this.registerGlyphs(gds.spriteData);
        this.registerGlyphSet(gds.mojoDataSet);
        this.registerGlyphs(gds.extraGlyphs);
    }
    /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    registerGlyphs(data, overwrite = false) {
        /** @type {?} */
        const dups = [];
        /** @type {?} */
        const missvb = [];
        for (const [key, value] of data.entries()) {
            /** @type {?} */
            const vbk = '_' + key;
            /** @type {?} */
            const vb = data.get(vbk);
            if (key[0] !== '_') {
                if (!vb) {
                    missvb.push(vbk);
                    continue;
                }
                this.addToMap(key, value, vb, overwrite, dups);
            }
        }
        return this.reportDups(dups, rg) && this.reportMissVb(missvb, rg);
    }
    /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    registerGlyphSet(data, overwrite = false) {
        /** @type {?} */
        const dups = [];
        /** @type {?} */
        const vb = data.get('_viewbox');
        if (!vb) {
            this.warn(rgs + 'no "_viewbox" property found');
            return false;
        }
        for (const [key, value] of data.entries()) {
            //        angular.forEach(data, function (value, key) {
            if (key[0] !== '_') {
                this.addToMap(key, value, vb, overwrite, dups);
            }
        }
        return this.reportDups(dups, rgs);
    }
    /**
     * @return {?}
     */
    ids() {
        return this.glyphs.keys();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    glyph(id) {
        return this.glyphs.get(id);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    glyphDefined(id) {
        return this.glyphs.has(id);
    }
    /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     * @param {?} defs
     * @param {?} glyphIds
     * @param {?} noClear
     * @return {?}
     */
    loadDefs(defs, glyphIds, noClear) {
        /** @type {?} */
        const list = this.fs.isA(glyphIds) || this.ids();
        if (!noClear) {
            // remove all existing content
            defs.html(null);
        }
        // load up the requested glyphs
        list.forEach((id) => {
            /** @type {?} */
            const g = this.glyph(id);
            if (g) {
                if (noClear) {
                    // quick exit if symbol is already present
                    // TODO: check if this should be a continue or break instead
                    if (defs.select('symbol#' + g.id).size() > 0) {
                        return;
                    }
                }
                defs.append('symbol')
                    .attr('id', g.id)
                    .attr('viewBox', g.vb)
                    .append('path')
                    .attr('d', g.d);
            }
        });
    }
    /**
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} size
     * @param {?} overlay
     * @param {?} trans
     * @return {?}
     */
    addGlyph(elem, glyphId, size, overlay, trans) {
        /** @type {?} */
        const sz = size || 40;
        /** @type {?} */
        const ovr = !!overlay;
        /** @type {?} */
        const xns = this.fs.isA(trans);
        /** @type {?} */
        const glyphUse = elem
            .append('use')
            .attr('width', sz)
            .attr('height', sz)
            .attr('class', 'glyph')
            .attr('xlink:href', '#' + glyphId)
            .classed('overlay', ovr);
        if (xns) {
            glyphUse.attr('transform', this.sus.translate(trans));
        }
        return glyphUse;
    }
}
GlyphService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
GlyphService.ctorParameters = () => [
    { type: FnService },
    { type: LogService },
    { type: SvgUtilService }
];
/** @nocollapse */ GlyphService.ngInjectableDef = i0.defineInjectable({ factory: function GlyphService_Factory() { return new GlyphService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.SvgUtilService)); }, token: GlyphService, providedIn: "root" });
if (false) {
    /** @type {?} */
    GlyphService.prototype.glyphs;
    /** @type {?} */
    GlyphService.prototype.api;
    /** @type {?} */
    GlyphService.prototype.fs;
    /** @type {?} */
    GlyphService.prototype.log;
    /** @type {?} */
    GlyphService.prototype.sus;
}
//# sourceMappingURL=data:application/json;base64,