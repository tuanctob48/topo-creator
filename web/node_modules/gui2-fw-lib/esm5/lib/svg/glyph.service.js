/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import * as gds from './glyphdata.service';
import * as d3 from 'd3';
import { SvgUtilService } from './svgutil.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
import * as i3 from "./svgutil.service";
// constants
/** @type {?} */
var msgGS = 'GlyphService.';
/** @type {?} */
var rg = 'registerGlyphs(): ';
/** @type {?} */
var rgs = 'registerGlyphSet(): ';
/**
 * ONOS GUI -- SVG -- Glyph Service
 */
var GlyphService = /** @class */ (function () {
    function GlyphService(fs, log, sus) {
        this.fs = fs;
        this.log = log;
        this.sus = sus;
        // internal state
        this.glyphs = d3.map();
        this.clear();
        this.init();
        this.api = {
            registerGlyphs: this.registerGlyphs,
            registerGlyphSet: this.registerGlyphSet,
            ids: this.ids,
            glyph: this.glyph,
            glyphDefined: this.glyphDefined,
            loadDefs: this.loadDefs,
            addGlyph: this.addGlyph,
        };
        this.log.debug('GlyphService constructed');
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    GlyphService.prototype.warn = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.log.warn(msgGS + msg);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} vbox
     * @param {?} overwrite
     * @param {?} dups
     * @return {?}
     */
    GlyphService.prototype.addToMap = /**
     * @param {?} key
     * @param {?} value
     * @param {?} vbox
     * @param {?} overwrite
     * @param {?} dups
     * @return {?}
     */
    function (key, value, vbox, overwrite, dups) {
        if (!overwrite && this.glyphs.get(key)) {
            dups.push(key);
        }
        else {
            this.glyphs.set(key, { id: key, vb: vbox, d: value });
        }
    };
    /**
     * @param {?} dups
     * @param {?} which
     * @return {?}
     */
    GlyphService.prototype.reportDups = /**
     * @param {?} dups
     * @param {?} which
     * @return {?}
     */
    function (dups, which) {
        var _this = this;
        /** @type {?} */
        var ok = (dups.length === 0);
        /** @type {?} */
        var msg = 'ID collision: ';
        if (!ok) {
            dups.forEach(function (id) {
                _this.warn(which + msg + '"' + id + '"');
            });
        }
        return ok;
    };
    /**
     * @param {?} missing
     * @param {?} which
     * @return {?}
     */
    GlyphService.prototype.reportMissVb = /**
     * @param {?} missing
     * @param {?} which
     * @return {?}
     */
    function (missing, which) {
        var _this = this;
        /** @type {?} */
        var ok = (missing.length === 0);
        /** @type {?} */
        var msg = 'Missing viewbox property: ';
        if (!ok) {
            missing.forEach(function (vbk) {
                _this.warn(which + msg + '"' + vbk + '"');
            });
        }
        return ok;
    };
    /**
     * @return {?}
     */
    GlyphService.prototype.clear = /**
     * @return {?}
     */
    function () {
        // start with a fresh map
        this.glyphs = d3.map();
    };
    /**
     * @return {?}
     */
    GlyphService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.log.info('Registering glyphs');
        this.registerGlyphs(gds.logos);
        this.registerGlyphSet(gds.glyphDataSet);
        this.registerGlyphSet(gds.badgeDataSet);
        this.registerGlyphs(gds.spriteData);
        this.registerGlyphSet(gds.mojoDataSet);
        this.registerGlyphs(gds.extraGlyphs);
    };
    /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    GlyphService.prototype.registerGlyphs = /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    function (data, overwrite) {
        if (overwrite === void 0) { overwrite = false; }
        var e_1, _a;
        /** @type {?} */
        var dups = [];
        /** @type {?} */
        var missvb = [];
        try {
            for (var _b = tslib_1.__values(data.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
                /** @type {?} */
                var vbk = '_' + key;
                /** @type {?} */
                var vb = data.get(vbk);
                if (key[0] !== '_') {
                    if (!vb) {
                        missvb.push(vbk);
                        continue;
                    }
                    this.addToMap(key, value, vb, overwrite, dups);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this.reportDups(dups, rg) && this.reportMissVb(missvb, rg);
    };
    /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    GlyphService.prototype.registerGlyphSet = /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    function (data, overwrite) {
        if (overwrite === void 0) { overwrite = false; }
        var e_2, _a;
        /** @type {?} */
        var dups = [];
        /** @type {?} */
        var vb = data.get('_viewbox');
        if (!vb) {
            this.warn(rgs + 'no "_viewbox" property found');
            return false;
        }
        try {
            for (var _b = tslib_1.__values(data.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
                //        angular.forEach(data, function (value, key) {
                if (key[0] !== '_') {
                    this.addToMap(key, value, vb, overwrite, dups);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.reportDups(dups, rgs);
    };
    /**
     * @return {?}
     */
    GlyphService.prototype.ids = /**
     * @return {?}
     */
    function () {
        return this.glyphs.keys();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GlyphService.prototype.glyph = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.glyphs.get(id);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GlyphService.prototype.glyphDefined = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.glyphs.has(id);
    };
    /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     */
    /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     * @param {?} defs
     * @param {?} glyphIds
     * @param {?} noClear
     * @return {?}
     */
    GlyphService.prototype.loadDefs = /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     * @param {?} defs
     * @param {?} glyphIds
     * @param {?} noClear
     * @return {?}
     */
    function (defs, glyphIds, noClear) {
        var _this = this;
        /** @type {?} */
        var list = this.fs.isA(glyphIds) || this.ids();
        if (!noClear) {
            // remove all existing content
            defs.html(null);
        }
        // load up the requested glyphs
        list.forEach(function (id) {
            /** @type {?} */
            var g = _this.glyph(id);
            if (g) {
                if (noClear) {
                    // quick exit if symbol is already present
                    // TODO: check if this should be a continue or break instead
                    if (defs.select('symbol#' + g.id).size() > 0) {
                        return;
                    }
                }
                defs.append('symbol')
                    .attr('id', g.id)
                    .attr('viewBox', g.vb)
                    .append('path')
                    .attr('d', g.d);
            }
        });
    };
    /**
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} size
     * @param {?} overlay
     * @param {?} trans
     * @return {?}
     */
    GlyphService.prototype.addGlyph = /**
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} size
     * @param {?} overlay
     * @param {?} trans
     * @return {?}
     */
    function (elem, glyphId, size, overlay, trans) {
        /** @type {?} */
        var sz = size || 40;
        /** @type {?} */
        var ovr = !!overlay;
        /** @type {?} */
        var xns = this.fs.isA(trans);
        /** @type {?} */
        var glyphUse = elem
            .append('use')
            .attr('width', sz)
            .attr('height', sz)
            .attr('class', 'glyph')
            .attr('xlink:href', '#' + glyphId)
            .classed('overlay', ovr);
        if (xns) {
            glyphUse.attr('transform', this.sus.translate(trans));
        }
        return glyphUse;
    };
    GlyphService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    GlyphService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: SvgUtilService }
    ]; };
    /** @nocollapse */ GlyphService.ngInjectableDef = i0.defineInjectable({ factory: function GlyphService_Factory() { return new GlyphService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.SvgUtilService)); }, token: GlyphService, providedIn: "root" });
    return GlyphService;
}());
export { GlyphService };
if (false) {
    /** @type {?} */
    GlyphService.prototype.glyphs;
    /** @type {?} */
    GlyphService.prototype.api;
    /** @type {?} */
    GlyphService.prototype.fs;
    /** @type {?} */
    GlyphService.prototype.log;
    /** @type {?} */
    GlyphService.prototype.sus;
}
//# sourceMappingURL=data:application/json;base64,