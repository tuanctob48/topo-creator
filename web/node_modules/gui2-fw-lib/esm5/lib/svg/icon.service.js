/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { GlyphService } from './glyph.service';
import { LogService } from '../log.service';
import { SvgUtilService } from './svgutil.service';
import * as d3 from 'd3';
import * as i0 from "@angular/core";
import * as i1 from "./glyph.service";
import * as i2 from "../log.service";
import * as i3 from "./svgutil.service";
/** @type {?} */
var vboxSize = 50;
/** @type {?} */
var cornerSize = vboxSize / 10;
/** @type {?} */
var viewBox = '0 0 ' + vboxSize + ' ' + vboxSize;
/** @type {?} */
export var glyphMapping = new Map([
    // Maps icon ID to the glyph ID it uses.
    // NOTE: icon ID maps to a CSS class for styling that icon
    ['active', 'checkMark'],
    ['inactive', 'xMark'],
    ['plus', 'plus'],
    ['minus', 'minus'],
    ['play', 'play'],
    ['stop', 'stop'],
    ['upload', 'upload'],
    ['download', 'download'],
    ['delta', 'delta'],
    ['nonzero', 'nonzero'],
    ['close', 'xClose'],
    ['m_cloud', 'm_cloud'],
    ['m_map', 'm_map'],
    ['m_selectMap', 'm_selectMap'],
    ['thatsNoMoon', 'thatsNoMoon'],
    ['m_ports', 'm_ports'],
    ['m_switch', 'm_switch'],
    ['m_roadm', 'm_roadm'],
    ['m_router', 'm_router'],
    ['m_uiAttached', 'm_uiAttached'],
    ['m_endstation', 'm_endstation'],
    ['m_summary', 'm_summary'],
    ['m_details', 'm_details'],
    ['m_oblique', 'm_oblique'],
    ['m_filters', 'm_filters'],
    ['m_cycleLabels', 'm_cycleLabels'],
    ['m_cycleGridDisplay', 'm_cycleGridDisplay'],
    ['m_prev', 'm_prev'],
    ['m_next', 'm_next'],
    ['m_flows', 'm_flows'],
    ['m_allTraffic', 'm_allTraffic'],
    ['m_xMark', 'm_xMark'],
    ['m_resetZoom', 'm_resetZoom'],
    ['m_eqMaster', 'm_eqMaster'],
    ['m_unknown', 'm_unknown'],
    ['m_controller', 'm_controller'],
    ['m_eqMaster', 'm_eqMaster'],
    ['m_virtual', 'm_virtual'],
    ['m_other', 'm_other'],
    ['m_bgpSpeaker', 'm_bgpSpeaker'],
    ['m_otn', 'm_otn'],
    ['m_roadm_otn', 'm_roadm_otn'],
    ['m_fiberSwitch', 'm_fiberSwitch'],
    ['m_microwave', 'm_microwave'],
    ['m_relatedIntents', 'm_relatedIntents'],
    ['m_intentTraffic', 'm_intentTraffic'],
    ['m_firewall', 'm_firewall'],
    ['m_balancer', 'm_balancer'],
    ['m_ips', 'm_ips'],
    ['m_ids', 'm_ids'],
    ['m_olt', 'm_olt'],
    ['m_onu', 'm_onu'],
    ['m_swap', 'm_swap'],
    ['m_shortestGeoPath', 'm_shortestGeoPath'],
    ['m_source', 'm_source'],
    ['m_destination', 'm_destination'],
    ['m_topo', 'm_topo'],
    ['m_shortestPath', 'm_shortestPath'],
    ['m_disjointPaths', 'm_disjointPaths'],
    ['m_region', 'm_region'],
    ['topo', 'topo'],
    ['bird', 'bird'],
    ['refresh', 'refresh'],
    ['query', 'query'],
    ['garbage', 'garbage'],
    ['upArrow', 'triangleUp'],
    ['downArrow', 'triangleDown'],
    ['triangleLeft', 'triangleLeft'],
    ['triangleRight', 'triangleRight'],
    ['appInactive', 'unknown'],
    ['uiAttached', 'uiAttached'],
    ['node', 'node'],
    ['devIcon_SWITCH', 'switch'],
    ['devIcon_ROADM', 'roadm'],
    ['devIcon_OTN', 'otn'],
    ['portIcon_DEFAULT', 'm_ports'],
    ['meter', 'meterTable'],
    ['deviceTable', 'switch'],
    ['flowTable', 'flowTable'],
    ['portTable', 'portTable'],
    ['groupTable', 'groupTable'],
    ['meterTable', 'meterTable'],
    ['pipeconfTable', 'pipeconfTable'],
    ['hostIcon_endstation', 'endstation'],
    ['hostIcon_router', 'router'],
    ['hostIcon_bgpSpeaker', 'bgpSpeaker'],
    // navigation menu icons...
    ['nav_apps', 'bird'],
    ['nav_settings', 'cog'],
    ['nav_cluster', 'node'],
    ['nav_processors', 'allTraffic'],
    ['nav_partitions', 'unknown'],
    ['nav_topo', 'topo'],
    ['nav_topo2', 'm_cloud'],
    ['nav_devs', 'switch'],
    ['nav_links', 'ports'],
    ['nav_hosts', 'endstation'],
    ['nav_intents', 'relatedIntents'],
    ['nav_tunnels', 'ports'],
    ['nav_yang', 'yang'],
]);
/**
 * ONOS GUI -- SVG -- Icon Service
 */
var IconService = /** @class */ (function () {
    function IconService(gs, log, sus) {
        this.gs = gs;
        this.log = log;
        this.sus = sus;
        this.log.debug('IconService constructed');
    }
    /**
     * @return {?}
     */
    IconService.prototype.ensureIconLibDefs = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var body = d3.select('body');
        /** @type {?} */
        var svg = body.select('svg#IconLibDefs');
        if (svg.empty()) {
            svg = body.append('svg').attr('id', 'IconLibDefs');
            svg.append('defs');
        }
        return svg.select('defs');
    };
    /**
     * Load an icon
     *
     * @param div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param glyphId Identifies the glyph to use
     * @param size The dimension of icon in pixels. Defaults to 20.
     * @param installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     */
    /**
     * Load an icon
     *
     * @param {?} div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param {?=} glyphId Identifies the glyph to use
     * @param {?=} size The dimension of icon in pixels. Defaults to 20.
     * @param {?=} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    IconService.prototype.loadIcon = /**
     * Load an icon
     *
     * @param {?} div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param {?=} glyphId Identifies the glyph to use
     * @param {?=} size The dimension of icon in pixels. Defaults to 20.
     * @param {?=} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    function (div, glyphId, size, installGlyph, svgClass) {
        if (glyphId === void 0) { glyphId = 'unknown'; }
        if (size === void 0) { size = 20; }
        if (installGlyph === void 0) { installGlyph = true; }
        if (svgClass === void 0) { svgClass = 'embeddedIcon'; }
        /** @type {?} */
        var dim = size || 20;
        /** @type {?} */
        var svgCls = svgClass || 'embeddedIcon';
        /** @type {?} */
        var gid = glyphId || 'unknown';
        /** @type {?} */
        var g;
        /** @type {?} */
        var svgIcon;
        if (installGlyph) {
            this.gs.loadDefs(this.ensureIconLibDefs(), [gid], true);
        }
        this.log.warn('loadEmbeddedIcon. install done');
        svgIcon = div
            .append('svg')
            .attr('class', svgCls)
            .attr('width', dim)
            .attr('height', dim)
            .attr('viewBox', viewBox);
        g = svgIcon.append('g')
            .attr('class', 'icon');
        g.append('rect')
            .attr('width', vboxSize)
            .attr('height', vboxSize)
            .attr('rx', cornerSize);
        g.append('use')
            .attr('width', vboxSize)
            .attr('height', vboxSize)
            .attr('class', 'glyph')
            .attr('xlink:href', '#' + gid);
    };
    /**
     * Load an icon by class.
     * @param div A D3 selection of the <DIV> element into which icon should load
     * @param iconCls The CSS class used to identify the icon
     * @param size The dimension of icon in pixels. Defaults to 20.
     * @param installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     */
    /**
     * Load an icon by class.
     * @param {?} div A D3 selection of the <DIV> element into which icon should load
     * @param {?} iconCls The CSS class used to identify the icon
     * @param {?} size The dimension of icon in pixels. Defaults to 20.
     * @param {?} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    IconService.prototype.loadIconByClass = /**
     * Load an icon by class.
     * @param {?} div A D3 selection of the <DIV> element into which icon should load
     * @param {?} iconCls The CSS class used to identify the icon
     * @param {?} size The dimension of icon in pixels. Defaults to 20.
     * @param {?} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    function (div, iconCls, size, installGlyph, svgClass) {
        if (svgClass === void 0) { svgClass = 'embeddedIcon'; }
        this.loadIcon(div, glyphMapping.get(iconCls), size, installGlyph, svgClass);
        div.select('svg g').classed(iconCls, true);
    };
    /**
     * Load an embedded icon.
     */
    /**
     * Load an embedded icon.
     * @param {?} div
     * @param {?} iconCls
     * @param {?} size
     * @return {?}
     */
    IconService.prototype.loadEmbeddedIcon = /**
     * Load an embedded icon.
     * @param {?} div
     * @param {?} iconCls
     * @param {?} size
     * @return {?}
     */
    function (div, iconCls, size) {
        this.loadIconByClass(div, iconCls, size, true);
    };
    /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param iconCls The icon class as a string
     */
    /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param {?} iconCls The icon class as a string
     * @return {?}
     */
    IconService.prototype.loadIconDef = /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param {?} iconCls The icon class as a string
     * @return {?}
     */
    function (iconCls) {
        /** @type {?} */
        var glyphName = glyphMapping.get(iconCls);
        if (!glyphName) {
            glyphName = iconCls;
        }
        this.gs.loadDefs(this.ensureIconLibDefs(), [glyphName], true);
        this.log.debug('icon definition', iconCls, 'added to defs');
    };
    /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     */
    /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} iconDim
     * @return {?}
     */
    IconService.prototype.addDeviceIcon = /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} iconDim
     * @return {?}
     */
    function (elem, glyphId, iconDim) {
        /** @type {?} */
        var gid = this.gs.glyphDefined(glyphId) ? glyphId : 'query';
        return elem.append('use').attr({
            'xlink:href': '#' + gid,
            width: iconDim,
            height: iconDim,
        });
    };
    /**
     * @param {?} elem
     * @param {?} radius
     * @param {?} glyphId
     * @return {?}
     */
    IconService.prototype.addHostIcon = /**
     * @param {?} elem
     * @param {?} radius
     * @param {?} glyphId
     * @return {?}
     */
    function (elem, radius, glyphId) {
        /** @type {?} */
        var dim = radius * 1.5;
        /** @type {?} */
        var xlate = -dim / 2;
        /** @type {?} */
        var g = elem.append('g')
            .attr('class', 'svgIcon hostIcon');
        g.append('circle').attr('r', radius);
        g.append('use').attr({
            'xlink:href': '#' + glyphId,
            width: dim,
            height: dim,
            transform: this.sus.translate([xlate], xlate),
        });
        return g;
    };
    /**
     * @param {?} iconId
     * @param {?} glyphId
     * @return {?}
     */
    IconService.prototype.registerIconMapping = /**
     * @param {?} iconId
     * @param {?} glyphId
     * @return {?}
     */
    function (iconId, glyphId) {
        if (glyphMapping[iconId]) {
            this.log.warn('Icon with id', iconId, 'already mapped. Ignoring.');
        }
        else {
            // map icon-->glyph
            glyphMapping[iconId] = glyphId;
            // make sure definition is installed
            this.gs.loadDefs(this.ensureIconLibDefs(), [glyphId], true);
        }
    };
    IconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    IconService.ctorParameters = function () { return [
        { type: GlyphService },
        { type: LogService },
        { type: SvgUtilService }
    ]; };
    /** @nocollapse */ IconService.ngInjectableDef = i0.defineInjectable({ factory: function IconService_Factory() { return new IconService(i0.inject(i1.GlyphService), i0.inject(i2.LogService), i0.inject(i3.SvgUtilService)); }, token: IconService, providedIn: "root" });
    return IconService;
}());
export { IconService };
if (false) {
    /** @type {?} */
    IconService.prototype.gs;
    /** @type {?} */
    IconService.prototype.log;
    /** @type {?} */
    IconService.prototype.sus;
}
//# sourceMappingURL=data:application/json;base64,