/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2019-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var LONGITUDE_EXTENT = 180;
/** @type {?} */
var LATITUDE_EXTENT = 75;
/** @type {?} */
var GRID_EXTENT_X = 2000;
/** @type {?} */
var GRID_EXTENT_Y = 1000;
/** @type {?} */
var GRID_DIAGONAL = 2236;
// 2236 is the length of the diagonal of the 2000x1000 box
/** @type {?} */
var GRID_CENTRE_X = 500;
/** @type {?} */
var GRID_CENTRE_Y = 500;
/**
 * A model of the map bounds bottom left to top right in lat and long
 * @record
 */
export function MapBounds() { }
if (false) {
    /** @type {?} */
    MapBounds.prototype.lngMin;
    /** @type {?} */
    MapBounds.prototype.latMin;
    /** @type {?} */
    MapBounds.prototype.lngMax;
    /** @type {?} */
    MapBounds.prototype.latMax;
}
/**
 * model of the topo2CurrentRegion Loc part of the MetaUi below
 * @record
 */
export function LocMeta() { }
if (false) {
    /** @type {?} */
    LocMeta.prototype.lng;
    /** @type {?} */
    LocMeta.prototype.lat;
}
/**
 * model of the topo2CurrentRegion MetaUi from Device below
 * @record
 */
export function MetaUi() { }
if (false) {
    /** @type {?} */
    MetaUi.prototype.equivLoc;
    /** @type {?} */
    MetaUi.prototype.x;
    /** @type {?} */
    MetaUi.prototype.y;
}
/**
 * Model of the Zoom preferences
 * @record
 */
export function TopoZoomPrefs() { }
if (false) {
    /** @type {?} */
    TopoZoomPrefs.prototype.tx;
    /** @type {?} */
    TopoZoomPrefs.prototype.ty;
    /** @type {?} */
    TopoZoomPrefs.prototype.sc;
}
/**
 * Utility class with static functions for scaling maps
 *
 * This is left as a class, so that the functions are loaded only as needed
 */
var /**
 * Utility class with static functions for scaling maps
 *
 * This is left as a class, so that the functions are loaded only as needed
 */
ZoomUtils = /** @class */ (function () {
    function ZoomUtils() {
    }
    /**
     * @param {?} location
     * @return {?}
     */
    ZoomUtils.convertGeoToCanvas = /**
     * @param {?} location
     * @return {?}
     */
    function (location) {
        /** @type {?} */
        var calcX = (LONGITUDE_EXTENT + location.lng) / (LONGITUDE_EXTENT * 2) * GRID_EXTENT_X - GRID_CENTRE_X;
        /** @type {?} */
        var calcY = (LATITUDE_EXTENT - location.lat) / (LATITUDE_EXTENT * 2) * GRID_EXTENT_Y;
        return (/** @type {?} */ ({
            x: calcX,
            y: calcY,
            equivLoc: {
                lat: location.lat,
                lng: location.lng
            }
        }));
    };
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    ZoomUtils.convertXYtoGeo = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        /** @type {?} */
        var calcLong = (x + GRID_CENTRE_X) * 2 * LONGITUDE_EXTENT / GRID_EXTENT_X - LONGITUDE_EXTENT;
        /** @type {?} */
        var calcLat = -(y * 2 * LATITUDE_EXTENT / GRID_EXTENT_Y - LATITUDE_EXTENT);
        return (/** @type {?} */ ({
            x: x,
            y: y,
            equivLoc: (/** @type {?} */ ({
                lat: (calcLat === -0) ? 0 : calcLat,
                lng: calcLong
            }))
        }));
    };
    /**
     * This converts the bounds of a map loaded from a TopoGson file that has been
     * converted in to a GEOJson format by d3
     *
     * The bounds are in latitude and longitude from bottom left (min) to top right (max)
     *
     * First they are converted in to SVG viewbox coordinates 0,0 top left 1000x1000
     *
     * The the zoom level is calculated by scaling to the grid diagonal
     *
     * Finally the translation is calculated by applying the zoom first, and then
     * translating on the zoomed coordinate system
     * @param mapBounds - the bounding box of the chosen map in lat and long
     * @param log The LogService
     */
    /**
     * This converts the bounds of a map loaded from a TopoGson file that has been
     * converted in to a GEOJson format by d3
     *
     * The bounds are in latitude and longitude from bottom left (min) to top right (max)
     *
     * First they are converted in to SVG viewbox coordinates 0,0 top left 1000x1000
     *
     * The the zoom level is calculated by scaling to the grid diagonal
     *
     * Finally the translation is calculated by applying the zoom first, and then
     * translating on the zoomed coordinate system
     * @param {?} mapBounds - the bounding box of the chosen map in lat and long
     * @param {?=} log The LogService
     * @return {?}
     */
    ZoomUtils.convertBoundsToZoomLevel = /**
     * This converts the bounds of a map loaded from a TopoGson file that has been
     * converted in to a GEOJson format by d3
     *
     * The bounds are in latitude and longitude from bottom left (min) to top right (max)
     *
     * First they are converted in to SVG viewbox coordinates 0,0 top left 1000x1000
     *
     * The the zoom level is calculated by scaling to the grid diagonal
     *
     * Finally the translation is calculated by applying the zoom first, and then
     * translating on the zoomed coordinate system
     * @param {?} mapBounds - the bounding box of the chosen map in lat and long
     * @param {?=} log The LogService
     * @return {?}
     */
    function (mapBounds, log) {
        /** @type {?} */
        var min = this.convertGeoToCanvas((/** @type {?} */ ({
            lng: mapBounds.lngMin,
            lat: mapBounds.latMin
        })));
        /** @type {?} */
        var max = this.convertGeoToCanvas((/** @type {?} */ ({
            lng: mapBounds.lngMax,
            lat: mapBounds.latMax
        })));
        /** @type {?} */
        var diagonal = Math.sqrt(Math.pow(max.x - min.x, 2) + Math.pow(max.y - min.y, 2));
        /** @type {?} */
        var centreX = (max.x - min.x) / 2 + min.x;
        /** @type {?} */
        var centreY = (max.y - min.y) / 2 + min.y;
        // Zoom works from the top left of the 1000x1000 viewbox
        // The scale is applied first and then the translate is on the scaled coordinates
        /** @type {?} */
        var zoomscale = 0.5 * GRID_DIAGONAL / ((diagonal < 100) ? 100 : diagonal);
        // Don't divide by zero
        /** @type {?} */
        var zoomx = -centreX * zoomscale + GRID_CENTRE_X;
        /** @type {?} */
        var zoomy = -centreY * zoomscale + GRID_CENTRE_Y;
        // log.debug('MapBounds', mapBounds, 'XYMin', min, 'XYMax', max, 'Diag', diagonal,
        //     'Centre', centreX, centreY, 'translate', zoomx, zoomy, 'Scale', zoomscale);
        return (/** @type {?} */ ({ tx: zoomx, ty: zoomy, sc: zoomscale }));
    };
    /**
     * Calculate Zoom settings to fit the 1000x1000 grid in to the available window height
     * less the banner height
     *
     * Scaling always happens from the top left 0,0
     * If the height is greater than the width then no scaling is required - grid will
     * need to fill the SVG canvas
     * @param bannerHeight - the top band of the screen for the mast
     * @param innerWidth - the actual width of the screen
     * @param innerHeight - the actual height of the screen
     * @return Zoom settings - scale and translate
     */
    /**
     * Calculate Zoom settings to fit the 1000x1000 grid in to the available window height
     * less the banner height
     *
     * Scaling always happens from the top left 0,0
     * If the height is greater than the width then no scaling is required - grid will
     * need to fill the SVG canvas
     * @param {?} bannerHeight - the top band of the screen for the mast
     * @param {?} innerWidth - the actual width of the screen
     * @param {?} innerHeight - the actual height of the screen
     * @return {?} Zoom settings - scale and translate
     */
    ZoomUtils.zoomToWindowSize = /**
     * Calculate Zoom settings to fit the 1000x1000 grid in to the available window height
     * less the banner height
     *
     * Scaling always happens from the top left 0,0
     * If the height is greater than the width then no scaling is required - grid will
     * need to fill the SVG canvas
     * @param {?} bannerHeight - the top band of the screen for the mast
     * @param {?} innerWidth - the actual width of the screen
     * @param {?} innerHeight - the actual height of the screen
     * @return {?} Zoom settings - scale and translate
     */
    function (bannerHeight, innerWidth, innerHeight) {
        /** @type {?} */
        var newHeight = innerHeight - bannerHeight;
        if (newHeight > innerWidth) {
            return (/** @type {?} */ ({
                sc: 1.0,
                tx: 0,
                ty: 0
            }));
        }
        else {
            /** @type {?} */
            var scale = newHeight / innerWidth;
            return (/** @type {?} */ ({
                sc: scale,
                tx: (500 / scale - 500) * scale,
                ty: 0
            }));
        }
    };
    return ZoomUtils;
}());
/**
 * Utility class with static functions for scaling maps
 *
 * This is left as a class, so that the functions are loaded only as needed
 */
export { ZoomUtils };
//# sourceMappingURL=data:application/json;base64,