/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable } from '@angular/core';
import { FnService } from './fn.service';
import { LogService } from '../log.service';
import { WebSocketService } from '../remote/websocket.service';
import * as i0 from "@angular/core";
import * as i1 from "./fn.service";
import * as i2 from "../log.service";
import * as i3 from "../remote/websocket.service";
/** @type {?} */
var UPDATE_PREFS = 'updatePrefs';
/** @type {?} */
var UPDATE_PREFS_REQ = 'updatePrefReq';
/**
 * ONOS GUI -- Util -- User Preference Service
 */
var PrefsService = /** @class */ (function () {
    function PrefsService(fs, log, wss, window) {
        var _this = this;
        this.fs = fs;
        this.log = log;
        this.wss = wss;
        this.window = window;
        this.handlers = [];
        this.listeners = [];
        this.wss.bindHandlers(new Map([
            [UPDATE_PREFS, function (data) { return _this.updatePrefs(data); }]
        ]));
        this.handlers.push(UPDATE_PREFS);
        // When index.html is fetched it is served up by MainIndexResource.java
        // which fetches userPrefs in to the global scope.
        // After that updates are done through WebSocket
        this.cache = Object.assign({}, this.window['userPrefs']);
        this.log.debug('PrefsService constructed');
    }
    /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    PrefsService.prototype.setPrefs = /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    function (name, obj) {
        // keep a cached copy of the object and send an update to server
        this.cache[name] = obj;
        this.wss.sendEvent(UPDATE_PREFS_REQ, { key: name, value: obj });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PrefsService.prototype.updatePrefs = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.cache = data;
        this.listeners.forEach(function (lsnr) { return lsnr(data); });
    };
    /**
     * @param {?} obj
     * @param {?=} keys
     * @param {?=} not
     * @return {?}
     */
    PrefsService.prototype.asNumbers = /**
     * @param {?} obj
     * @param {?=} keys
     * @param {?=} not
     * @return {?}
     */
    function (obj, keys, not) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        var skip = {};
        if (not) {
            keys.forEach(function (k) {
                skip[k] = 1;
            });
        }
        if (!keys || not) {
            // do them all
            Array.from(obj).forEach(function (v, k) {
                if (!not || !skip[k]) {
                    obj[k] = Number(obj[k]);
                }
            });
        }
        else {
            // do the explicitly named keys
            keys.forEach(function (k) {
                obj[k] = Number(obj[k]);
            });
        }
        return obj;
    };
    /**
     * @param {?} name
     * @param {?} defaults
     * @param {?=} qparams
     * @return {?}
     */
    PrefsService.prototype.getPrefs = /**
     * @param {?} name
     * @param {?} defaults
     * @param {?=} qparams
     * @return {?}
     */
    function (name, defaults, qparams) {
        /** @type {?} */
        var obj = Object.assign({}, defaults || {}, this.cache[name] || {});
        // if query params are specified, they override...
        if (this.fs.isO(qparams)) {
            obj.forEach(function (k) {
                if (qparams.hasOwnProperty(k)) {
                    obj[k] = qparams[k];
                }
            });
        }
        return obj;
    };
    // merge preferences:
    // The assumption here is that obj is a sparse object, and that the
    //  defined keys should overwrite the corresponding values, but any
    //  existing keys that are NOT explicitly defined here should be left
    //  alone (not deleted).
    // merge preferences:
    // The assumption here is that obj is a sparse object, and that the
    //  defined keys should overwrite the corresponding values, but any
    //  existing keys that are NOT explicitly defined here should be left
    //  alone (not deleted).
    /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    PrefsService.prototype.mergePrefs = 
    // merge preferences:
    // The assumption here is that obj is a sparse object, and that the
    //  defined keys should overwrite the corresponding values, but any
    //  existing keys that are NOT explicitly defined here should be left
    //  alone (not deleted).
    /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    function (name, obj) {
        /** @type {?} */
        var merged = this.cache[name] || {};
        this.setPrefs(name, Object.assign(merged, obj));
    };
    /**
     * Add a listener function
     * This will get called back when an 'updatePrefs' message is received on WSS
     * @param listener a function that can accept one param - data
     */
    /**
     * Add a listener function
     * This will get called back when an 'updatePrefs' message is received on WSS
     * @param {?} listener a function that can accept one param - data
     * @return {?}
     */
    PrefsService.prototype.addListener = /**
     * Add a listener function
     * This will get called back when an 'updatePrefs' message is received on WSS
     * @param {?} listener a function that can accept one param - data
     * @return {?}
     */
    function (listener) {
        this.listeners.push(listener);
    };
    /**
     * @param {?} listener
     * @return {?}
     */
    PrefsService.prototype.removeListener = /**
     * @param {?} listener
     * @return {?}
     */
    function (listener) {
        this.listeners = this.listeners.filter(function (obj) { return obj !== listener; });
    };
    PrefsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    PrefsService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: WebSocketService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ PrefsService.ngInjectableDef = i0.defineInjectable({ factory: function PrefsService_Factory() { return new PrefsService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.WebSocketService), i0.inject("Window")); }, token: PrefsService, providedIn: "root" });
    return PrefsService;
}());
export { PrefsService };
if (false) {
    /** @type {?} */
    PrefsService.prototype.handlers;
    /** @type {?} */
    PrefsService.prototype.cache;
    /** @type {?} */
    PrefsService.prototype.listeners;
    /** @type {?} */
    PrefsService.prototype.fs;
    /** @type {?} */
    PrefsService.prototype.log;
    /** @type {?} */
    PrefsService.prototype.wss;
    /** @type {?} */
    PrefsService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,