/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import { Injectable } from '@angular/core';
import { LogService } from '../log.service';
import { WebSocketService } from '../remote/websocket.service';
import * as i0 from "@angular/core";
import * as i1 from "../log.service";
import * as i2 from "../remote/websocket.service";
/**
 * A definition of Lion data
 * @record
 */
export function Lion() { }
if (false) {
    /** @type {?} */
    Lion.prototype.locale;
    /** @type {?} */
    Lion.prototype.lion;
}
/**
 * ONOS GUI -- Lion -- Localization Utilities
 */
var LionService = /** @class */ (function () {
    function LionService(log, wss) {
        var _this = this;
        this.log = log;
        this.wss = wss;
        this.ubercache = [];
        this.loadCbs = new Map([]); // A map of functions
        this.wss.bindHandlers(new Map([
            ['uberlion', function (data) { return _this.uberlion(data); }]
        ]));
        this.log.debug('LionService constructed');
    }
    /**
     * Handler for uberlion event from WSS
     */
    // A map of functions
    /**
     * Handler for uberlion event from WSS
     * @param {?} data
     * @return {?}
     */
    LionService.prototype.uberlion = 
    // A map of functions
    /**
     * Handler for uberlion event from WSS
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_1, _a;
        this.ubercache = data.lion;
        this.log.info('LION service: Locale... [' + data.locale + ']');
        this.log.info('LION service: Bundles installed...');
        for (var p in this.ubercache) {
            if (this.ubercache[p]) {
                this.log.info('            :=> ', p);
            }
        }
        try {
            // If any component had registered a callback, call it now
            // that LION is loaded
            for (var _b = tslib_1.__values(this.loadCbs.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cbname = _c.value;
                this.log.debug('Updating', cbname, 'with LION');
                this.loadCbs.get(cbname)();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.log.debug('LION service: uber-lion bundle received:', data);
    };
    /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     */
    /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     * @param {?} bundleId
     * @return {?}
     */
    LionService.prototype.bundle = /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     * @param {?} bundleId
     * @return {?}
     */
    function (bundleId) {
        /** @type {?} */
        var bundleObj = this.ubercache[bundleId];
        if (!bundleObj) {
            this.log.warn('No lion bundle registered:', bundleId);
            bundleObj = {};
        }
        return function (key) {
            return bundleObj[key] || '%' + key + '%';
        };
    };
    LionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    LionService.ctorParameters = function () { return [
        { type: LogService },
        { type: WebSocketService }
    ]; };
    /** @nocollapse */ LionService.ngInjectableDef = i0.defineInjectable({ factory: function LionService_Factory() { return new LionService(i0.inject(i1.LogService), i0.inject(i2.WebSocketService)); }, token: LionService, providedIn: "root" });
    return LionService;
}());
export { LionService };
if (false) {
    /** @type {?} */
    LionService.prototype.ubercache;
    /** @type {?} */
    LionService.prototype.loadCbs;
    /** @type {?} */
    LionService.prototype.log;
    /** @type {?} */
    LionService.prototype.wss;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvdXRpbC9saW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7OztBQUsvRCwwQkFHQzs7O0lBRkcsc0JBQVk7O0lBQ1osb0JBQVU7Ozs7O0FBTWQ7SUFnQ0kscUJBQ1ksR0FBZSxFQUNmLEdBQXFCO1FBRmpDLGlCQVFDO1FBUFcsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUNmLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBN0JqQyxjQUFTLEdBQVUsRUFBRSxDQUFDO1FBQ3RCLFlBQU8sR0FBRyxJQUFJLEdBQUcsQ0FBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUE4QjVELElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUF5QjtZQUNsRCxDQUFDLFVBQVUsRUFBRSxVQUFDLElBQUksSUFBSyxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQW5CLENBQW1CLENBQUU7U0FDL0MsQ0FBQyxDQUFDLENBQUM7UUFDSixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFoQ0Q7O09BRUc7Ozs7Ozs7SUFDSCw4QkFBUTs7Ozs7OztJQUFSLFVBQVMsSUFBVTs7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBRXBELEtBQUssSUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0o7O1lBQ0QsMERBQTBEO1lBQzFELHNCQUFzQjtZQUN0QixLQUFxQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQSxnQkFBQSw0QkFBRTtnQkFBckMsSUFBTSxNQUFNLFdBQUE7Z0JBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzthQUM5Qjs7Ozs7Ozs7O1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsMENBQTBDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQVlEOzs7T0FHRzs7Ozs7OztJQUNILDRCQUFNOzs7Ozs7SUFBTixVQUFPLFFBQWdCOztZQUNmLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUV4QyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDdEQsU0FBUyxHQUFHLEVBQUUsQ0FBQztTQUNsQjtRQUVELE9BQU8sVUFBQyxHQUFHO1lBQ1AsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDN0MsQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7Z0JBekRKLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBaEJRLFVBQVU7Z0JBQ1YsZ0JBQWdCOzs7c0JBbEJ6QjtDQXlGQyxBQTFERCxJQTBEQztTQXZEWSxXQUFXOzs7SUFFcEIsZ0NBQXNCOztJQUN0Qiw4QkFBMEM7O0lBMkJ0QywwQkFBdUI7O0lBQ3ZCLDBCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC1wcmVzZW50IE9wZW4gTmV0d29ya2luZyBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IFdlYlNvY2tldFNlcnZpY2UgfSBmcm9tICcuLi9yZW1vdGUvd2Vic29ja2V0LnNlcnZpY2UnO1xuXG4vKipcbiAqIEEgZGVmaW5pdGlvbiBvZiBMaW9uIGRhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaW9uIHtcbiAgICBsb2NhbGU6IGFueTtcbiAgICBsaW9uOiBhbnk7XG59XG5cbi8qKlxuICogT05PUyBHVUkgLS0gTGlvbiAtLSBMb2NhbGl6YXRpb24gVXRpbGl0aWVzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBMaW9uU2VydmljZSB7XG5cbiAgICB1YmVyY2FjaGU6IGFueVtdID0gW107XG4gICAgbG9hZENicyA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiB2b2lkPihbXSk7IC8vIEEgbWFwIG9mIGZ1bmN0aW9uc1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3IgdWJlcmxpb24gZXZlbnQgZnJvbSBXU1NcbiAgICAgKi9cbiAgICB1YmVybGlvbihkYXRhOiBMaW9uKSB7XG4gICAgICAgIHRoaXMudWJlcmNhY2hlID0gZGF0YS5saW9uO1xuXG4gICAgICAgIHRoaXMubG9nLmluZm8oJ0xJT04gc2VydmljZTogTG9jYWxlLi4uIFsnICsgZGF0YS5sb2NhbGUgKyAnXScpO1xuICAgICAgICB0aGlzLmxvZy5pbmZvKCdMSU9OIHNlcnZpY2U6IEJ1bmRsZXMgaW5zdGFsbGVkLi4uJyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBwIGluIHRoaXMudWJlcmNhY2hlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy51YmVyY2FjaGVbcF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5pbmZvKCcgICAgICAgICAgICA6PT4gJywgcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYW55IGNvbXBvbmVudCBoYWQgcmVnaXN0ZXJlZCBhIGNhbGxiYWNrLCBjYWxsIGl0IG5vd1xuICAgICAgICAvLyB0aGF0IExJT04gaXMgbG9hZGVkXG4gICAgICAgIGZvciAoY29uc3QgY2JuYW1lIG9mIHRoaXMubG9hZENicy5rZXlzKCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCdVcGRhdGluZycsIGNibmFtZSwgJ3dpdGggTElPTicpO1xuICAgICAgICAgICAgdGhpcy5sb2FkQ2JzLmdldChjYm5hbWUpKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnTElPTiBzZXJ2aWNlOiB1YmVyLWxpb24gYnVuZGxlIHJlY2VpdmVkOicsIGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB3c3M6IFdlYlNvY2tldFNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy53c3MuYmluZEhhbmRsZXJzKG5ldyBNYXA8c3RyaW5nLCAoZGF0YSkgPT4gdm9pZD4oW1xuICAgICAgICAgICAgWyd1YmVybGlvbicsIChkYXRhKSA9PiB0aGlzLnViZXJsaW9uKGRhdGEpIF1cbiAgICAgICAgXSkpO1xuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnTGlvblNlcnZpY2UgY29uc3RydWN0ZWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlvbiBidW5kbGUgKGZ1bmN0aW9uKSBmb3IgdGhlIGdpdmVuIGJ1bmRsZSBJRCAoc3RyaW5nKVxuICAgICAqIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgc3RyaW5nIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gICAgICovXG4gICAgYnVuZGxlKGJ1bmRsZUlkOiBzdHJpbmcpOiAoc3RyaW5nKSA9PiBzdHJpbmcge1xuICAgICAgICBsZXQgYnVuZGxlT2JqID0gdGhpcy51YmVyY2FjaGVbYnVuZGxlSWRdO1xuXG4gICAgICAgIGlmICghYnVuZGxlT2JqKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy53YXJuKCdObyBsaW9uIGJ1bmRsZSByZWdpc3RlcmVkOicsIGJ1bmRsZUlkKTtcbiAgICAgICAgICAgIGJ1bmRsZU9iaiA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChrZXkpID0+ICB7XG4gICAgICAgICAgICByZXR1cm4gYnVuZGxlT2JqW2tleV0gfHwgJyUnICsga2V5ICsgJyUnO1xuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==