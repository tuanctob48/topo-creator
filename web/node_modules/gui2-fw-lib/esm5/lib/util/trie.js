/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @record
 */
export function TrieC() { }
if (false) {
    /** @type {?} */
    TrieC.prototype.p;
    /** @type {?} */
    TrieC.prototype.s;
}
/**
 * @record
 */
export function TrieT() { }
if (false) {
    /** @type {?} */
    TrieT.prototype.k;
    /** @type {?} */
    TrieT.prototype.p;
    /** @type {?} */
    TrieT.prototype.q;
}
/** @enum {string} */
var TrieRemoved = {
    REMOVED: 'removed',
    ABSENT: 'absent',
};
export { TrieRemoved };
/** @enum {string} */
var TrieInsert = {
    ADDED: 'added',
    UPDATED: 'updated',
};
export { TrieInsert };
/** @enum {string} */
var TrieOp = {
    PLUS: '+',
    MINUS: '-',
};
export { TrieOp };
var Trie = /** @class */ (function () {
    function Trie(op, trie, word, data) {
        this.p = trie;
        this.w = word.toUpperCase();
        this.s = this.w.split('');
        this.c = { p: this.p, s: this.s },
            this.t = [];
        this.x = 0;
        this.f1 = op === TrieOp.PLUS ? this.add : this.probe;
        this.f2 = op === TrieOp.PLUS ? this.insert : this.remove;
        this.data = data;
        while (this.c.s.length) {
            this.c = this.f1(this.c);
        }
    }
    /**
     * @param {?} cAdded
     * @return {?}
     */
    Trie.prototype.add = /**
     * @param {?} cAdded
     * @return {?}
     */
    function (cAdded) {
        /** @type {?} */
        var q = cAdded.s.shift();
        /** @type {?} */
        var np = cAdded.p[q];
        if (!np) {
            cAdded.p[q] = {};
            np = cAdded.p[q];
            this.x = 1;
        }
        return { p: np, s: cAdded.s };
    };
    /**
     * @param {?} cProbed
     * @return {?}
     */
    Trie.prototype.probe = /**
     * @param {?} cProbed
     * @return {?}
     */
    function (cProbed) {
        /** @type {?} */
        var q = cProbed.s.shift();
        /** @type {?} */
        var k = Object.keys(cProbed.p).length;
        /** @type {?} */
        var np = cProbed.p[q];
        this.t.push({ q: q, k: k, p: cProbed.p });
        if (!np) {
            this.t = [];
            return { p: [], s: [] };
        }
        return { p: np, s: cProbed.s };
    };
    /**
     * @return {?}
     */
    Trie.prototype.insert = /**
     * @return {?}
     */
    function () {
        this.c.p._data = this.data;
        return this.x ? TrieInsert.ADDED : TrieInsert.UPDATED;
    };
    /**
     * @return {?}
     */
    Trie.prototype.remove = /**
     * @return {?}
     */
    function () {
        if (this.t.length) {
            this.t = this.t.reverse();
            while (this.t.length) {
                /** @type {?} */
                var d = this.t.shift();
                delete d.p[d.q];
                if (d.k > 1) {
                    this.t = [];
                }
            }
            return TrieRemoved.REMOVED;
        }
        return TrieRemoved.ABSENT;
    };
    return Trie;
}());
export { Trie };
if (false) {
    /** @type {?} */
    Trie.prototype.p;
    /** @type {?} */
    Trie.prototype.w;
    /** @type {?} */
    Trie.prototype.s;
    /** @type {?} */
    Trie.prototype.c;
    /** @type {?} */
    Trie.prototype.t;
    /** @type {?} */
    Trie.prototype.x;
    /** @type {?} */
    Trie.prototype.f1;
    /** @type {?} */
    Trie.prototype.f2;
    /** @type {?} */
    Trie.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3V0aWwvdHJpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLDJCQUdDOzs7SUFGRyxrQkFBTzs7SUFDUCxrQkFBWTs7Ozs7QUFHaEIsMkJBSUM7OztJQUhHLGtCQUFPOztJQUNQLGtCQUFPOztJQUNQLGtCQUFPOzs7O0lBSVAsU0FBVSxTQUFTO0lBQ25CLFFBQVMsUUFBUTs7Ozs7SUFJakIsT0FBUSxPQUFPO0lBQ2YsU0FBVSxTQUFTOzs7OztJQVNuQixNQUFPLEdBQUc7SUFDVixPQUFRLEdBQUc7OztBQUlmO0lBWUksY0FDSSxFQUFVLEVBQ1YsSUFBUyxFQUNULElBQVksRUFDWixJQUFVO1FBRVYsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNyRCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxD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WixpQkFBUzs7SUFDVCxpQkFBVzs7SUFDWCxpQkFBVTs7SUFDVixrQkFBcUI7O0lBQ3JCLGtCQUFzQjs7SUFDdEIsb0JBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyaWVDIHtcbiAgICBwOiBhbnk7XG4gICAgczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJpZVQge1xuICAgIGs6IGFueTtcbiAgICBwOiBhbnk7XG4gICAgcTogYW55O1xufVxuXG5leHBvcnQgZW51bSBUcmllUmVtb3ZlZCB7XG4gICAgUkVNT1ZFRCA9ICdyZW1vdmVkJyxcbiAgICBBQlNFTlQgPSAnYWJzZW50J1xufVxuXG5leHBvcnQgZW51bSBUcmllSW5zZXJ0IHtcbiAgICBBRERFRCA9ICdhZGRlZCcsXG4gICAgVVBEQVRFRCA9ICd1cGRhdGVkJ1xufVxuXG4vKipcbiAqIENvbWJpbmUgVHJpZVJlbW92ZWQgYW5kIFRyaWVJbnNlcnQgaW4gdG8gYSB1bmlvbiB0eXBlXG4gKi9cbmV4cG9ydCB0eXBlIFRyaWVBY3Rpb25zID0gVHJpZVJlbW92ZWQgfCBUcmllSW5zZXJ0O1xuXG5leHBvcnQgZW51bSBUcmllT3Age1xuICAgIFBMVVMgPSAnKycsXG4gICAgTUlOVVMgPSAnLSdcbn1cblxuXG5leHBvcnQgY2xhc3MgVHJpZSB7XG4gICAgcDogYW55O1xuICAgIHc6IHN0cmluZztcbiAgICBzOiBzdHJpbmdbXTtcbiAgICBjOiBUcmllQztcbiAgICB0OiBUcmllVFtdO1xuICAgIHg6IG51bWJlcjtcbiAgICBmMTogKFRyaWVDKSA9PiBUcmllQztcbiAgICBmMjogKCkgPT4gVHJpZUFjdGlvbnM7XG4gICAgZGF0YTogYW55O1xuXG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgb3A6IFRyaWVPcCxcbiAgICAgICAgdHJpZTogYW55LFxuICAgICAgICB3b3JkOiBzdHJpbmcsXG4gICAgICAgIGRhdGE/OiBhbnlcbiAgICApIHtcbiAgICAgICAgdGhpcy5wID0gdHJpZTtcbiAgICAgICAgdGhpcy53ID0gd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB0aGlzLnMgPSB0aGlzLncuc3BsaXQoJycpO1xuICAgICAgICB0aGlzLmMgPSB7IHA6IHRoaXMucCwgczogdGhpcy5zIH0sXG4gICAgICAgIHRoaXMudCA9IFtdO1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLmYxID0gb3AgPT09IFRyaWVPcC5QTFVTID8gdGhpcy5hZGQgOiB0aGlzLnByb2JlO1xuICAgICAgICB0aGlzLmYyID0gb3AgPT09IFRyaWVPcC5QTFVTID8gdGhpcy5pbnNlcnQgOiB0aGlzLnJlbW92ZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgd2hpbGUgKHRoaXMuYy5zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jID0gdGhpcy5mMSh0aGlzLmMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkKGNBZGRlZDogVHJpZUMpOiBUcmllQyB7XG4gICAgICAgIGNvbnN0IHEgPSBjQWRkZWQucy5zaGlmdCgpO1xuICAgICAgICBsZXQgbnAgPSBjQWRkZWQucFtxXTtcblxuICAgICAgICBpZiAoIW5wKSB7XG4gICAgICAgICAgICBjQWRkZWQucFtxXSA9IHt9O1xuICAgICAgICAgICAgbnAgPSBjQWRkZWQucFtxXTtcbiAgICAgICAgICAgIHRoaXMueCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcDogbnAsIHM6IGNBZGRlZC5zIH07XG4gICAgfVxuXG4gICAgcHJvYmUoY1Byb2JlZDogVHJpZUMpOiBUcmllQyB7XG4gICAgICAgIGNvbnN0IHEgPSBjUHJvYmVkLnMuc2hpZnQoKTtcbiAgICAgICAgY29uc3QgazogbnVtYmVyID0gT2JqZWN0LmtleXMoY1Byb2JlZC5wKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5wID0gY1Byb2JlZC5wW3FdO1xuXG4gICAgICAgIHRoaXMudC5wdXNoKHsgcTogcSwgazogaywgcDogY1Byb2JlZC5wIH0pO1xuICAgICAgICBpZiAoIW5wKSB7XG4gICAgICAgICAgICB0aGlzLnQgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiB7IHA6IFtdLCBzOiBbXSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHA6IG5wLCBzOiBjUHJvYmVkLnMgfTtcbiAgICB9XG5cbiAgICBpbnNlcnQoKTogVHJpZUluc2VydCB7XG4gICAgICAgIHRoaXMuYy5wLl9kYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy54ID8gVHJpZUluc2VydC5BRERFRCA6IFRyaWVJbnNlcnQuVVBEQVRFRDtcbiAgICB9XG5cbiAgICByZW1vdmUoKTogVHJpZVJlbW92ZWQge1xuICAgICAgICBpZiAodGhpcy50Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy50ID0gdGhpcy50LnJldmVyc2UoKTtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMudC5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkLnBbZC5xXTtcbiAgICAgICAgICAgICAgICBpZiAoZC5rID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnQgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gVHJpZVJlbW92ZWQuUkVNT1ZFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVHJpZVJlbW92ZWQuQUJTRU5UO1xuICAgIH1cbn1cbiJdfQ==