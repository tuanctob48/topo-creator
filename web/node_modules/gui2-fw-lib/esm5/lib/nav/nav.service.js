/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
import * as i3 from "@angular/common/http";
/**
 * @record
 */
export function UiView() { }
if (false) {
    /** @type {?} */
    UiView.prototype.id;
    /** @type {?} */
    UiView.prototype.icon;
    /** @type {?} */
    UiView.prototype.cat;
    /** @type {?} */
    UiView.prototype.label;
}
/**
 * ONOS GUI -- Navigation Service
 */
var NavService = /** @class */ (function () {
    function NavService(_fn_, log, httpClient) {
        this._fn_ = _fn_;
        this.log = log;
        this.httpClient = httpClient;
        this.showNav = false;
        this.uiPlatformViews = new Array();
        this.uiNetworkViews = new Array();
        this.uiOtherViews = new Array();
        this.uiHiddenViews = new Array();
        this.log.debug('NavService constructed');
    }
    /**
     * @return {?}
     */
    NavService.prototype.hideNav = /**
     * @return {?}
     */
    function () {
        this.showNav = false;
        this.log.debug('Hiding Nav menu');
    };
    /**
     * @return {?}
     */
    NavService.prototype.toggleNav = /**
     * @return {?}
     */
    function () {
        this.showNav = !this.showNav;
        if (this.showNav) {
            this.log.debug('Showing Nav menu');
        }
        else {
            this.log.debug('Hiding Nav menu');
        }
    };
    /**
     * @return {?}
     */
    NavService.prototype.getUiViews = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.uiPlatformViews = new Array();
        this.uiNetworkViews = new Array();
        this.uiOtherViews = new Array();
        this.uiHiddenViews = new Array();
        this.httpClient.get('rs/nav/uiextensions').subscribe(function (v) {
            v.forEach(function (uiView) {
                if (uiView.cat === 'PLATFORM') {
                    _this.uiPlatformViews.push(uiView);
                }
                else if (uiView.cat === 'NETWORK') {
                    if (uiView.id !== 'topo') {
                        _this.uiNetworkViews.push(uiView);
                    }
                    else {
                        _this.uiNetworkViews.push((/** @type {?} */ ({
                            id: 'topo2',
                            icon: 'nav_topo',
                            cat: 'NETWORK',
                            label: uiView.label
                        })));
                    }
                }
                else if (uiView.cat === 'HIDDEN') {
                    _this.uiHiddenViews.push(uiView);
                }
                else {
                    _this.uiOtherViews.push(uiView);
                }
            });
        });
    };
    NavService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    NavService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ NavService.ngInjectableDef = i0.defineInjectable({ factory: function NavService_Factory() { return new NavService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.HttpClient)); }, token: NavService, providedIn: "root" });
    return NavService;
}());
export { NavService };
if (false) {
    /** @type {?} */
    NavService.prototype.showNav;
    /** @type {?} */
    NavService.prototype.uiPlatformViews;
    /** @type {?} */
    NavService.prototype.uiNetworkViews;
    /** @type {?} */
    NavService.prototype.uiOtherViews;
    /** @type {?} */
    NavService.prototype.uiHiddenViews;
    /** @type {?} */
    NavService.prototype._fn_;
    /** @type {?} */
    NavService.prototype.log;
    /** @type {?} */
    NavService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9uYXYvbmF2LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWVBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7O0FBRTVDLDRCQUtDOzs7SUFKRyxvQkFBVzs7SUFDWCxzQkFBYTs7SUFDYixxQkFBWTs7SUFDWix1QkFBYzs7Ozs7QUFNbEI7SUFXSSxvQkFDWSxJQUFlLEVBQ2YsR0FBZSxFQUNmLFVBQXNCO1FBRnRCLFNBQUksR0FBSixJQUFJLENBQVc7UUFDZixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVYzQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRXZCLG9CQUFlLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUN0QyxtQkFBYyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDckMsaUJBQVksR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQ25DLGtCQUFhLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQU9oQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCw0QkFBTzs7O0lBQVA7UUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCw4QkFBUzs7O0lBQVQ7UUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3RDO2FBQU07WUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQzs7OztJQUVELCtCQUFVOzs7SUFBVjtRQUFBLGlCQTJCQztRQTFCRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDM0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQzFDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUN4QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7UUFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFXO1lBQzdELENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFjO2dCQUNyQixJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssVUFBVSxFQUFFO29CQUMzQixLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDckM7cUJBQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtvQkFDakMsSUFBSyxNQUFNLENBQUMsRUFBRSxLQUFLLE1BQU0sRUFBRTt3QkFDdkIsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7cUJBQ3BDO3lCQUFNO3dCQUNILEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLG1CQUFROzRCQUM3QixFQUFFLEVBQUUsT0FBTzs0QkFDWCxJQUFJLEVBQUUsVUFBVTs0QkFDaEIsR0FBRyxFQUFFLFNBQVM7NEJBQ2QsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO3lCQUN0QixFQUFBLENBQUMsQ0FBQztxQkFDTjtpQkFDSjtxQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFO29CQUNoQyxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbkM7cUJBQU07b0JBQ0gsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2xDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQTVESixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQWZRLFNBQVM7Z0JBQ1QsVUFBVTtnQkFGVixVQUFVOzs7cUJBaEJuQjtDQTRGQyxBQTlERCxJQThEQztTQTNEWSxVQUFVOzs7SUFDbkIsNkJBQXVCOztJQUV2QixxQ0FBc0M7O0lBQ3RDLG9DQUFxQzs7SUFDckMsa0NBQW1DOztJQUNuQyxtQ0FBb0M7O0lBR2hDLDBCQUF1Qjs7SUFDdkIseUJBQXVCOztJQUN2QixnQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEZuU2VydmljZSB9IGZyb20gJy4uL3V0aWwvZm4uc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVpVmlldyB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgY2F0OiBzdHJpbmc7XG4gICAgbGFiZWw6IHN0cmluZztcbn1cblxuLyoqXG4gKiBPTk9TIEdVSSAtLSBOYXZpZ2F0aW9uIFNlcnZpY2VcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE5hdlNlcnZpY2Uge1xuICAgIHB1YmxpYyBzaG93TmF2ID0gZmFsc2U7XG5cbiAgICB1aVBsYXRmb3JtVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuICAgIHVpTmV0d29ya1ZpZXdzID0gbmV3IEFycmF5PFVpVmlldz4oKTtcbiAgICB1aU90aGVyVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuICAgIHVpSGlkZGVuVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgX2ZuXzogRm5TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50XG4gICAgKSB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdOYXZTZXJ2aWNlIGNvbnN0cnVjdGVkJyk7XG4gICAgfVxuXG4gICAgaGlkZU5hdigpIHtcbiAgICAgICAgdGhpcy5zaG93TmF2ID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdIaWRpbmcgTmF2IG1lbnUnKTtcbiAgICB9XG5cbiAgICB0b2dnbGVOYXYoKSB7XG4gICAgICAgIHRoaXMuc2hvd05hdiA9ICF0aGlzLnNob3dOYXY7XG4gICAgICAgIGlmICh0aGlzLnNob3dOYXYpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCdTaG93aW5nIE5hdiBtZW51Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnSGlkaW5nIE5hdiBtZW51Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRVaVZpZXdzKCkge1xuICAgICAgICB0aGlzLnVpUGxhdGZvcm1WaWV3cyA9IG5ldyBBcnJheTxVaVZpZXc+KCk7XG4gICAgICAgIHRoaXMudWlOZXR3b3JrVmlld3MgPSBuZXcgQXJyYXk8VWlWaWV3PigpO1xuICAgICAgICB0aGlzLnVpT3RoZXJWaWV3cyA9IG5ldyBBcnJheTxVaVZpZXc+KCk7XG4gICAgICAgIHRoaXMudWlIaWRkZW5WaWV3cyA9IG5ldyBBcnJheTxVaVZpZXc+KCk7XG4gICAgICAgIHRoaXMuaHR0cENsaWVudC5nZXQoJ3JzL25hdi91aWV4dGVuc2lvbnMnKS5zdWJzY3JpYmUoKHY6IFVpVmlld1tdKSA9PiB7XG4gICAgICAgICAgICB2LmZvckVhY2goKHVpVmlldzogVWlWaWV3KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHVpVmlldy5jYXQgPT09ICdQTEFURk9STScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aVBsYXRmb3JtVmlld3MucHVzaCh1aVZpZXcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodWlWaWV3LmNhdCA9PT0gJ05FVFdPUksnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggdWlWaWV3LmlkICE9PSAndG9wbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWlOZXR3b3JrVmlld3MucHVzaCh1aVZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aU5ldHdvcmtWaWV3cy5wdXNoKDxVaVZpZXc+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAndG9wbzInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICduYXZfdG9wbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0OiAnTkVUV09SSycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHVpVmlldy5sYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVpVmlldy5jYXQgPT09ICdISURERU4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWlIaWRkZW5WaWV3cy5wdXNoKHVpVmlldyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aU90aGVyVmlld3MucHVzaCh1aVZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn1cbiJdfQ==