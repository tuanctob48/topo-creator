/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/** @type {?} */
var REFRESH_INTERVAL = 2000;
/** @type {?} */
var SEARCH_REGEX = '\\W';
/**
 * Model of table annotations within this table base class
 * @record
 */
export function TableAnnots() { }
if (false) {
    /** @type {?} */
    TableAnnots.prototype.noRowsMsg;
}
/**
 * A model of data returned from Web Socket in a TableResponse
 *
 * There is an interface extending from this one in the parent component
 * @record
 */
export function TableResponse() { }
if (false) {
    /** @type {?} */
    TableResponse.prototype.annots;
}
/**
 * A criteria for filtering the tableData
 * @record
 */
export function TableFilter() { }
if (false) {
    /** @type {?} */
    TableFilter.prototype.queryStr;
    /** @type {?} */
    TableFilter.prototype.queryBy;
    /** @type {?} */
    TableFilter.prototype.sortBy;
}
/** @enum {string} */
var SortDir = {
    asc: 'asc', desc: 'desc',
};
export { SortDir };
/**
 * A structure to format sort params for table
 * This is sent to WebSocket as part of table request
 * @record
 */
export function SortParams() { }
if (false) {
    /** @type {?} */
    SortParams.prototype.firstCol;
    /** @type {?} */
    SortParams.prototype.firstDir;
    /** @type {?} */
    SortParams.prototype.secondCol;
    /** @type {?} */
    SortParams.prototype.secondDir;
}
/**
 * @record
 */
export function PayloadParams() { }
if (false) {
    /** @type {?} */
    PayloadParams.prototype.devId;
}
/**
 * ONOS GUI -- Widget -- Table Base class
 * @abstract
 */
var /**
 * ONOS GUI -- Widget -- Table Base class
 * @abstract
 */
TableBaseImpl = /** @class */ (function () {
    function TableBaseImpl(fs, ls, log, wss, tag, idKey, selCb // Function
    ) {
        if (idKey === void 0) { idKey = 'id'; }
        if (selCb === void 0) { selCb = function () { return ({}); }; }
        var _this = this;
        this.fs = fs;
        this.ls = ls;
        this.log = log;
        this.wss = wss;
        this.tag = tag;
        this.idKey = idKey;
        this.selCb = selCb;
        this.changedData = [];
        // Function
        this.parentSelCb = null;
        // Function
        this.selId = undefined;
        this.tableData = [];
        // Function
        this.autoRefresh = true;
        this.autoRefreshTip = 'Toggle auto refresh'; // TODO: get LION string
        this.refreshPromise = null;
        this.handlers = [];
        this.root = tag + 's';
        this.req = tag + 'DataRequest';
        this.resp = tag + 'DataResponse';
        this.selectCallback = this.rowSelectionCb;
        this.toggleRefresh = function () {
            _this.autoRefresh = !_this.autoRefresh;
            _this.autoRefresh ? _this.startRefresh() : _this.stopRefresh();
        };
        // Mapped to the search and searchBy inputs in template
        // Changes are handled through TableFilterPipe
        this.tableDataFilter = (/** @type {?} */ ({
            queryStr: '',
            queryBy: '$',
        }));
    }
    /**
     * @return {?}
     */
    TableBaseImpl.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wss.bindHandlers(new Map([
            [this.resp, function (data) { return _this.tableDataResponseCb(data); }]
        ]));
        this.handlers.push(this.resp);
        this.annots = (/** @type {?} */ ({
            noRowsMsg: ''
        }));
        // Now send the WebSocket request and make it repeat every 2 seconds
        this.requestTableData();
        this.startRefresh();
        this.log.debug('TableBase initialized. Calling ', this.req, 'every', REFRESH_INTERVAL, 'ms');
    };
    /**
     * @return {?}
     */
    TableBaseImpl.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.wss.unbindHandlers(this.handlers);
        this.stopRefresh();
        this.ls.stop();
    };
    /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     */
    /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     * @param {?} data
     * @return {?}
     */
    TableBaseImpl.prototype.tableDataResponseCb = /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.ls.stop();
        /** @type {?} */
        var newTableData = Array.from(data[this.root]);
        this.annots.noRowsMsg = data.annots.no_rows_msg;
        // If the parents onResp() function is set then call it
        if (this.responseCallback) {
            this.responseCallback(data);
        }
        this.changedData = [];
        // checks if data changed for row flashing
        if (JSON.stringify(newTableData) !== JSON.stringify(this.tableData)) {
            this.log.debug('table data has changed');
            /** @type {?} */
            var oldTableData = this.tableData;
            this.tableData = tslib_1.__spread(newTableData); // ES6 spread syntax
            // only flash the row if the data already exists
            if (oldTableData.length > 0) {
                for (var idx in newTableData) {
                    if (!this.fs.containsObj(oldTableData, newTableData[idx])) {
                        this.changedData.push(newTableData[idx][this.idKey]);
                    }
                }
            }
        }
    };
    /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     */
    /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     * @return {?}
     */
    TableBaseImpl.prototype.requestTableData = /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     * @return {?}
     */
    function () {
        /** @type {?} */
        var p = Object.assign({}, this.sortParams, this.payloadParams);
        // Allow it to sit in pending events
        if (this.wss.isConnected()) {
            if (this.fs.debugOn('table')) {
                this.log.debug('Table data REQUEST:', this.req, p);
            }
            this.wss.sendEvent(this.req, p);
            this.ls.start();
        }
    };
    /**
     * Row Selected
     */
    /**
     * Row Selected
     * @param {?} event
     * @param {?} selRow
     * @return {?}
     */
    TableBaseImpl.prototype.rowSelectionCb = /**
     * Row Selected
     * @param {?} event
     * @param {?} selRow
     * @return {?}
     */
    function (event, selRow) {
        /** @type {?} */
        var selId = selRow[this.idKey];
        this.selId = (this.selId === selId) ? undefined : selId;
        this.log.debug('Row', selId, 'selected');
        if (this.parentSelCb) {
            this.parentSelCb(event, selRow);
        }
    };
    /**
     * autoRefresh functions
     */
    /**
     * autoRefresh functions
     * @return {?}
     */
    TableBaseImpl.prototype.startRefresh = /**
     * autoRefresh functions
     * @return {?}
     */
    function () {
        var _this = this;
        this.refreshPromise =
            setInterval(function () {
                if (!_this.ls.waiting()) {
                    if (_this.fs.debugOn('table')) {
                        _this.log.debug('Refreshing ' + _this.root + ' page');
                    }
                    _this.requestTableData();
                }
            }, REFRESH_INTERVAL);
    };
    /**
     * @return {?}
     */
    TableBaseImpl.prototype.stopRefresh = /**
     * @return {?}
     */
    function () {
        if (this.refreshPromise) {
            clearInterval(this.refreshPromise);
            this.refreshPromise = null;
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TableBaseImpl.prototype.isChanged = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return (this.fs.inArray(id, this.changedData) === -1) ? false : true;
    };
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     */
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    TableBaseImpl.prototype.dummyLion = /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return '%' + key + '%';
    };
    /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     */
    /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     * @param {?} colName
     * @return {?}
     */
    TableBaseImpl.prototype.onSort = /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     * @param {?} colName
     * @return {?}
     */
    function (colName) {
        if (this.sortParams.firstCol === colName) {
            if (this.sortParams.firstDir === SortDir.desc) {
                this.sortParams.firstDir = SortDir.asc;
                return;
            }
            else {
                this.sortParams.firstDir = SortDir.desc;
                return;
            }
        }
        else {
            this.sortParams.secondCol = this.sortParams.firstCol;
            this.sortParams.secondDir = this.sortParams.firstDir;
            this.sortParams.firstCol = colName;
            this.sortParams.firstDir = SortDir.desc;
        }
        this.log.debug('Sort params', this.sortParams);
        this.requestTableData();
    };
    /**
     * @param {?} column
     * @return {?}
     */
    TableBaseImpl.prototype.sortIcon = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (this.sortParams.firstCol === column) {
            if (this.sortParams.firstDir === SortDir.asc) {
                return 'upArrow';
            }
            else {
                return 'downArrow';
            }
        }
        else {
            return '';
        }
    };
    /**
     * De-selects the row
     */
    /**
     * De-selects the row
     * @param {?} event
     * @return {?}
     */
    TableBaseImpl.prototype.deselectRow = /**
     * De-selects the row
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.log.debug('Details panel close event');
        this.selId = event;
    };
    return TableBaseImpl;
}());
/**
 * ONOS GUI -- Widget -- Table Base class
 * @abstract
 */
export { TableBaseImpl };
if (false) {
    /** @type {?} */
    TableBaseImpl.prototype.annots;
    /** @type {?} */
    TableBaseImpl.prototype.changedData;
    /** @type {?} */
    TableBaseImpl.prototype.payloadParams;
    /** @type {?} */
    TableBaseImpl.prototype.sortParams;
    /** @type {?} */
    TableBaseImpl.prototype.selectCallback;
    /** @type {?} */
    TableBaseImpl.prototype.parentSelCb;
    /** @type {?} */
    TableBaseImpl.prototype.responseCallback;
    /** @type {?} */
    TableBaseImpl.prototype.selId;
    /** @type {?} */
    TableBaseImpl.prototype.tableData;
    /** @type {?} */
    TableBaseImpl.prototype.tableDataFilter;
    /** @type {?} */
    TableBaseImpl.prototype.toggleRefresh;
    /** @type {?} */
    TableBaseImpl.prototype.autoRefresh;
    /** @type {?} */
    TableBaseImpl.prototype.autoRefreshTip;
    /** @type {?} */
    TableBaseImpl.prototype.root;
    /** @type {?} */
    TableBaseImpl.prototype.req;
    /** @type {?} */
    TableBaseImpl.prototype.resp;
    /** @type {?} */
    TableBaseImpl.prototype.refreshPromise;
    /** @type {?} */
    TableBaseImpl.prototype.handlers;
    /** @type {?} */
    TableBaseImpl.prototype.fs;
    /** @type {?} */
    TableBaseImpl.prototype.ls;
    /** @type {?} */
    TableBaseImpl.prototype.log;
    /** @type {?} */
    TableBaseImpl.prototype.wss;
    /** @type {?} */
    TableBaseImpl.prototype.tag;
    /** @type {?} */
    TableBaseImpl.prototype.idKey;
    /** @type {?} */
    TableBaseImpl.prototype.selCb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3dpZGdldC90YWJsZS5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztJQXFCTSxnQkFBZ0IsR0FBRyxJQUFJOztJQUN2QixZQUFZLEdBQUcsS0FBSzs7Ozs7QUFLMUIsaUNBRUM7OztJQURHLGdDQUFrQjs7Ozs7Ozs7QUFRdEIsbUNBSUM7OztJQUhHLCtCQUFZOzs7Ozs7QUFRaEIsaUNBSUM7OztJQUhHLCtCQUFpQjs7SUFDakIsOEJBQWdCOztJQUNoQiw2QkFBZTs7OztJQU9mLEtBQU0sS0FBSyxFQUFFLE1BQU8sTUFBTTs7Ozs7Ozs7QUFPOUIsZ0NBS0M7OztJQUpHLDhCQUFpQjs7SUFDakIsOEJBQWtCOztJQUNsQiwrQkFBa0I7O0lBQ2xCLCtCQUFtQjs7Ozs7QUFHdkIsbUNBRUM7OztJQURHLDhCQUFjOzs7Ozs7QUFPbEI7Ozs7O0lBc0JJLHVCQUNjLEVBQWEsRUFDYixFQUFrQixFQUNsQixHQUFlLEVBQ2YsR0FBcUIsRUFDckIsR0FBVyxFQUNYLEtBQW9CLEVBQ3BCLEtBQWtCLENBQUMsV0FBVzs7UUFEOUIsc0JBQUEsRUFBQSxZQUFvQjtRQUNwQixzQkFBQSxFQUFBLHNCQUFjLE9BQUEsQ0FBQyxFQUFFLENBQUMsRUFBSixDQUFJO1FBUGhDLGlCQXlCQztRQXhCYSxPQUFFLEdBQUYsRUFBRSxDQUFXO1FBQ2IsT0FBRSxHQUFGLEVBQUUsQ0FBZ0I7UUFDbEIsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUNmLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDWCxVQUFLLEdBQUwsS0FBSyxDQUFlO1FBQ3BCLFVBQUssR0FBTCxLQUFLLENBQWE7UUExQnRCLGdCQUFXLEdBQWEsRUFBRSxDQUFDOztRQUkzQixnQkFBVyxHQUFHLElBQUksQ0FBQzs7UUFFN0IsVUFBSyxHQUFXLFNBQVMsQ0FB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IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgRm5TZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7IExvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vbGF5ZXIvbG9hZGluZy5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBXZWJTb2NrZXRTZXJ2aWNlIH0gZnJvbSAnLi4vcmVtb3RlL3dlYnNvY2tldC5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmNvbnN0IFJFRlJFU0hfSU5URVJWQUwgPSAyMDAwO1xuY29uc3QgU0VBUkNIX1JFR0VYID0gJ1xcXFxXJztcblxuLyoqXG4gKiBNb2RlbCBvZiB0YWJsZSBhbm5vdGF0aW9ucyB3aXRoaW4gdGhpcyB0YWJsZSBiYXNlIGNsYXNzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVBbm5vdHMge1xuICAgIG5vUm93c01zZzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgbW9kZWwgb2YgZGF0YSByZXR1cm5lZCBmcm9tIFdlYiBTb2NrZXQgaW4gYSBUYWJsZVJlc3BvbnNlXG4gKlxuICogVGhlcmUgaXMgYW4gaW50ZXJmYWNlIGV4dGVuZGluZyBmcm9tIHRoaXMgb25lIGluIHRoZSBwYXJlbnQgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVSZXNwb25zZSB7XG4gICAgYW5ub3RzOiBhbnk7XG4gICAgLy8gVGhlcmUgd2lsbCBiZSBvdGhlciBwYXJ0cyB0byB0aGUgcmVzcG9uc2UgZGVwZW5kaW5nIG9uIHRhYmxlIHR5cGVcbiAgICAvLyBFeHBlY3Qgb25lIGNhbGxlZCB0YWcrJ3MnIGUuZy4gZGV2aWNlcyBvciBhcHBzXG59XG5cbi8qKlxuICogQSBjcml0ZXJpYSBmb3IgZmlsdGVyaW5nIHRoZSB0YWJsZURhdGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYWJsZUZpbHRlciB7XG4gICAgcXVlcnlTdHI6IHN0cmluZztcbiAgICBxdWVyeUJ5OiBzdHJpbmc7XG4gICAgc29ydEJ5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogRW51bWVyYXRlZCB2YWx1ZXMgZm9yIHRoZSBzb3J0IGRpclxuICovXG5leHBvcnQgZW51bSBTb3J0RGlyIHtcbiAgICBhc2MgPSAnYXNjJywgZGVzYyA9ICdkZXNjJ1xufVxuXG4vKipcbiAqIEEgc3RydWN0dXJlIHRvIGZvcm1hdCBzb3J0IHBhcmFtcyBmb3IgdGFibGVcbiAqIFRoaXMgaXMgc2VudCB0byBXZWJTb2NrZXQgYXMgcGFydCBvZiB0YWJsZSByZXF1ZXN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU29ydFBhcmFtcyB7XG4gICAgZmlyc3RDb2w6IHN0cmluZztcbiAgICBmaXJzdERpcjogU29ydERpcjtcbiAgICBzZWNvbmRDb2w6IHN0cmluZztcbiAgICBzZWNvbmREaXI6IFNvcnREaXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bG9hZFBhcmFtcyB7XG4gICAgZGV2SWQ6IHN0cmluZztcbn1cblxuXG4vKipcbiAqIE9OT1MgR1VJIC0tIFdpZGdldCAtLSBUYWJsZSBCYXNlIGNsYXNzXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUYWJsZUJhc2VJbXBsIHtcbiAgICAvLyBhdHRyaWJ1dGVzIGZyb20gdGhlIGludGVyZmFjZVxuICAgIHB1YmxpYyBhbm5vdHM6IFRhYmxlQW5ub3RzO1xuICAgIHByb3RlY3RlZCBjaGFuZ2VkRGF0YTogc3RyaW5nW10gPSBbXTtcbiAgICBwcm90ZWN0ZWQgcGF5bG9hZFBhcmFtczogUGF5bG9hZFBhcmFtcztcbiAgICBwcm90ZWN0ZWQgc29ydFBhcmFtczogU29ydFBhcmFtcztcbiAgICBwdWJsaWMgc2VsZWN0Q2FsbGJhY2s7IC8vIEZ1bmN0aW9uXG4gICAgcHJvdGVjdGVkIHBhcmVudFNlbENiID0gbnVsbDtcbiAgICBwcm90ZWN0ZWQgcmVzcG9uc2VDYWxsYmFjazsgLy8gRnVuY3Rpb25cbiAgICBzZWxJZDogc3RyaW5nID0gdW5kZWZpbmVkO1xuICAgIHRhYmxlRGF0YTogYW55W10gPSBbXTtcbiAgICB0YWJsZURhdGFGaWx0ZXI6IFRhYmxlRmlsdGVyO1xuICAgIHRvZ2dsZVJlZnJlc2g7IC8vIEZ1bmN0aW9uXG4gICAgYXV0b1JlZnJlc2g6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGF1dG9SZWZyZXNoVGlwOiBzdHJpbmcgPSAnVG9nZ2xlIGF1dG8gcmVmcmVzaCc7IC8vIFRPRE86IGdldCBMSU9OIHN0cmluZ1xuXG4gICAgcmVhZG9ubHkgcm9vdDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHJlcTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHJlc3A6IHN0cmluZztcbiAgICBwcml2YXRlIHJlZnJlc2hQcm9taXNlOiBhbnkgPSBudWxsO1xuICAgIHByaXZhdGUgaGFuZGxlcnM6IHN0cmluZ1tdID0gW107XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCBmczogRm5TZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgbHM6IExvYWRpbmdTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgbG9nOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgd3NzOiBXZWJTb2NrZXRTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgdGFnOiBzdHJpbmcsXG4gICAgICAgIHByb3RlY3RlZCBpZEtleTogc3RyaW5nID0gJ2lkJyxcbiAgICAgICAgcHJvdGVjdGVkIHNlbENiID0gKCkgPT4gKHt9KSAvLyBGdW5jdGlvblxuICAgICkge1xuICAgICAgICB0aGlzLnJvb3QgPSB0YWcgKyAncyc7XG4gICAgICAgIHRoaXMucmVxID0gdGFnICsgJ0RhdGFSZXF1ZXN0JztcbiAgICAgICAgdGhpcy5yZXNwID0gdGFnICsgJ0RhdGFSZXNwb25zZSc7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RDYWxsYmFjayA9IHRoaXMucm93U2VsZWN0aW9uQ2I7XG4gICAgICAgIHRoaXMudG9nZ2xlUmVmcmVzaCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXV0b1JlZnJlc2ggPSAhdGhpcy5hdXRvUmVmcmVzaDtcbiAgICAgICAgICAgIHRoaXMuYXV0b1JlZnJlc2ggPyB0aGlzLnN0YXJ0UmVmcmVzaCgpIDogdGhpcy5zdG9wUmVmcmVzaCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIE1hcHBlZCB0byB0aGUgc2VhcmNoIGFuZCBzZWFyY2hCeSBpbnB1dHMgaW4gdGVtcGxhdGVcbiAgICAgICAgLy8gQ2hhbmdlcyBhcmUgaGFuZGxlZCB0aHJvdWdoIFRhYmxlRmlsdGVyUGlwZVxuICAgICAgICB0aGlzLnRhYmxlRGF0YUZpbHRlciA9IDxUYWJsZUZpbHRlcj57XG4gICAgICAgICAgICBxdWVyeVN0cjogJycsXG4gICAgICAgICAgICBxdWVyeUJ5OiAnJCcsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy53c3MuYmluZEhhbmRsZXJzKG5ldyBNYXA8c3RyaW5nLCAoZGF0YSkgPT4gdm9pZD4oW1xuICAgICAgICAgICAgW3RoaXMucmVzcCwgKGRhdGEpID0+IHRoaXMudGFibGVEYXRhUmVzcG9uc2VDYihkYXRhKV1cbiAgICAgICAgXSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2godGhpcy5yZXNwKTtcblxuICAgICAgICB0aGlzLmFubm90cyA9IDxUYWJsZUFubm90cz57XG4gICAgICAgICAgICBub1Jvd3NNc2c6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTm93IHNlbmQgdGhlIFdlYlNvY2tldCByZXF1ZXN0IGFuZCBtYWtlIGl0IHJlcGVhdCBldmVyeSAyIHNlY29uZHNcbiAgICAgICAgdGhpcy5yZXF1ZXN0VGFibGVEYXRhKCk7XG4gICAgICAgIHRoaXMuc3RhcnRSZWZyZXNoKCk7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdUYWJsZUJhc2UgaW5pdGlhbGl6ZWQuIENhbGxpbmcgJywgdGhpcy5yZXEsXG4gICAgICAgICAgICAnZXZlcnknLCBSRUZSRVNIX0lOVEVSVkFMLCAnbXMnKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLndzcy51bmJpbmRIYW5kbGVycyh0aGlzLmhhbmRsZXJzKTtcbiAgICAgICAgdGhpcy5zdG9wUmVmcmVzaCgpO1xuICAgICAgICB0aGlzLmxzLnN0b3AoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIHRoYXQgZXhlY3V0ZXMgd2hlbiB0aGUgdGFibGUgZGF0YSB0aGF0IHdhcyByZXF1ZXN0ZWRcbiAgICAgKiBvbiBXZWJTb2NrZXRTZXJ2aWNlIGFycml2ZXMuXG4gICAgICpcbiAgICAgKiBIYXBwZW5zIGV2ZXJ5IDIgc2Vjb25kc1xuICAgICAqL1xuICAgIHRhYmxlRGF0YVJlc3BvbnNlQ2IoZGF0YTogVGFibGVSZXNwb25zZSkge1xuICAgICAgICB0aGlzLmxzLnN0b3AoKTtcblxuICAgICAgICBjb25zdCBuZXdUYWJsZURhdGE6IGFueVtdID0gQXJyYXkuZnJvbShkYXRhW3RoaXMucm9vdF0pO1xuICAgICAgICB0aGlzLmFubm90cy5ub1Jvd3NNc2cgPSBkYXRhLmFubm90cy5ub19yb3dzX21zZztcblxuICAgICAgICAvLyBJZiB0aGUgcGFyZW50cyBvblJlc3AoKSBmdW5jdGlvbiBpcyBzZXQgdGhlbiBjYWxsIGl0XG4gICAgICAgIGlmICh0aGlzLnJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VDYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYW5nZWREYXRhID0gW107XG5cbiAgICAgICAgLy8gY2hlY2tzIGlmIGRhdGEgY2hhbmdlZCBmb3Igcm93IGZsYXNoaW5nXG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShuZXdUYWJsZURhdGEpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLnRhYmxlRGF0YSkpIHtcbiAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCd0YWJsZSBkYXRhIGhhcyBjaGFuZ2VkJyk7XG4gICAgICAgICAgICBjb25zdCBvbGRUYWJsZURhdGE6IGFueVtdID0gdGhpcy50YWJsZURhdGE7XG4gICAgICAgICAgICB0aGlzLnRhYmxlRGF0YSA9IFsuLi5uZXdUYWJsZURhdGFdOyAvLyBFUzYgc3ByZWFkIHN5bnRheFxuICAgICAgICAgICAgLy8gb25seSBmbGFzaCB0aGUgcm93IGlmIHRoZSBkYXRhIGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICBpZiAob2xkVGFibGVEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkeCBpbiBuZXdUYWJsZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmZzLmNvbnRhaW5zT2JqKG9sZFRhYmxlRGF0YSwgbmV3VGFibGVEYXRhW2lkeF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWREYXRhLnB1c2gobmV3VGFibGVEYXRhW2lkeF1bdGhpcy5pZEtleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGFibGUgRGF0YSBSZXF1ZXN0XG4gICAgICogUGFzcyBpbiBzb3J0IHBhcmFtZXRlcnMgYW5kIHRoZSBzZXQgd2lsbCBiZSByZXR1cm5lZCBzb3J0ZWRcbiAgICAgKiBJbiB0aGUgb2xkIEdVSSB0aGVyZSB3YXMgYWxzbyBhIHF1ZXJ5IHBhcmFtZXRlciwgYnV0IHRoaXMgd2FzIG5vdFxuICAgICAqIGltcGxlbWVudGVkIG9uIHRoZSBzZXJ2ZXIgZW5kXG4gICAgICovXG4gICAgcmVxdWVzdFRhYmxlRGF0YSgpIHtcbiAgICAgICAgY29uc3QgcCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc29ydFBhcmFtcywgdGhpcy5wYXlsb2FkUGFyYW1zKTtcblxuICAgICAgICAvLyBBbGxvdyBpdCB0byBzaXQgaW4gcGVuZGluZyBldmVudHNcbiAgICAgICAgaWYgKHRoaXMud3NzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZzLmRlYnVnT24oJ3RhYmxlJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnVGFibGUgZGF0YSBSRVFVRVNUOicsIHRoaXMucmVxLCBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMud3NzLnNlbmRFdmVudCh0aGlzLnJlcSwgcCk7XG4gICAgICAgICAgICB0aGlzLmxzLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSb3cgU2VsZWN0ZWRcbiAgICAgKi9cbiAgICByb3dTZWxlY3Rpb25DYihldmVudDogYW55LCBzZWxSb3c6IGFueSk6IHZvaWQge1xuICAgICAgICBjb25zdCBzZWxJZDogc3RyaW5nID0gc2VsUm93W3RoaXMuaWRLZXldO1xuICAgICAgICB0aGlzLnNlbElkID0gKHRoaXMuc2VsSWQgPT09IHNlbElkKSA/IHVuZGVmaW5lZCA6IHNlbElkO1xuICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnUm93Jywgc2VsSWQsICdzZWxlY3RlZCcpO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnRTZWxDYikge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRTZWxDYihldmVudCwgc2VsUm93KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGF1dG9SZWZyZXNoIGZ1bmN0aW9uc1xuICAgICAqL1xuICAgIHN0YXJ0UmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoUHJvbWlzZSA9XG4gICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxzLndhaXRpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mcy5kZWJ1Z09uKCd0YWJsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnUmVmcmVzaGluZyAnICsgdGhpcy5yb290ICsgJyBwYWdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VGFibGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgUkVGUkVTSF9JTlRFUlZBTCk7XG4gICAgfVxuXG4gICAgc3RvcFJlZnJlc2goKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hQcm9taXNlKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucmVmcmVzaFByb21pc2UpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0NoYW5nZWQoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuZnMuaW5BcnJheShpZCwgdGhpcy5jaGFuZ2VkRGF0YSkgPT09IC0xKSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGR1bW15IGltcGxlbWVudGF0aW9uIG9mIHRoZSBsaW9uRm4gdW50aWwgdGhlIHJlc3BvbnNlIGlzIHJlY2VpdmVkIGFuZCB0aGUgTElPTlxuICAgICAqIGJ1bmRsZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBXZWJTb2NrZXRcbiAgICAgKi9cbiAgICBkdW1teUxpb24oa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJyUnICsga2V5ICsgJyUnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgc29ydCBvcmRlciBvZiB0aGUgZGF0YSByZXR1cm5lZFxuICAgICAqXG4gICAgICogc29ydFBhcmFtcyBhcmUgcGFzc2VkIHRvIHRoZSBzZXJ2ZXIgYnkgV2ViU29ja2V0IGFuZCB0aGUgZGF0YSBpc1xuICAgICAqIHJldHVybmVkIHNvcnRlZFxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c3VhbGx5IGFzc2lnbmVkIHRvIHRoZSAoY2xpY2spIGV2ZW50IG9uIGEgY29sdW1uLCBhbmQgdGhlIGNvbHVtblxuICAgICAqIG5hbWUgcGFzc2VkIGluIGUuZy4gKGNsaWNrKT1cIm9uU29ydCgnb3JpZ2luJylcbiAgICAgKiBJZiB0aGUgY29sdW1uIHRoYXQgaXMgcGFzc2VkIGluIGlzIGFscmVhZHkgdGhlIGZpcnN0Q29sLCB0aGVuIHJldmVyc2UgaXRzIGRpcmVjdGlvblxuICAgICAqIElmIGEgbmV3IGNvbHVtbiBpcyBwYXNzZWQgaW4sIHRoZW4gbWFrZSB0aGUgZXhpc3RpbmcgY29sIHRoZSAybmQgc29ydCBvcmRlclxuICAgICAqL1xuICAgIG9uU29ydChjb2xOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuc29ydFBhcmFtcy5maXJzdENvbCA9PT0gY29sTmFtZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc29ydFBhcmFtcy5maXJzdERpciA9PT0gU29ydERpci5kZXNjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0UGFyYW1zLmZpcnN0RGlyID0gU29ydERpci5hc2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRQYXJhbXMuZmlyc3REaXIgPSBTb3J0RGlyLmRlc2M7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb3J0UGFyYW1zLnNlY29uZENvbCA9IHRoaXMuc29ydFBhcmFtcy5maXJzdENvbDtcbiAgICAgICAgICAgIHRoaXMuc29ydFBhcmFtcy5zZWNvbmREaXIgPSB0aGlzLnNvcnRQYXJhbXMuZmlyc3REaXI7XG4gICAgICAgICAgICB0aGlzLnNvcnRQYXJhbXMuZmlyc3RDb2wgPSBjb2xOYW1lO1xuICAgICAgICAgICAgdGhpcy5zb3J0UGFyYW1zLmZpcnN0RGlyID0gU29ydERpci5kZXNjO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdTb3J0IHBhcmFtcycsIHRoaXMuc29ydFBhcmFtcyk7XG4gICAgICAgIHRoaXMucmVxdWVzdFRhYmxlRGF0YSgpO1xuICAgIH1cblxuICAgIHNvcnRJY29uKGNvbHVtbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuc29ydFBhcmFtcy5maXJzdENvbCA9PT0gY29sdW1uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zb3J0UGFyYW1zLmZpcnN0RGlyID09PSBTb3J0RGlyLmFzYykge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXBBcnJvdyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bkFycm93JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlLXNlbGVjdHMgdGhlIHJvd1xuICAgICAqL1xuICAgIGRlc2VsZWN0Um93KGV2ZW50KSB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKCdEZXRhaWxzIHBhbmVsIGNsb3NlIGV2ZW50Jyk7XG4gICAgICAgIHRoaXMuc2VsSWQgPSBldmVudDtcbiAgICB9XG59XG4iXX0=