/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { PanelBaseImpl } from './panel.base';
import { Output, EventEmitter, Input } from '@angular/core';
/**
 * A generic model of the data returned from the *DetailsResponse
 * @record
 */
export function DetailsResponse() { }
if (false) {
    /** @type {?} */
    DetailsResponse.prototype.details;
}
/**
 * Extends the PanelBase abstract class specifically for showing details
 *
 * This makes another call through WSS to the server for specific
 * details to fill the panel with
 *
 * This replaces the detailspanel service in the old gui
 * @abstract
 */
var DetailsPanelBaseImpl = /** @class */ (function (_super) {
    tslib_1.__extends(DetailsPanelBaseImpl, _super);
    function DetailsPanelBaseImpl(fs, ls, log, wss, tag) {
        var _this = _super.call(this, fs, ls, log) || this;
        _this.fs = fs;
        _this.ls = ls;
        _this.log = log;
        _this.wss = wss;
        _this.tag = tag;
        _this.closeEvent = new EventEmitter();
        _this.handlers = [];
        _this.detailsData = {};
        _this.closed = false;
        _this.root = tag + 's';
        _this.req = tag + 'DetailsRequest';
        _this.resp = tag + 'DetailsResponse';
        return _this;
    }
    /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     */
    /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.init = /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     * @return {?}
     */
    function () {
        var _this = this;
        this.wss.bindHandlers(new Map([
            [this.resp, function (data) { return _this.detailsPanelResponseCb(data); }]
        ]));
        this.handlers.push(this.resp);
    };
    /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     */
    /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.destroy = /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     * @return {?}
     */
    function () {
        this.wss.unbindHandlers(this.handlers);
    };
    /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     */
    /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     * @param {?} data
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.detailsPanelResponseCb = /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.detailsData = data['details'];
    };
    /**
     * Details Panel Data Request - should be called whenever row id changes
     */
    /**
     * Details Panel Data Request - should be called whenever row id changes
     * @param {?} query
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.requestDetailsPanelData = /**
     * Details Panel Data Request - should be called whenever row id changes
     * @param {?} query
     * @return {?}
     */
    function (query) {
        this.closed = false;
        // Do not send if the Web Socket hasn't opened
        if (this.wss.isConnected()) {
            if (this.fs.debugOn('panel')) {
                this.log.debug('Details panel data REQUEST:', this.req, query);
            }
            this.wss.sendEvent(this.req, query);
        }
    };
    /**
     * this should be called when the details panel close button is clicked
     */
    /**
     * this should be called when the details panel close button is clicked
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.close = /**
     * this should be called when the details panel close button is clicked
     * @return {?}
     */
    function () {
        this.closed = true;
        this.id = null;
        this.closeEvent.emit(this.id);
    };
    DetailsPanelBaseImpl.propDecorators = {
        id: [{ type: Input }],
        closeEvent: [{ type: Output }]
    };
    return DetailsPanelBaseImpl;
}(PanelBaseImpl));
export { DetailsPanelBaseImpl };
if (false) {
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.id;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.closeEvent;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.root;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.req;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.resp;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.handlers;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.detailsData;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.closed;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.fs;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.ls;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.log;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.wss;
    /** @type {?} */
    DetailsPanelBaseImpl.prototype.tag;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsc3BhbmVsLmJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi93aWRnZXQvZGV0YWlsc3BhbmVsLmJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFvQkEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSzVELHFDQUVDOzs7SUFERyxrQ0FBYTs7Ozs7Ozs7Ozs7QUFXakI7SUFBbUQsZ0RBQWE7SUFZNUQsOEJBQ2MsRUFBYSxFQUNiLEVBQWtCLEVBQ2xCLEdBQWUsRUFDZixHQUFxQixFQUNyQixHQUFXO1FBTHpCLFlBT0ksa0JBQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsU0FJckI7UUFWYSxRQUFFLEdBQUYsRUFBRSxDQUFXO1FBQ2IsUUFBRSxHQUFGLEVBQUUsQ0FBZ0I7UUFDbEIsU0FBRyxHQUFILEdBQUcsQ0FBWTtRQUNmLFNBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLFNBQUcsR0FBSCxHQUFHLENBQVE7UUFkZixnQkFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFLMUMsY0FBUSxHQUFhLEVBQUUsQ0FBQztRQUN6QixpQkFBVyxHQUFRLEVBQUUsQ0FBQztRQUN0QixZQUFNLEdBQVksS0FBSyxDQUFDO1FBVTNCLEtBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN0QixLQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQztRQUNsQyxLQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQzs7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsbUNBQUk7Ozs7O0lBQUo7UUFBQSxpQkFLQztRQUpHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUF5QjtZQUNsRCxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBQyxJQUFJLElBQUssT0FBQSxLQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQWpDLENBQWlDLENBQUM7U0FDM0QsQ0FBQyxDQUFDLENBQUM7UUFDSixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsc0NBQU87Ozs7O0lBQVA7UUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7OztJQUNILHFEQUFzQjs7Ozs7O0lBQXRCLFVBQXVCLElBQXFCO1FBQ3hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsc0RBQXVCOzs7OztJQUF2QixVQUF3QixLQUFVO1FBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLDhDQUE4QztRQUM5QyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDeEIsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUNsRTtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsb0NBQUs7Ozs7SUFBTDtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7O3FCQXZFQSxLQUFLOzZCQUNMLE1BQU07O0lBd0VYLDJCQUFDO0NBQUEsQUEzRUQsQ0FBbUQsYUFBYSxHQTJFL0Q7U0EzRXFCLG9CQUFvQjs7O0lBRXRDLGtDQUFvQjs7SUFDcEIsMENBQWtEOztJQUVsRCxvQ0FBcUI7O0lBQ3JCLG1DQUFvQjs7SUFDcEIsb0NBQXFCOztJQUNyQix3Q0FBZ0M7O0lBQ2hDLDJDQUE2Qjs7SUFDN0Isc0NBQStCOztJQUczQixrQ0FBdUI7O0lBQ3ZCLGtDQUE0Qjs7SUFDNUIsbUNBQXlCOztJQUN6QixtQ0FBK0I7O0lBQy9CLG1DQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOC1wcmVzZW50IE9wZW4gTmV0d29ya2luZyBGb3VuZGF0aW9uXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBGblNlcnZpY2UgfSBmcm9tICcuLi91dGlsL2ZuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuLi9sYXllci9sb2FkaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IFdlYlNvY2tldFNlcnZpY2UgfSBmcm9tICcuLi9yZW1vdGUvd2Vic29ja2V0LnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQYW5lbEJhc2VJbXBsIH0gZnJvbSAnLi9wYW5lbC5iYXNlJztcbmltcG9ydCB7IE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEEgZ2VuZXJpYyBtb2RlbCBvZiB0aGUgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSAqRGV0YWlsc1Jlc3BvbnNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGV0YWlsc1Jlc3BvbnNlIHtcbiAgICBkZXRhaWxzOiBhbnk7XG59XG5cbi8qKlxuICogRXh0ZW5kcyB0aGUgUGFuZWxCYXNlIGFic3RyYWN0IGNsYXNzIHNwZWNpZmljYWxseSBmb3Igc2hvd2luZyBkZXRhaWxzXG4gKlxuICogVGhpcyBtYWtlcyBhbm90aGVyIGNhbGwgdGhyb3VnaCBXU1MgdG8gdGhlIHNlcnZlciBmb3Igc3BlY2lmaWNcbiAqIGRldGFpbHMgdG8gZmlsbCB0aGUgcGFuZWwgd2l0aFxuICpcbiAqIFRoaXMgcmVwbGFjZXMgdGhlIGRldGFpbHNwYW5lbCBzZXJ2aWNlIGluIHRoZSBvbGQgZ3VpXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEZXRhaWxzUGFuZWxCYXNlSW1wbCBleHRlbmRzIFBhbmVsQmFzZUltcGwge1xuXG4gICAgQElucHV0KCkgaWQ6IHN0cmluZztcbiAgICBAT3V0cHV0KCkgY2xvc2VFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gICAgcHJpdmF0ZSByb290OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZXE6IHN0cmluZztcbiAgICBwcml2YXRlIHJlc3A6IHN0cmluZztcbiAgICBwcml2YXRlIGhhbmRsZXJzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBkZXRhaWxzRGF0YTogYW55ID0ge307XG4gICAgcHVibGljIGNsb3NlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCBmczogRm5TZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgbHM6IExvYWRpbmdTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgbG9nOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgd3NzOiBXZWJTb2NrZXRTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgdGFnOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGZzLCBscywgbG9nKTtcbiAgICAgICAgdGhpcy5yb290ID0gdGFnICsgJ3MnO1xuICAgICAgICB0aGlzLnJlcSA9IHRhZyArICdEZXRhaWxzUmVxdWVzdCc7XG4gICAgICAgIHRoaXMucmVzcCA9IHRhZyArICdEZXRhaWxzUmVzcG9uc2UnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGRldGFpbHMgcGFuZWwgaXMgY3JlYXRlZCBzZXQgdXAgYSBsaXN0ZW5lciBvblxuICAgICAqIFdlYiBTb2NrZXQgZm9yIGRldGFpbHMgcmVzcG9uc2VzXG4gICAgICovXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy53c3MuYmluZEhhbmRsZXJzKG5ldyBNYXA8c3RyaW5nLCAoZGF0YSkgPT4gdm9pZD4oW1xuICAgICAgICAgICAgW3RoaXMucmVzcCwgKGRhdGEpID0+IHRoaXMuZGV0YWlsc1BhbmVsUmVzcG9uc2VDYihkYXRhKV1cbiAgICAgICAgXSkpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2godGhpcy5yZXNwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBkZXRhaWxzIHBhbmVsIGlzIGRlc3Ryb3llZCB0aGlzIHNob3VsZCBiZSBjYWxsZWQgdG9cbiAgICAgKiBkZS1yZWdpc3RlciBmcm9tIHRoZSBXZWJTb2NrZXRcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLndzcy51bmJpbmRIYW5kbGVycyh0aGlzLmhhbmRsZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIHRoYXQgZXhlY3V0ZXMgd2hlbiB0aGUgZGV0YWlscyBkYXRhIHRoYXQgd2FzIHJlcXVlc3RlZFxuICAgICAqIG9uIFdlYlNvY2tldFNlcnZpY2UgYXJyaXZlcy5cbiAgICAgKi9cbiAgICBkZXRhaWxzUGFuZWxSZXNwb25zZUNiKGRhdGE6IERldGFpbHNSZXNwb25zZSkge1xuICAgICAgICB0aGlzLmRldGFpbHNEYXRhID0gZGF0YVsnZGV0YWlscyddO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGFpbHMgUGFuZWwgRGF0YSBSZXF1ZXN0IC0gc2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciByb3cgaWQgY2hhbmdlc1xuICAgICAqL1xuICAgIHJlcXVlc3REZXRhaWxzUGFuZWxEYXRhKHF1ZXJ5OiBhbnkpIHtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gRG8gbm90IHNlbmQgaWYgdGhlIFdlYiBTb2NrZXQgaGFzbid0IG9wZW5lZFxuICAgICAgICBpZiAodGhpcy53c3MuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZnMuZGVidWdPbigncGFuZWwnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCdEZXRhaWxzIHBhbmVsIGRhdGEgUkVRVUVTVDonLCB0aGlzLnJlcSwgcXVlcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53c3Muc2VuZEV2ZW50KHRoaXMucmVxLCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0aGlzIHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgZGV0YWlscyBwYW5lbCBjbG9zZSBidXR0b24gaXMgY2xpY2tlZFxuICAgICAqL1xuICAgIGNsb3NlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaWQgPSBudWxsO1xuICAgICAgICB0aGlzLmNsb3NlRXZlbnQuZW1pdCh0aGlzLmlkKTtcbiAgICB9XG5cbn1cbiJdfQ==