/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Inject } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import { MastService } from '../mast/mast.service';
import { HostListener } from '@angular/core';
import * as d3 from 'd3';
/**
 * ONOS GUI -- Widget -- Table Resize Directive
 */
var TableResizeDirective = /** @class */ (function () {
    function TableResizeDirective(fs, log, mast, w) {
        this.fs = fs;
        this.log = log;
        this.mast = mast;
        this.w = w;
        this.pdg = 22;
        log.info('TableResizeDirective constructed');
    }
    /**
     * @return {?}
     */
    TableResizeDirective.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.tables = {
            thead: d3.select('div.table-header').select('table'),
            tbody: d3.select('div.table-body').select('table')
        };
        this.windowSize(this.tables);
    };
    /**
     * @param {?} tables
     * @return {?}
     */
    TableResizeDirective.prototype.windowSize = /**
     * @param {?} tables
     * @return {?}
     */
    function (tables) {
        /** @type {?} */
        var wsz = this.fs.windowSize(0, 30);
        this.adjustTable(tables, wsz.width, wsz.height);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableResizeDirective.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.windowSize(this.tables);
        return {
            h: this.w.innerHeight,
            w: this.w.innerWidth
        };
    };
    /**
     * @param {?} tables
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    TableResizeDirective.prototype.adjustTable = /**
     * @param {?} tables
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (tables, width, height) {
        this._width(tables.thead, width + 'px');
        this._width(tables.tbody, width + 'px');
        this.setHeight(tables.thead, d3.select('div.table-body'), height);
    };
    /**
     * @param {?} elem
     * @param {?} width
     * @return {?}
     */
    TableResizeDirective.prototype._width = /**
     * @param {?} elem
     * @param {?} width
     * @return {?}
     */
    function (elem, width) {
        elem.style('width', width);
    };
    /**
     * @param {?} thead
     * @param {?} body
     * @param {?} height
     * @return {?}
     */
    TableResizeDirective.prototype.setHeight = /**
     * @param {?} thead
     * @param {?} body
     * @param {?} height
     * @return {?}
     */
    function (thead, body, height) {
        /** @type {?} */
        var h = height - (this.mast.mastHeight +
            this.fs.noPxStyle(d3.select('.tabular-header'), 'height') +
            this.fs.noPxStyle(thead, 'height') + this.pdg);
        body.style('height', h + 'px');
    };
    TableResizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[onosTableResize]',
                },] },
    ];
    /** @nocollapse */
    TableResizeDirective.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: MastService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    TableResizeDirective.propDecorators = {
        onResize: [{ type: HostListener, args: ['window:resize', ['$event.target'],] }]
    };
    return TableResizeDirective;
}());
export { TableResizeDirective };
if (false) {
    /** @type {?} */
    TableResizeDirective.prototype.pdg;
    /** @type {?} */
    TableResizeDirective.prototype.tables;
    /** @type {?} */
    TableResizeDirective.prototype.fs;
    /** @type {?} */
    TableResizeDirective.prototype.log;
    /** @type {?} */
    TableResizeDirective.prototype.mast;
    /** @type {?} */
    TableResizeDirective.prototype.w;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVyZXNpemUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvd2lkZ2V0L3RhYmxlcmVzaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsT0FBTyxFQUF1QixTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7Ozs7QUFLekI7SUFRSSw4QkFBc0IsRUFBYSxFQUNyQixHQUFlLEVBQ2YsSUFBaUIsRUFDRCxDQUFNO1FBSGQsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQUNyQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUNELE1BQUMsR0FBRCxDQUFDLENBQUs7UUFOcEMsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQVFMLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7O0lBRUQsb0RBQXFCOzs7SUFBckI7UUFDSSxJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1YsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ3BELEtBQUssRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUNyRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCx5Q0FBVTs7OztJQUFWLFVBQVcsTUFBVzs7WUFDWixHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUdELHVDQUFROzs7O0lBRFIsVUFDUyxLQUFVO1FBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsT0FBTztZQUNILENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVc7WUFDckIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVTtTQUN2QixDQUFDO0lBQ04sQ0FBQzs7Ozs7OztJQUVELDBDQUFXOzs7Ozs7SUFBWCxVQUFZLE1BQVcsRUFBRSxLQUFhLEVBQUUsTUFBYztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RSxDQUFDOzs7Ozs7SUFFRCxxQ0FBTTs7Ozs7SUFBTixVQUFPLElBQUksRUFBRSxLQUFLO1FBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7OztJQUVELHdDQUFTOzs7Ozs7SUFBVCxVQUFVLEtBQVUsRUFBRSxJQUFTLEVBQUUsTUFBYzs7WUFDckMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxDQUFDO1lBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDOztnQkF0REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7aUJBQ2hDOzs7O2dCQVhRLFNBQVM7Z0JBQ1QsVUFBVTtnQkFDVixXQUFXO2dEQWtCWCxNQUFNLFNBQUMsUUFBUTs7OzJCQWtCbkIsWUFBWSxTQUFDLGVBQWUsRUFBRSxDQUFDLGVBQWUsQ0FBQzs7SUEyQnBELDJCQUFDO0NBQUEsQUF4REQsSUF3REM7U0FyRFksb0JBQW9COzs7SUFFN0IsbUNBQVM7O0lBQ1Qsc0NBQVk7O0lBRUEsa0NBQXVCOztJQUMvQixtQ0FBeUI7O0lBQ3pCLG9DQUEyQjs7SUFDM0IsaUNBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEFmdGVyQ29udGVudENoZWNrZWQsIERpcmVjdGl2ZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGblNlcnZpY2UgfSBmcm9tICcuLi91dGlsL2ZuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IE1hc3RTZXJ2aWNlIH0gZnJvbSAnLi4vbWFzdC9tYXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbi8qKlxuICogT05PUyBHVUkgLS0gV2lkZ2V0IC0tIFRhYmxlIFJlc2l6ZSBEaXJlY3RpdmVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbb25vc1RhYmxlUmVzaXplXScsXG59KVxuZXhwb3J0IGNsYXNzIFRhYmxlUmVzaXplRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG5cbiAgICBwZGcgPSAyMjtcbiAgICB0YWJsZXM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmczogRm5TZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgbG9nOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgbWFzdDogTWFzdFNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoJ1dpbmRvdycpIHByaXZhdGUgdzogYW55KSB7XG5cbiAgICAgICAgbG9nLmluZm8oJ1RhYmxlUmVzaXplRGlyZWN0aXZlIGNvbnN0cnVjdGVkJyk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICAgICAgICB0aGlzLnRhYmxlcyA9IHtcbiAgICAgICAgICAgIHRoZWFkOiBkMy5zZWxlY3QoJ2Rpdi50YWJsZS1oZWFkZXInKS5zZWxlY3QoJ3RhYmxlJyksXG4gICAgICAgICAgICB0Ym9keTogZDMuc2VsZWN0KCdkaXYudGFibGUtYm9keScpLnNlbGVjdCgndGFibGUnKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndpbmRvd1NpemUodGhpcy50YWJsZXMpO1xuICAgIH1cblxuICAgIHdpbmRvd1NpemUodGFibGVzOiBhbnkpIHtcbiAgICAgICAgY29uc3Qgd3N6ID0gdGhpcy5mcy53aW5kb3dTaXplKDAsIDMwKTtcbiAgICAgICAgdGhpcy5hZGp1c3RUYWJsZSh0YWJsZXMsIHdzei53aWR0aCwgd3N6LmhlaWdodCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsnJGV2ZW50LnRhcmdldCddKVxuICAgIG9uUmVzaXplKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgdGhpcy53aW5kb3dTaXplKHRoaXMudGFibGVzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGg6IHRoaXMudy5pbm5lckhlaWdodCxcbiAgICAgICAgICAgIHc6IHRoaXMudy5pbm5lcldpZHRoXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRqdXN0VGFibGUodGFibGVzOiBhbnksIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3dpZHRoKHRhYmxlcy50aGVhZCwgd2lkdGggKyAncHgnKTtcbiAgICAgICAgdGhpcy5fd2lkdGgodGFibGVzLnRib2R5LCB3aWR0aCArICdweCcpO1xuXG4gICAgICAgIHRoaXMuc2V0SGVpZ2h0KHRhYmxlcy50aGVhZCwgZDMuc2VsZWN0KCdkaXYudGFibGUtYm9keScpLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIF93aWR0aChlbGVtLCB3aWR0aCkge1xuICAgICAgICBlbGVtLnN0eWxlKCd3aWR0aCcsIHdpZHRoKTtcbiAgICB9XG5cbiAgICBzZXRIZWlnaHQodGhlYWQ6IGFueSwgYm9keTogYW55LCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBoID0gaGVpZ2h0IC0gKHRoaXMubWFzdC5tYXN0SGVpZ2h0ICtcbiAgICAgICAgICAgIHRoaXMuZnMubm9QeFN0eWxlKGQzLnNlbGVjdCgnLnRhYnVsYXItaGVhZGVyJyksICdoZWlnaHQnKSArXG4gICAgICAgICAgICB0aGlzLmZzLm5vUHhTdHlsZSh0aGVhZCwgJ2hlaWdodCcpICsgdGhpcy5wZGcpO1xuICAgICAgICBib2R5LnN0eWxlKCdoZWlnaHQnLCBoICsgJ3B4Jyk7XG4gICAgfVxuXG59XG4iXX0=