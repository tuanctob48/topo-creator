/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
/** @type {?} */
var PADMOBILE = 16;
/**
 * ONOS GUI -- Masthead Service
 */
var MastService = /** @class */ (function () {
    function MastService(fs, log) {
        this.fs = fs;
        this.log = log;
        this.mastHeight = 48;
        if (this.fs.isMobile()) {
            this.mastHeight += PADMOBILE;
        }
        this.log.debug('MastService constructed');
    }
    MastService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    MastService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService }
    ]; };
    /** @nocollapse */ MastService.ngInjectableDef = i0.defineInjectable({ factory: function MastService_Factory() { return new MastService(i0.inject(i1.FnService), i0.inject(i2.LogService)); }, token: MastService, providedIn: "root" });
    return MastService;
}());
export { MastService };
if (false) {
    /** @type {?} */
    MastService.prototype.mastHeight;
    /** @type {?} */
    MastService.prototype.fs;
    /** @type {?} */
    MastService.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZ3VpMi1mdy1saWIvIiwic291cmNlcyI6WyJsaWIvbWFzdC9tYXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWVBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7SUFFdEMsU0FBUyxHQUFHLEVBQUU7Ozs7QUFLcEI7SUFPRSxxQkFDVSxFQUFhLEVBQ2IsR0FBZTtRQURmLE9BQUUsR0FBRixFQUFFLENBQVc7UUFDYixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBSmxCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFNckIsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM1QyxDQUFDOztnQkFoQkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFWUSxTQUFTO2dCQUNULFVBQVU7OztzQkFqQm5CO0NBMENDLEFBbEJELElBa0JDO1NBZlksV0FBVzs7O0lBRXRCLGlDQUF1Qjs7SUFHckIseUJBQXFCOztJQUNyQiwwQkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm5TZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2cuc2VydmljZSc7XG5cbmNvbnN0IFBBRE1PQklMRSA9IDE2O1xuXG4vKipcbiAqIE9OT1MgR1VJIC0tIE1hc3RoZWFkIFNlcnZpY2VcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE1hc3RTZXJ2aWNlIHtcblxuICBwdWJsaWMgbWFzdEhlaWdodCA9IDQ4O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZnM6IEZuU2VydmljZSxcbiAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZVxuICApIHtcbiAgICBpZiAodGhpcy5mcy5pc01vYmlsZSgpKSB7XG4gICAgICAgIHRoaXMubWFzdEhlaWdodCArPSBQQURNT0JJTEU7XG4gICAgfVxuXG4gICAgdGhpcy5sb2cuZGVidWcoJ01hc3RTZXJ2aWNlIGNvbnN0cnVjdGVkJyk7XG4gIH1cblxufVxuIl19