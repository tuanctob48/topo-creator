/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable, Inject } from '@angular/core';
import { FnService } from '../util/fn.service';
import { GlyphService } from '../svg/glyph.service';
import { LogService } from '../log.service';
import { UrlFnService } from './urlfn.service';
import { WSock } from './wsock.service';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../svg/glyph.service";
import * as i3 from "../log.service";
import * as i4 from "./urlfn.service";
import * as i5 from "./wsock.service";
/**
 * Event Type structure for the WebSocketService
 * @record
 */
export function EventType() { }
if (false) {
    /** @type {?} */
    EventType.prototype.event;
    /** @type {?} */
    EventType.prototype.payload;
}
/**
 * @record
 */
export function Callback() { }
if (false) {
    /** @type {?} */
    Callback.prototype.id;
    /** @type {?} */
    Callback.prototype.error;
    /**
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    Callback.prototype.cb = function (host, url) { };
}
/**
 * @record
 */
function ClusterNode() { }
if (false) {
    /** @type {?} */
    ClusterNode.prototype.id;
    /** @type {?} */
    ClusterNode.prototype.ip;
    /** @type {?} */
    ClusterNode.prototype.m_uiAttached;
}
/**
 * @record
 */
function Glyph() { }
if (false) {
    /** @type {?} */
    Glyph.prototype.id;
    /** @type {?} */
    Glyph.prototype.viewbox;
    /** @type {?} */
    Glyph.prototype.path;
}
/**
 * @record
 */
function Bootstrap() { }
if (false) {
    /** @type {?} */
    Bootstrap.prototype.user;
    /** @type {?} */
    Bootstrap.prototype.clusterNodes;
    /** @type {?} */
    Bootstrap.prototype.glyphs;
}
/**
 * @record
 */
function ErrorData() { }
if (false) {
    /** @type {?} */
    ErrorData.prototype.message;
}
/**
 * @record
 */
export function WsOptions() { }
if (false) {
    /** @type {?} */
    WsOptions.prototype.wsport;
}
/**
 * ONOS GUI -- Remote -- Web Socket Service
 *
 * To see debug messages add ?debug=txrx to the URL
 */
var WebSocketService = /** @class */ (function () {
    function WebSocketService(fs, gs, log, ufs, wsock, window) {
        var _this = this;
        this.fs = fs;
        this.gs = gs;
        this.log = log;
        this.ufs = ufs;
        this.wsock = wsock;
        this.window = window;
        // web socket options
        this.ws = null; // web socket reference
        // web socket reference
        this.wsUp = false; // web socket is good to go
        // web socket is good to go
        // A map of event handler bindings - names and functions (that accept data and return void)
        this.handlers = new Map([]);
        this.pendingEvents = []; // events TX'd while socket not up
        // web socket URL
        this.clusterNodes = []; // ONOS instances data for failover
        // ONOS instances data for failover
        this.clusterIndex = -1; // the instance to which we are connected
        // the instance to which we are connected
        this.glyphs = [];
        this.connectRetries = 0; // limit our attempts at reconnecting
        // limit our attempts at reconnecting
        // A map of registered Callbacks for websocket open()
        this.openListeners = new Map([]);
        this.nextListenerId = 1; // internal ID for open listeners
        // internal ID for open listeners
        this.loggedInUser = null; // name of logged-in user
        this.log.debug(window.location.hostname);
        // Bind the boot strap event by default
        this.bindHandlers(new Map([
            ['bootstrap', function (data) { return _this.bootstrap(data); }],
            ['error', function (data) { return _this.error(data); }]
        ]));
        this.log.debug('WebSocketService constructed');
    }
    /**
     * built-in handler for the 'boostrap' event
     */
    // The veil component delegate
    /**
     * built-in handler for the 'boostrap' event
     * @param {?} data
     * @return {?}
     */
    WebSocketService.prototype.bootstrap = 
    // The veil component delegate
    /**
     * built-in handler for the 'boostrap' event
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.loggedInUser = data.user;
        this.log.info('Websocket connection bootstraped', data);
        this.clusterNodes = data.clusterNodes;
        this.clusterNodes.forEach(function (d, i) {
            if (d.m_uiAttached) {
                _this.clusterIndex = i;
                _this.log.info('Connected to cluster node ' + d.ip);
                // TODO: add connect info to masthead somewhere
            }
        });
        this.glyphs = data.glyphs;
        /** @type {?} */
        var glyphsMap = new Map([]);
        this.glyphs.forEach(function (d) {
            glyphsMap.set('_' + d.id, d.viewbox);
            glyphsMap.set(d.id, d.path);
            _this.gs.registerGlyphs(glyphsMap);
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    WebSocketService.prototype.error = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var m = data.message || 'error from server';
        this.log.error(m, data);
        // Unrecoverable error - throw up the veil...
        if (this.vcd) {
            this.vcd.show([
                'Oops!',
                'Server reports error...',
                m,
            ]);
        }
    };
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     */
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     * @return {?}
     */
    WebSocketService.prototype.handleOpen = 
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     * @return {?}
     */
    function () {
        var _this = this;
        this.log.info('Web socket open - ', this.url);
        // Hide the veil
        if (this.vcd) {
            this.vcd.hide();
        }
        if (this.fs.debugOn('txrx')) {
            this.log.debug('Sending ' + this.pendingEvents.length + ' pending event(s)...');
        }
        this.pendingEvents.forEach(function (ev) {
            _this.send(ev);
        });
        this.pendingEvents = [];
        this.connectRetries = 0;
        this.wsUp = true;
        this.informListeners(this.host, this.url);
    };
    /**
     * Function called when WebSocket send a message
     */
    /**
     * Function called when WebSocket send a message
     * @param {?} msgEvent
     * @return {?}
     */
    WebSocketService.prototype.handleMessage = /**
     * Function called when WebSocket send a message
     * @param {?} msgEvent
     * @return {?}
     */
    function (msgEvent) {
        /** @type {?} */
        var ev;
        /** @type {?} */
        var h;
        try {
            ev = JSON.parse(msgEvent.data);
        }
        catch (e) {
            this.log.error('Message.data is not valid JSON', msgEvent.data, e);
            return null;
        }
        if (this.fs.debugOn('txrx')) {
            this.log.debug(' << *Rx* ', ev.event, ev.payload);
        }
        h = this.handlers.get(ev.event);
        if (h) {
            try {
                h(ev.payload);
            }
            catch (e) {
                this.log.error('Problem handling event:', ev, e);
                return null;
            }
        }
        else {
            this.log.warn('Unhandled event:', ev);
        }
    };
    /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     */
    /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     * @return {?}
     */
    WebSocketService.prototype.handleClose = /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     * @return {?}
     */
    function () {
        this.log.warn('Web socket closed');
        if (this.lcd) {
            this.lcd.stop();
        }
        this.wsUp = false;
        /** @type {?} */
        var gsucc;
        if (gsucc = this.findGuiSuccessor()) {
            this.url = this.createWebSocket(this.webSockOpts, gsucc);
        }
        else {
            // If no controllers left to contact, show the Veil...
            if (this.vcd) {
                this.vcd.show([
                    'Oops!',
                    'Web-socket connection to server closed...',
                    'Try refreshing the page.',
                ]);
            }
        }
    };
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     */
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     * @return {?}
     */
    WebSocketService.prototype.findGuiSuccessor = 
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ncn = this.clusterNodes.length;
        /** @type {?} */
        var ip;
        /** @type {?} */
        var node;
        while (this.connectRetries < ncn && !ip) {
            this.connectRetries++;
            this.clusterIndex = (this.clusterIndex + 1) % ncn;
            node = this.clusterNodes[this.clusterIndex];
            ip = node && node.ip;
        }
        return ip;
    };
    /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     */
    /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    WebSocketService.prototype.informListeners = /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    function (host, url) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.openListeners.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), key = _d[0], cb = _d[1];
                cb.cb(host, url);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    WebSocketService.prototype.send = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.fs.debugOn('txrx')) {
            this.log.debug(' *Tx* >> ', ev.event, ev.payload);
        }
        this.ws.send(JSON.stringify(ev));
    };
    /**
     * Check if there are no WSS event handlers left
     */
    /**
     * Check if there are no WSS event handlers left
     * @param {?} handlers
     * @param {?} caller
     * @return {?}
     */
    WebSocketService.prototype.noHandlersWarn = /**
     * Check if there are no WSS event handlers left
     * @param {?} handlers
     * @param {?} caller
     * @return {?}
     */
    function (handlers, caller) {
        if (!handlers || handlers.size === 0) {
            this.log.warn('WSS.' + caller + '(): no event handlers');
            return true;
        }
        return false;
    };
    /* ===================
     * === API Functions
     */
    /**
     * Required for unit tests to set to known state
     */
    /* ===================
         * === API Functions
         */
    /**
     * Required for unit tests to set to known state
     * @return {?}
     */
    WebSocketService.prototype.resetState = /* ===================
         * === API Functions
         */
    /**
     * Required for unit tests to set to known state
     * @return {?}
     */
    function () {
        this.webSockOpts = undefined;
        this.ws = null;
        this.wsUp = false;
        this.host = undefined;
        this.url = undefined;
        this.pendingEvents = [];
        this.handlers.clear();
        this.clusterNodes = [];
        this.clusterIndex = -1;
        this.glyphs = [];
        this.connectRetries = 0;
        this.openListeners.clear();
        this.nextListenerId = 1;
    };
    /*
     * Currently supported opts:
     *  wsport: web socket port (other than default 8181)
     *  host:   if defined, is the host address to use
     */
    /*
         * Currently supported opts:
         *  wsport: web socket port (other than default 8181)
         *  host:   if defined, is the host address to use
         */
    /**
     * @param {?=} opts
     * @param {?=} host
     * @return {?}
     */
    WebSocketService.prototype.createWebSocket = /*
         * Currently supported opts:
         *  wsport: web socket port (other than default 8181)
         *  host:   if defined, is the host address to use
         */
    /**
     * @param {?=} opts
     * @param {?=} host
     * @return {?}
     */
    function (opts, host) {
        var _this = this;
        this.webSockOpts = opts; // preserved for future calls
        this.host = host === undefined ? this.window.location.host : host;
        this.url = this.ufs.wsUrl('core', opts === undefined ? '' : opts['wsport'].toString(), host);
        this.log.debug('Attempting to open websocket to: ' + this.url);
        this.ws = this.wsock.newWebSocket(this.url);
        if (this.ws) {
            // fat arrow => syntax means that the 'this' context passed will
            // be of WebSocketService, not the WebSocket
            this.ws.onopen = (function () { return _this.handleOpen(); });
            this.ws.onmessage = (function (msgEvent) { return _this.handleMessage(msgEvent); });
            this.ws.onclose = (function () { return _this.handleClose(); });
            /** @type {?} */
            var authToken = this.window['onosAuth'];
            this.log.debug('Auth Token for opening WebSocket', authToken);
            this.sendEvent('authentication', { token: authToken });
        }
        // Note: Wsock logs an error if the new WebSocket call fails
        return this.url;
    };
    /**
     * Tell the WebSocket to close - this should call the handleClose() method
     */
    /**
     * Tell the WebSocket to close - this should call the handleClose() method
     * @return {?}
     */
    WebSocketService.prototype.closeWebSocket = /**
     * Tell the WebSocket to close - this should call the handleClose() method
     * @return {?}
     */
    function () {
        this.ws.close();
    };
    /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     */
    /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     * @param {?} handlerMap
     * @return {?}
     */
    WebSocketService.prototype.bindHandlers = /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     * @param {?} handlerMap
     * @return {?}
     */
    function (handlerMap) {
        var e_2, _a;
        /** @type {?} */
        var dups = [];
        if (this.noHandlersWarn(handlerMap, 'bindHandlers')) {
            return null;
        }
        try {
            for (var handlerMap_1 = tslib_1.__values(handlerMap), handlerMap_1_1 = handlerMap_1.next(); !handlerMap_1_1.done; handlerMap_1_1 = handlerMap_1.next()) {
                var _b = tslib_1.__read(handlerMap_1_1.value, 2), eventId = _b[0], api = _b[1];
                this.log.debug('Adding handler for ', eventId);
                /** @type {?} */
                var fn = this.fs.isF(api) || this.fs.isF(api[eventId]);
                if (!fn) {
                    this.log.warn(eventId + ' handler not a function');
                    return;
                }
                if (this.handlers.get(eventId)) {
                    dups.push(eventId);
                }
                else {
                    this.handlers.set(eventId, fn);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (handlerMap_1_1 && !handlerMap_1_1.done && (_a = handlerMap_1.return)) _a.call(handlerMap_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (dups.length) {
            this.log.warn('duplicate bindings ignored:', dups);
        }
    };
    /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     */
    /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     * @param {?} handlerIds
     * @return {?}
     */
    WebSocketService.prototype.unbindHandlers = /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     * @param {?} handlerIds
     * @return {?}
     */
    function (handlerIds) {
        var e_3, _a;
        if (handlerIds.length === 0) {
            this.log.warn('WSS.unbindHandlers(): no event handlers');
            return null;
        }
        try {
            for (var handlerIds_1 = tslib_1.__values(handlerIds), handlerIds_1_1 = handlerIds_1.next(); !handlerIds_1_1.done; handlerIds_1_1 = handlerIds_1.next()) {
                var eventId = handlerIds_1_1.value;
                this.handlers.delete(eventId);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (handlerIds_1_1 && !handlerIds_1_1.done && (_a = handlerIds_1.return)) _a.call(handlerIds_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @param {?} handlerId
     * @return {?}
     */
    WebSocketService.prototype.isHandling = /**
     * @param {?} handlerId
     * @return {?}
     */
    function (handlerId) {
        return this.handlers.get(handlerId) !== undefined;
    };
    /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     */
    /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     * @param {?} callback
     * @return {?}
     */
    WebSocketService.prototype.addOpenListener = /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        /** @type {?} */
        var id = this.nextListenerId++;
        /** @type {?} */
        var cb = this.fs.isF(callback);
        /** @type {?} */
        var o = (/** @type {?} */ ({ id: id, cb: cb }));
        if (cb) {
            this.openListeners.set(id, o);
        }
        else {
            this.log.error('WSS.addOpenListener(): callback not a function');
            o.error = 'No callback defined';
        }
        return o;
    };
    /**
     * Remove a listener of WebSocket opening
     */
    /**
     * Remove a listener of WebSocket opening
     * @param {?} lsnr
     * @return {?}
     */
    WebSocketService.prototype.removeOpenListener = /**
     * Remove a listener of WebSocket opening
     * @param {?} lsnr
     * @return {?}
     */
    function (lsnr) {
        /** @type {?} */
        var id = this.fs.isO(lsnr) && lsnr.id;
        /** @type {?} */
        var o;
        if (!id) {
            this.log.warn('WSS.removeOpenListener(): invalid listener', lsnr);
            return null;
        }
        o = this.openListeners[id];
        if (o) {
            this.openListeners.delete(id);
        }
    };
    /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     */
    /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     * @param {?} evType
     * @param {?} payload
     * @return {?}
     */
    WebSocketService.prototype.sendEvent = /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     * @param {?} evType
     * @param {?} payload
     * @return {?}
     */
    function (evType, payload) {
        /** @type {?} */
        var ev = (/** @type {?} */ ({
            event: evType,
            payload: payload
        }));
        if (this.wsUp) {
            this.send(ev);
        }
        else {
            this.pendingEvents.push(ev);
        }
    };
    /**
     * Binds the veil service as a delegate.
     */
    /**
     * Binds the veil service as a delegate.
     * @param {?} vd
     * @return {?}
     */
    WebSocketService.prototype.setVeilDelegate = /**
     * Binds the veil service as a delegate.
     * @param {?} vd
     * @return {?}
     */
    function (vd) {
        this.vcd = vd;
    };
    /**
     * Binds the loading service as a delegate
     */
    /**
     * Binds the loading service as a delegate
     * @param {?} ld
     * @return {?}
     */
    WebSocketService.prototype.setLoadingDelegate = /**
     * Binds the loading service as a delegate
     * @param {?} ld
     * @return {?}
     */
    function (ld) {
        // TODO - Investigate changing Loading Service to LoadingComponent
        this.log.debug('Loading delegate set', ld);
        this.lcd = ld;
    };
    /**
     * @return {?}
     */
    WebSocketService.prototype.isConnected = /**
     * @return {?}
     */
    function () {
        return this.wsUp;
    };
    WebSocketService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    WebSocketService.ctorParameters = function () { return [
        { type: FnService },
        { type: GlyphService },
        { type: LogService },
        { type: UrlFnService },
        { type: WSock },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ WebSocketService.ngInjectableDef = i0.defineInjectable({ factory: function WebSocketService_Factory() { return new WebSocketService(i0.inject(i1.FnService), i0.inject(i2.GlyphService), i0.inject(i3.LogService), i0.inject(i4.UrlFnService), i0.inject(i5.WSock), i0.inject("Window")); }, token: WebSocketService, providedIn: "root" });
    return WebSocketService;
}());
export { WebSocketService };
if (false) {
    /** @type {?} */
    WebSocketService.prototype.webSockOpts;
    /** @type {?} */
    WebSocketService.prototype.ws;
    /** @type {?} */
    WebSocketService.prototype.wsUp;
    /** @type {?} */
    WebSocketService.prototype.handlers;
    /** @type {?} */
    WebSocketService.prototype.pendingEvents;
    /** @type {?} */
    WebSocketService.prototype.host;
    /** @type {?} */
    WebSocketService.prototype.url;
    /** @type {?} */
    WebSocketService.prototype.clusterNodes;
    /** @type {?} */
    WebSocketService.prototype.clusterIndex;
    /** @type {?} */
    WebSocketService.prototype.glyphs;
    /** @type {?} */
    WebSocketService.prototype.connectRetries;
    /** @type {?} */
    WebSocketService.prototype.openListeners;
    /** @type {?} */
    WebSocketService.prototype.nextListenerId;
    /** @type {?} */
    WebSocketService.prototype.loggedInUser;
    /** @type {?} */
    WebSocketService.prototype.lcd;
    /** @type {?} */
    WebSocketService.prototype.vcd;
    /** @type {?} */
    WebSocketService.prototype.fs;
    /** @type {?} */
    WebSocketService.prototype.gs;
    /** @type {?} */
    WebSocketService.prototype.log;
    /** @type {?} */
    WebSocketService.prototype.ufs;
    /** @type {?} */
    WebSocketService.prototype.wsock;
    /** @type {?} */
    WebSocketService.prototype.window;
}
//# sourceMappingURL=data:application/json;base64,