/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { LogService } from '../log.service';
import * as i0 from "@angular/core";
import * as i1 from "../log.service";
/**
 * ONOS GUI -- Remote -- Web Socket Wrapper Service
 *
 * This service provided specifically so that it can be mocked in unit tests.
 */
var WSock = /** @class */ (function () {
    function WSock(log) {
        this.log = log;
        this.log.debug('WSockService constructed');
    }
    /**
     * @param {?} url
     * @return {?}
     */
    WSock.prototype.newWebSocket = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var ws = null;
        try {
            ws = new WebSocket(url);
        }
        catch (e) {
            this.log.error('Unable to create web socket:', e);
        }
        return ws;
    };
    WSock.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    WSock.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    /** @nocollapse */ WSock.ngInjectableDef = i0.defineInjectable({ factory: function WSock_Factory() { return new WSock(i0.inject(i1.LogService)); }, token: WSock, providedIn: "root" });
    return WSock;
}());
export { WSock };
if (false) {
    /** @type {?} */
    WSock.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3NvY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3JlbW90ZS93c29jay5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7QUFPNUM7SUFLRSxlQUNVLEdBQWU7UUFBZixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBRXZCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7SUFHRCw0QkFBWTs7OztJQUFaLFVBQWEsR0FBRzs7WUFDUixFQUFFLEdBQUcsSUFBSTtRQUNiLElBQUk7WUFDQSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0I7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOztnQkFwQkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFUUSxVQUFVOzs7Z0JBaEJuQjtDQTZDQyxBQXRCRCxJQXNCQztTQW5CWSxLQUFLOzs7SUFHZCxvQkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uL2xvZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBPTk9TIEdVSSAtLSBSZW1vdGUgLS0gV2ViIFNvY2tldCBXcmFwcGVyIFNlcnZpY2VcbiAqXG4gKiBUaGlzIHNlcnZpY2UgcHJvdmlkZWQgc3BlY2lmaWNhbGx5IHNvIHRoYXQgaXQgY2FuIGJlIG1vY2tlZCBpbiB1bml0IHRlc3RzLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgV1NvY2sge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbG9nOiBMb2dTZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLmxvZy5kZWJ1ZygnV1NvY2tTZXJ2aWNlIGNvbnN0cnVjdGVkJyk7XG4gIH1cblxuXG4gIG5ld1dlYlNvY2tldCh1cmwpIHtcbiAgICAgIGxldCB3cyA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICAgIHdzID0gbmV3IFdlYlNvY2tldCh1cmwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMubG9nLmVycm9yKCdVbmFibGUgdG8gY3JlYXRlIHdlYiBzb2NrZXQ6JywgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3M7XG4gIH1cblxufVxuIl19