/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable, Inject } from '@angular/core';
import { LogService } from '../log.service';
import * as i0 from "@angular/core";
import * as i1 from "../log.service";
/** @type {?} */
var UICONTEXT = '/onos/ui/';
/** @type {?} */
var RSSUFFIX = UICONTEXT + 'rs/';
/** @type {?} */
var WSSUFFIX = UICONTEXT + 'websock/';
/**
 * ONOS GUI -- Remote -- General Purpose URL Functions
 */
var UrlFnService = /** @class */ (function () {
    function UrlFnService(log, w) {
        this.log = log;
        this.w = w;
        this.log.debug('UrlFnService constructed');
    }
    /**
     * @param {?} protocol
     * @return {?}
     */
    UrlFnService.prototype.matchSecure = /**
     * @param {?} protocol
     * @return {?}
     */
    function (protocol) {
        /** @type {?} */
        var p = this.w.location.protocol;
        /** @type {?} */
        var secure = (p === 'https' || p === 'wss');
        return secure ? protocol + 's' : protocol;
    };
    /* A little bit of funky here. It is possible that ONOS sits
     * behind a proxy and has an app prefix, e.g.
     *      http://host:port/my/app/onos/ui...
     * This bit of regex grabs everything after the host:port and
     * before the UICONTEXT (/onos/ui/) and uses that as an app
     * prefix by inserting it back into the WS URL.
     * If no prefix, then no insert.
     */
    /* A little bit of funky here. It is possible that ONOS sits
         * behind a proxy and has an app prefix, e.g.
         *      http://host:port/my/app/onos/ui...
         * This bit of regex grabs everything after the host:port and
         * before the UICONTEXT (/onos/ui/) and uses that as an app
         * prefix by inserting it back into the WS URL.
         * If no prefix, then no insert.
         */
    /**
     * @param {?} protocol
     * @param {?=} port
     * @param {?=} host
     * @return {?}
     */
    UrlFnService.prototype.urlBase = /* A little bit of funky here. It is possible that ONOS sits
         * behind a proxy and has an app prefix, e.g.
         *      http://host:port/my/app/onos/ui...
         * This bit of regex grabs everything after the host:port and
         * before the UICONTEXT (/onos/ui/) and uses that as an app
         * prefix by inserting it back into the WS URL.
         * If no prefix, then no insert.
         */
    /**
     * @param {?} protocol
     * @param {?=} port
     * @param {?=} host
     * @return {?}
     */
    function (protocol, port, host) {
        if (port === void 0) { port = ''; }
        if (host === void 0) { host = ''; }
        /** @type {?} */
        var match = this.w.location.href.match('.*//[^/]+/(.+)' + UICONTEXT);
        /** @type {?} */
        var appPrefix = match ? '/' + match[1] : '';
        return this.matchSecure(protocol) +
            '://' +
            (host === '' ? this.w.location.hostname : host) +
            ':' +
            (port === '' ? this.w.location.port : port) +
            appPrefix;
    };
    /**
     * @param {?} suffix
     * @return {?}
     */
    UrlFnService.prototype.httpPrefix = /**
     * @param {?} suffix
     * @return {?}
     */
    function (suffix) {
        return this.urlBase('http') + suffix;
    };
    /**
     * @param {?} suffix
     * @param {?} wsport
     * @param {?} host
     * @return {?}
     */
    UrlFnService.prototype.wsPrefix = /**
     * @param {?} suffix
     * @param {?} wsport
     * @param {?} host
     * @return {?}
     */
    function (suffix, wsport, host) {
        return this.urlBase('ws', wsport, host) + suffix;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    UrlFnService.prototype.rsUrl = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.httpPrefix(RSSUFFIX) + path;
    };
    /**
     * @param {?} path
     * @param {?=} wsport
     * @param {?=} host
     * @return {?}
     */
    UrlFnService.prototype.wsUrl = /**
     * @param {?} path
     * @param {?=} wsport
     * @param {?=} host
     * @return {?}
     */
    function (path, wsport, host) {
        return this.wsPrefix(WSSUFFIX, wsport, host) + path;
    };
    UrlFnService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    UrlFnService.ctorParameters = function () { return [
        { type: LogService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ UrlFnService.ngInjectableDef = i0.defineInjectable({ factory: function UrlFnService_Factory() { return new UrlFnService(i0.inject(i1.LogService), i0.inject("Window")); }, token: UrlFnService, providedIn: "root" });
    return UrlFnService;
}());
export { UrlFnService };
if (false) {
    /** @type {?} */
    UrlFnService.prototype.log;
    /** @type {?} */
    UrlFnService.prototype.w;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsZm4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL3JlbW90ZS91cmxmbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7SUFFdEMsU0FBUyxHQUFHLFdBQVc7O0lBQ3ZCLFFBQVEsR0FBRyxTQUFTLEdBQUcsS0FBSzs7SUFDNUIsUUFBUSxHQUFHLFNBQVMsR0FBRyxVQUFVOzs7O0FBS3ZDO0lBSUksc0JBQ1ksR0FBZSxFQUNHLENBQU07UUFEeEIsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUNHLE1BQUMsR0FBRCxDQUFDLENBQUs7UUFFaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUVELGtDQUFXOzs7O0lBQVgsVUFBWSxRQUFnQjs7WUFDbEIsQ0FBQyxHQUFXLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVE7O1lBQ3BDLE1BQU0sR0FBWSxDQUFDLENBQUMsS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQztRQUN0RCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzlDLENBQUM7SUFFRDs7Ozs7OztPQU9HOzs7Ozs7Ozs7Ozs7Ozs7SUFDSCw4QkFBTzs7Ozs7Ozs7Ozs7Ozs7SUFBUCxVQUFRLFFBQWdCLEVBQUUsSUFBaUIsRUFBRSxJQUFpQjtRQUFwQyxxQkFBQSxFQUFBLFNBQWlCO1FBQUUscUJBQUEsRUFBQSxTQUFpQjs7WUFDcEQsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDOztZQUNoRSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBRTdDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7WUFDN0IsS0FBSztZQUNMLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDL0MsR0FBRztZQUNILENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDM0MsU0FBUyxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBRUQsaUNBQVU7Ozs7SUFBVixVQUFXLE1BQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUN6QyxDQUFDOzs7Ozs7O0lBRUQsK0JBQVE7Ozs7OztJQUFSLFVBQVMsTUFBYyxFQUFFLE1BQWMsRUFBRSxJQUFZO1FBQ2pELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUNyRCxDQUFDOzs7OztJQUVELDRCQUFLOzs7O0lBQUwsVUFBTSxJQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM1QyxDQUFDOzs7Ozs7O0lBRUQsNEJBQUs7Ozs7OztJQUFMLFVBQU0sSUFBWSxFQUFFLE1BQWUsRUFBRSxJQUFhO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN4RCxDQUFDOztnQkFuREosVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFYUSxVQUFVO2dEQWVWLE1BQU0sU0FBQyxRQUFROzs7dUJBL0J4QjtDQTZFQyxBQXBERCxJQW9EQztTQWpEWSxZQUFZOzs7SUFFakIsMkJBQXVCOztJQUN2Qix5QkFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nLnNlcnZpY2UnO1xuXG5jb25zdCBVSUNPTlRFWFQgPSAnL29ub3MvdWkvJztcbmNvbnN0IFJTU1VGRklYID0gVUlDT05URVhUICsgJ3JzLyc7XG5jb25zdCBXU1NVRkZJWCA9IFVJQ09OVEVYVCArICd3ZWJzb2NrLyc7XG5cbi8qKlxuICogT05PUyBHVUkgLS0gUmVtb3RlIC0tIEdlbmVyYWwgUHVycG9zZSBVUkwgRnVuY3Rpb25zXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBVcmxGblNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZSxcbiAgICAgICAgQEluamVjdCgnV2luZG93JykgcHJpdmF0ZSB3OiBhbnlcbiAgICApIHtcbiAgICAgICAgdGhpcy5sb2cuZGVidWcoJ1VybEZuU2VydmljZSBjb25zdHJ1Y3RlZCcpO1xuICAgIH1cblxuICAgIG1hdGNoU2VjdXJlKHByb3RvY29sOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwOiBzdHJpbmcgPSB0aGlzLncubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgIGNvbnN0IHNlY3VyZTogYm9vbGVhbiA9IChwID09PSAnaHR0cHMnIHx8IHAgPT09ICd3c3MnKTtcbiAgICAgICAgcmV0dXJuIHNlY3VyZSA/IHByb3RvY29sICsgJ3MnIDogcHJvdG9jb2w7XG4gICAgfVxuXG4gICAgLyogQSBsaXR0bGUgYml0IG9mIGZ1bmt5IGhlcmUuIEl0IGlzIHBvc3NpYmxlIHRoYXQgT05PUyBzaXRzXG4gICAgICogYmVoaW5kIGEgcHJveHkgYW5kIGhhcyBhbiBhcHAgcHJlZml4LCBlLmcuXG4gICAgICogICAgICBodHRwOi8vaG9zdDpwb3J0L215L2FwcC9vbm9zL3VpLi4uXG4gICAgICogVGhpcyBiaXQgb2YgcmVnZXggZ3JhYnMgZXZlcnl0aGluZyBhZnRlciB0aGUgaG9zdDpwb3J0IGFuZFxuICAgICAqIGJlZm9yZSB0aGUgVUlDT05URVhUICgvb25vcy91aS8pIGFuZCB1c2VzIHRoYXQgYXMgYW4gYXBwXG4gICAgICogcHJlZml4IGJ5IGluc2VydGluZyBpdCBiYWNrIGludG8gdGhlIFdTIFVSTC5cbiAgICAgKiBJZiBubyBwcmVmaXgsIHRoZW4gbm8gaW5zZXJ0LlxuICAgICAqL1xuICAgIHVybEJhc2UocHJvdG9jb2w6IHN0cmluZywgcG9ydDogc3RyaW5nID0gJycsIGhvc3Q6IHN0cmluZyA9ICcnKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLncubG9jYXRpb24uaHJlZi5tYXRjaCgnLiovL1teL10rLyguKyknICsgVUlDT05URVhUKTtcbiAgICAgICAgY29uc3QgYXBwUHJlZml4ID0gbWF0Y2ggPyAnLycgKyBtYXRjaFsxXSA6ICcnO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoU2VjdXJlKHByb3RvY29sKSArXG4gICAgICAgICAgICAnOi8vJyArXG4gICAgICAgICAgICAoaG9zdCA9PT0gJycgPyB0aGlzLncubG9jYXRpb24uaG9zdG5hbWUgOiBob3N0KSArXG4gICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgKHBvcnQgPT09ICcnID8gdGhpcy53LmxvY2F0aW9uLnBvcnQgOiBwb3J0KSArXG4gICAgICAgICAgICBhcHBQcmVmaXg7XG4gICAgfVxuXG4gICAgaHR0cFByZWZpeChzdWZmaXg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnVybEJhc2UoJ2h0dHAnKSArIHN1ZmZpeDtcbiAgICB9XG5cbiAgICB3c1ByZWZpeChzdWZmaXg6IHN0cmluZywgd3Nwb3J0OiBzdHJpbmcsIGhvc3Q6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnVybEJhc2UoJ3dzJywgd3Nwb3J0LCBob3N0KSArIHN1ZmZpeDtcbiAgICB9XG5cbiAgICByc1VybChwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwUHJlZml4KFJTU1VGRklYKSArIHBhdGg7XG4gICAgfVxuXG4gICAgd3NVcmwocGF0aDogc3RyaW5nLCB3c3BvcnQ/OiBzdHJpbmcsIGhvc3Q/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy53c1ByZWZpeChXU1NVRkZJWCwgd3Nwb3J0LCBob3N0KSArIHBhdGg7XG4gICAgfVxufVxuIl19