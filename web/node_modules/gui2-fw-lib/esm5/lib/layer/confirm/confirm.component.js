/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { LogService } from '../../log.service';
import { LionService } from '../../util/lion.service';
/**
 * ONOS GUI -- Layer -- Confirm Component
 *
 * Replaces Flash Service in old GUI.
 * Provides a mechanism to present a confirm dialog to the screen
 *
 * To use add an element to the template like
 *   <onos-confirm message="Performing something dangerous. Would you like to proceed"></onos-flash>
 *
 * An event is raised with either OK or Cancel
 */
var ConfirmComponent = /** @class */ (function () {
    function ConfirmComponent(log, lion) {
        this.log = log;
        this.lion = lion;
        this.chosen = new EventEmitter();
        this.log.debug('ConfirmComponent constructed');
        this.doLion();
    }
    /**
     * When OK or Cancel is pressed, send an event to parent with choice
     */
    /**
     * When OK or Cancel is pressed, send an event to parent with choice
     * @param {?} chosen
     * @return {?}
     */
    ConfirmComponent.prototype.choice = /**
     * When OK or Cancel is pressed, send an event to parent with choice
     * @param {?} chosen
     * @return {?}
     */
    function (chosen) {
        this.chosen.emit(chosen);
    };
    /**
     * Read the LION bundle for App to get confirm dialouge header
     */
    /**
     * Read the LION bundle for App to get confirm dialouge header
     * @return {?}
     */
    ConfirmComponent.prototype.doLion = /**
     * Read the LION bundle for App to get confirm dialouge header
     * @return {?}
     */
    function () {
        this.lionFn = this.lion.bundle('core.view.App');
    };
    ConfirmComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-confirm',
                    template: "<!--\n~ Copyright 2018-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n<div id=\"app-dialog\" class=\"floatpanel dialog\" [@confirmDlgState]=\"message!==''\">\n    <h3> {{ title }} </h3>\n    <p>{{ message }}</p>\n    <p *ngIf=\"warning\" class=\"warning strong\">{{ warning }}</p>\n    <div tabindex=\"10\" class=\"dialog-button\" (click)=\"choice(true)\">OK</div>\n    <div tabindex=\"11\" class=\"dialog-button\" (click)=\"choice(false)\">Cancel</div>\n</div>\n",
                    styles: ["#app-dialog{top:140px;padding:12px}#app-dialog h3{display:inline-block;font-weight:700;font-size:18pt}#app-dialog p{font-size:12pt}#app-dialog p.strong{font-weight:700;padding:8px;text-align:center}", "#app-dialog.floatpanel.dialog{background-color:#fff}#app-dialog p.strong{color:#fff;background-color:#ce5b58}", ".dialog h2{margin:0;word-wrap:break-word;display:inline-block;width:210px;vertical-align:middle}.dialog .dialog-button{display:inline-block;cursor:pointer;height:20px;padding:6px 8px 2px;margin:4px;float:right}", ".dialog .dialog-button{background-color:#518ecc;color:#fff}.dark .dialog .dialog-button{background-color:#345e85;color:#cccccd}", ".floatpanel{position:absolute;z-index:100;display:block;top:160px;width:544px;right:-550px;opacity:100;padding:2px;font-size:10pt;background-color:#fff;color:#3c3a3a;border:1px solid #c7c7c0}.floatpanel hr{border:1px solid #c7c7c0}.floatpanel .bottom tr:nth-child(odd){background-color:#f4f4f4}.floatpanel .bottom tr:nth-child(even){background-color:#fbfbfb}.floatpanel.dialog{top:180px}html[data-platform=iPad] .floatpanel{top:80px}", ".light .floatpanel{background-color:#fff;color:#3c3a3a;border:1px solid #c7c7c0}.light .floatpanel hr{border:1px solid #c7c7c0}.light .floatpanel .bottom tr:nth-child(odd){background-color:#f4f4f4}.light .floatpanel .bottom tr:nth-child(even){background-color:#fbfbfb}.dark .floatpanel{background-color:#282528;color:#888c8c;border:1px solid #364144}.dark .floatpanel th{background-color:#242424}.dark .floatpanel h2{color:#ddd}.dark .floatpanel hr{border:1px solid #30303a}.dark .floatpanel .bottom tr:nth-child(odd){background-color:#333}.dark .floatpanel .bottom tr:nth-child(even){background-color:#3a3a3a}"],
                    animations: [
                        trigger('confirmDlgState', [
                            state('true', style({
                                transform: 'translateX(-100%)',
                                opacity: '100'
                            })),
                            state('false', style({
                                transform: 'translateX(0%)',
                                opacity: '0'
                            })),
                            transition('0 => 1', animate('100ms ease-in')),
                            transition('1 => 0', animate('100ms ease-out'))
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    ConfirmComponent.ctorParameters = function () { return [
        { type: LogService },
        { type: LionService }
    ]; };
    ConfirmComponent.propDecorators = {
        message: [{ type: Input }],
        warning: [{ type: Input }],
        title: [{ type: Input }],
        chosen: [{ type: Output }]
    };
    return ConfirmComponent;
}());
export { ConfirmComponent };
if (false) {
    /** @type {?} */
    ConfirmComponent.prototype.lionFn;
    /** @type {?} */
    ConfirmComponent.prototype.message;
    /** @type {?} */
    ConfirmComponent.prototype.warning;
    /** @type {?} */
    ConfirmComponent.prototype.title;
    /** @type {?} */
    ConfirmComponent.prototype.chosen;
    /** @type {?} */
    ConfirmComponent.prototype.log;
    /** @type {?} */
    ConfirmComponent.prototype.lion;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ndWkyLWZ3LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9sYXllci9jb25maXJtL2NvbmZpcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7Ozs7Ozs7O0FBYXREO0lBa0RJLDBCQUNZLEdBQWUsRUFDZixJQUFpQjtRQURqQixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUpuQixXQUFNLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFNekQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCxpQ0FBTTs7Ozs7SUFBTixVQUFPLE1BQWU7UUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILGlDQUFNOzs7O0lBQU47UUFDSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7O2dCQXRFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSw2L0JBc0JiO29CQUNHLE1BQU0sRUFBRSxDQUFDLHdNQUF3TSxFQUFFLCtHQUErRyxFQUFFLG9OQUFvTixFQUFFLGlJQUFpSSxFQUFFLG1iQUFtYixFQUFFLG9tQkFBb21CLENBQUM7b0JBQ3ZyRCxVQUFVLEVBQUU7d0JBQ1IsT0FBTyxDQUFDLGlCQUFpQixFQUFFOzRCQUN2QixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztnQ0FDaEIsU0FBUyxFQUFFLG1CQUFtQjtnQ0FDOUIsT0FBTyxFQUFFLEtBQUs7NkJBQ2pCLENBQUMsQ0FBQzs0QkFDSCxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztnQ0FDakIsU0FBUyxFQUFFLGdCQUFnQjtnQ0FDM0IsT0FBTyxFQUFFLEdBQUc7NkJBQ2YsQ0FBQyxDQUFDOzRCQUNILFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDOzRCQUM5QyxVQUFVLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO3lCQUNsRCxDQUFDO3FCQUNMO2lCQUNKOzs7O2dCQXREUSxVQUFVO2dCQUNWLFdBQVc7OzswQkEwRGYsS0FBSzswQkFDTCxLQUFLO3dCQUNMLEtBQUs7eUJBQ0wsTUFBTTs7SUF1QlgsdUJBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQTlCWSxnQkFBZ0I7OztJQUV6QixrQ0FBTzs7SUFFUCxtQ0FBeUI7O0lBQ3pCLG1DQUF5Qjs7SUFDekIsaUNBQXVCOztJQUN2QixrQ0FBNkQ7O0lBR3pELCtCQUF1Qjs7SUFDdkIsZ0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0cmlnZ2VyLCBzdGF0ZSwgc3R5bGUsIGFuaW1hdGUsIHRyYW5zaXRpb24gfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBMaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWwvbGlvbi5zZXJ2aWNlJztcblxuLyoqXG4gKiBPTk9TIEdVSSAtLSBMYXllciAtLSBDb25maXJtIENvbXBvbmVudFxuICpcbiAqIFJlcGxhY2VzIEZsYXNoIFNlcnZpY2UgaW4gb2xkIEdVSS5cbiAqIFByb3ZpZGVzIGEgbWVjaGFuaXNtIHRvIHByZXNlbnQgYSBjb25maXJtIGRpYWxvZyB0byB0aGUgc2NyZWVuXG4gKlxuICogVG8gdXNlIGFkZCBhbiBlbGVtZW50IHRvIHRoZSB0ZW1wbGF0ZSBsaWtlXG4gKiAgIDxvbm9zLWNvbmZpcm0gbWVzc2FnZT1cIlBlcmZvcm1pbmcgc29tZXRoaW5nIGRhbmdlcm91cy4gV291bGQgeW91IGxpa2UgdG8gcHJvY2VlZFwiPjwvb25vcy1mbGFzaD5cbiAqXG4gKiBBbiBldmVudCBpcyByYWlzZWQgd2l0aCBlaXRoZXIgT0sgb3IgQ2FuY2VsXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnb25vcy1jb25maXJtJyxcbiAgICB0ZW1wbGF0ZTogYDwhLS1cbn4gQ29weXJpZ2h0IDIwMTgtcHJlc2VudCBPcGVuIE5ldHdvcmtpbmcgRm91bmRhdGlvblxuflxufiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xufiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5+IFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuflxufiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5+XG5+IFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbn4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxufiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbn4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxufiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi0tPlxuPGRpdiBpZD1cImFwcC1kaWFsb2dcIiBjbGFzcz1cImZsb2F0cGFuZWwgZGlhbG9nXCIgW0Bjb25maXJtRGxnU3RhdGVdPVwibWVzc2FnZSE9PScnXCI+XG4gICAgPGgzPiB7eyB0aXRsZSB9fSA8L2gzPlxuICAgIDxwPnt7IG1lc3NhZ2UgfX08L3A+XG4gICAgPHAgKm5nSWY9XCJ3YXJuaW5nXCIgY2xhc3M9XCJ3YXJuaW5nIHN0cm9uZ1wiPnt7IHdhcm5pbmcgfX08L3A+XG4gICAgPGRpdiB0YWJpbmRleD1cIjEwXCIgY2xhc3M9XCJkaWFsb2ctYnV0dG9uXCIgKGNsaWNrKT1cImNob2ljZSh0cnVlKVwiPk9LPC9kaXY+XG4gICAgPGRpdiB0YWJpbmRleD1cIjExXCIgY2xhc3M9XCJkaWFsb2ctYnV0dG9uXCIgKGNsaWNrKT1cImNob2ljZShmYWxzZSlcIj5DYW5jZWw8L2Rpdj5cbjwvZGl2PlxuYCxcbiAgICBzdHlsZXM6IFtgI2FwcC1kaWFsb2d7dG9wOjE0MHB4O3BhZGRpbmc6MTJweH0jYXBwLWRpYWxvZyBoM3tkaXNwbGF5OmlubGluZS1ibG9jaztmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE4cHR9I2FwcC1kaWFsb2cgcHtmb250LXNpemU6MTJwdH0jYXBwLWRpYWxvZyBwLnN0cm9uZ3tmb250LXdlaWdodDo3MDA7cGFkZGluZzo4cHg7dGV4dC1hbGlnbjpjZW50ZXJ9YCwgYCNhcHAtZGlhbG9nLmZsb2F0cGFuZWwuZGlhbG9ne2JhY2tncm91bmQtY29sb3I6I2ZmZn0jYXBwLWRpYWxvZyBwLnN0cm9uZ3tjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2NlNWI1OH1gLCBgLmRpYWxvZyBoMnttYXJnaW46MDt3b3JkLXdyYXA6YnJlYWstd29yZDtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoyMTBweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmRpYWxvZyAuZGlhbG9nLWJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6cG9pbnRlcjtoZWlnaHQ6MjBweDtwYWRkaW5nOjZweCA4cHggMnB4O21hcmdpbjo0cHg7ZmxvYXQ6cmlnaHR9YCwgYC5kaWFsb2cgLmRpYWxvZy1idXR0b257YmFja2dyb3VuZC1jb2xvcjojNTE4ZWNjO2NvbG9yOiNmZmZ9LmRhcmsgLmRpYWxvZyAuZGlhbG9nLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiMzNDVlODU7Y29sb3I6I2NjY2NjZH1gLCBgLmZsb2F0cGFuZWx7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDA7ZGlzcGxheTpibG9jazt0b3A6MTYwcHg7d2lkdGg6NTQ0cHg7cmlnaHQ6LTU1MHB4O29wYWNpdHk6MTAwO3BhZGRpbmc6MnB4O2ZvbnQtc2l6ZToxMHB0O2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojM2MzYTNhO2JvcmRlcjoxcHggc29saWQgI2M3YzdjMH0uZmxvYXRwYW5lbCBocntib3JkZXI6MXB4IHNvbGlkICNjN2M3YzB9LmZsb2F0cGFuZWwgLmJvdHRvbSB0cjpudGgtY2hpbGQob2RkKXtiYWNrZ3JvdW5kLWNvbG9yOiNmNGY0ZjR9LmZsb2F0cGFuZWwgLmJvdHRvbSB0cjpudGgtY2hpbGQoZXZlbil7YmFja2dyb3VuZC1jb2xvcjojZmJmYmZifS5mbG9hdHBhbmVsLmRpYWxvZ3t0b3A6MTgwcHh9aHRtbFtkYXRhLXBsYXRmb3JtPWlQYWRdIC5mbG9hdHBhbmVse3RvcDo4MHB4fWAsIGAubGlnaHQgLmZsb2F0cGFuZWx7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbG9yOiMzYzNhM2E7Ym9yZGVyOjFweCBzb2xpZCAjYzdjN2MwfS5saWdodCAuZmxvYXRwYW5lbCBocntib3JkZXI6MXB4IHNvbGlkICNjN2M3YzB9LmxpZ2h0IC5mbG9hdHBhbmVsIC5ib3R0b20gdHI6bnRoLWNoaWxkKG9kZCl7YmFja2dyb3VuZC1jb2xvcjojZjRmNGY0fS5saWdodCAuZmxvYXRwYW5lbCAuYm90dG9tIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiNmYmZiZmJ9LmRhcmsgLmZsb2F0cGFuZWx7YmFja2dyb3VuZC1jb2xvcjojMjgyNTI4O2NvbG9yOiM4ODhjOGM7Ym9yZGVyOjFweCBzb2xpZCAjMzY0MTQ0fS5kYXJrIC5mbG9hdHBhbmVsIHRoe2JhY2tncm91bmQtY29sb3I6IzI0MjQyNH0uZGFyayAuZmxvYXRwYW5lbCBoMntjb2xvcjojZGRkfS5kYXJrIC5mbG9hdHBhbmVsIGhye2JvcmRlcjoxcHggc29saWQgIzMwMzAzYX0uZGFyayAuZmxvYXRwYW5lbCAuYm90dG9tIHRyOm50aC1jaGlsZChvZGQpe2JhY2tncm91bmQtY29sb3I6IzMzM30uZGFyayAuZmxvYXRwYW5lbCAuYm90dG9tIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiMzYTNhM2F9YF0sXG4gICAgYW5pbWF0aW9uczogW1xuICAgICAgICB0cmlnZ2VyKCdjb25maXJtRGxnU3RhdGUnLCBbXG4gICAgICAgICAgICBzdGF0ZSgndHJ1ZScsIHN0eWxlKHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC0xMDAlKScsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogJzEwMCdcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHN0YXRlKCdmYWxzZScsIHN0eWxlKHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDAlKScsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogJzAnXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB0cmFuc2l0aW9uKCcwID0+IDEnLCBhbmltYXRlKCcxMDBtcyBlYXNlLWluJykpLFxuICAgICAgICAgICAgdHJhbnNpdGlvbignMSA9PiAwJywgYW5pbWF0ZSgnMTAwbXMgZWFzZS1vdXQnKSlcbiAgICAgICAgXSlcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIENvbmZpcm1Db21wb25lbnQge1xuXG4gICAgbGlvbkZuOyAvLyBGdW5jdGlvblxuXG4gICAgQElucHV0KCkgbWVzc2FnZTogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHdhcm5pbmc6IHN0cmluZztcbiAgICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICAgIEBPdXRwdXQoKSBjaG9zZW46IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsaW9uOiBMaW9uU2VydmljZSxcbiAgICApIHtcbiAgICAgICAgdGhpcy5sb2cuZGVidWcoJ0NvbmZpcm1Db21wb25lbnQgY29uc3RydWN0ZWQnKTtcbiAgICAgICAgdGhpcy5kb0xpb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIE9LIG9yIENhbmNlbCBpcyBwcmVzc2VkLCBzZW5kIGFuIGV2ZW50IHRvIHBhcmVudCB3aXRoIGNob2ljZVxuICAgICAqL1xuICAgIGNob2ljZShjaG9zZW46IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaG9zZW4uZW1pdChjaG9zZW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgdGhlIExJT04gYnVuZGxlIGZvciBBcHAgdG8gZ2V0IGNvbmZpcm0gZGlhbG91Z2UgaGVhZGVyXG4gICAgICovXG4gICAgZG9MaW9uKCkge1xuICAgICAgICB0aGlzLmxpb25GbiA9IHRoaXMubGlvbi5idW5kbGUoJ2NvcmUudmlldy5BcHAnKTtcbiAgICB9XG59XG4iXX0=