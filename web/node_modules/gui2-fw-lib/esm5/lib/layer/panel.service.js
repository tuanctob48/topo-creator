/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 *  Copyright 2018-present Open Networking Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import { Injectable } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import { ThemeService } from '../util/theme.service';
import { WebSocketService } from '../remote/websocket.service';
import * as d3 from 'd3';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
import * as i3 from "../util/theme.service";
import * as i4 from "../remote/websocket.service";
/** @type {?} */
var fs;
/** @type {?} */
var defaultSettings = {
    edge: 'right',
    width: 200,
    margin: 20,
    hideMargin: 20,
    xtnTime: 750,
    fade: true,
};
/** @type {?} */
var panels;
/** @type {?} */
var panelLayer;
/**
 * @return {?}
 */
function init() {
    panelLayer = d3.select('div#floatpanels');
    panelLayer.text('');
    panels = {};
}
// helpers for panel
/**
 * @return {?}
 */
function noop() {
}
/**
 * @param {?} p
 * @return {?}
 */
function margin(p) {
    return p.settings.margin;
}
/**
 * @param {?} p
 * @return {?}
 */
function hideMargin(p) {
    return p.settings.hideMargin;
}
/**
 * @param {?} p
 * @param {?} what
 * @return {?}
 */
function noPx(p, what) {
    return Number(p.el.style(what).replace(/px$/, ''));
}
/**
 * @param {?} p
 * @return {?}
 */
function widthVal(p) {
    return noPx(p, 'width');
}
/**
 * @param {?} p
 * @return {?}
 */
function heightVal(p) {
    return noPx(p, 'height');
}
/**
 * @param {?} p
 * @return {?}
 */
function pxShow(p) {
    return margin(p) + 'px';
}
/**
 * @param {?} p
 * @return {?}
 */
function pxHide(p) {
    return (-hideMargin(p) - widthVal(p) - (noPx(p, 'padding') * 2)) + 'px';
}
/**
 * @param {?} id
 * @param {?} settings
 * @return {?}
 */
function makePanel(id, settings) {
    /** @type {?} */
    var p = {
        id: id,
        settings: settings,
        on: false,
        el: null,
    };
    /** @type {?} */
    var api = {
        show: showPanel,
        hide: hidePanel,
        toggle: togglePanel,
        empty: emptyPanel,
        append: appendPanel,
        width: panelWidth,
        height: panelHeight,
        bbox: panelBBox,
        isVisible: panelIsVisible,
        classed: classed,
        el: panelEl,
    };
    p.el = panelLayer.append('div')
        .attr('id', id)
        .attr('class', 'floatpanel')
        .style('opacity', 0);
    // has to be called after el is set
    p.el.style(p.settings.edge, pxHide(p));
    panelWidth(p.settings.width);
    if (p.settings.height) {
        panelHeight(p.settings.height);
    }
    panels[id] = p;
    /**
     * @param {?} cb
     * @return {?}
     */
    function showPanel(cb) {
        /** @type {?} */
        var endCb = fs.isF(cb) || noop;
        p.on = true;
        p.el.transition().duration(p.settings.xtnTime)
            .style(p.settings.edge, pxShow(p))
            .style('opacity', 1);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    function hidePanel(cb) {
        /** @type {?} */
        var endCb = fs.isF(cb) || noop;
        /** @type {?} */
        var endOpacity = p.settings.fade ? 0 : 1;
        p.on = false;
        p.el.transition().duration(p.settings.xtnTime)
            .style(p.settings.edge, pxHide(p))
            .style('opacity', endOpacity);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    function togglePanel(cb) {
        if (p.on) {
            hidePanel(cb);
        }
        else {
            showPanel(cb);
        }
        return p.on;
    }
    /**
     * @return {?}
     */
    function emptyPanel() {
        return p.el.text('');
    }
    /**
     * @param {?} what
     * @return {?}
     */
    function appendPanel(what) {
        return p.el.append(what);
    }
    /**
     * @param {?} w
     * @return {?}
     */
    function panelWidth(w) {
        if (w === undefined) {
            return widthVal(p);
        }
        p.el.style('width', w + 'px');
    }
    /**
     * @param {?} h
     * @return {?}
     */
    function panelHeight(h) {
        if (h === undefined) {
            return heightVal(p);
        }
        p.el.style('height', h + 'px');
    }
    /**
     * @return {?}
     */
    function panelBBox() {
        return p.el.node().getBoundingClientRect();
    }
    /**
     * @return {?}
     */
    function panelIsVisible() {
        return p.on;
    }
    /**
     * @param {?} cls
     * @param {?} bool
     * @return {?}
     */
    function classed(cls, bool) {
        return p.el.classed(cls, bool);
    }
    /**
     * @return {?}
     */
    function panelEl() {
        return p.el;
    }
    return api;
}
/**
 * @param {?} id
 * @return {?}
 */
function removePanel(id) {
    panelLayer.select('#' + id).remove();
    delete panels[id];
}
var PanelService = /** @class */ (function () {
    function PanelService(funcs, log, ts, wss) {
        this.funcs = funcs;
        this.log = log;
        this.ts = ts;
        this.wss = wss;
        fs = this.funcs;
        init();
    }
    /**
     * @param {?} id
     * @param {?} opts
     * @return {?}
     */
    PanelService.prototype.createPanel = /**
     * @param {?} id
     * @param {?} opts
     * @return {?}
     */
    function (id, opts) {
        /** @type {?} */
        var settings = Object.assign({}, defaultSettings, opts);
        if (!id) {
            this.log.warn('createPanel: no ID given');
            return null;
        }
        if (panels[id]) {
            this.log.warn('Panel with ID "' + id + '" already exists');
            return null;
        }
        if (fs.debugOn('widget')) {
            this.log.debug('creating panel:', id, settings);
        }
        return makePanel(id, settings);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PanelService.prototype.destroyPanel = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (panels[id]) {
            if (fs.debugOn('widget')) {
                this.log.debug('destroying panel:', id);
            }
            removePanel(id);
        }
        else {
            if (fs.debugOn('widget')) {
                this.log.debug('no panel to destroy:', id);
            }
        }
    };
    PanelService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    PanelService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: ThemeService },
        { type: WebSocketService }
    ]; };
    /** @nocollapse */ PanelService.ngInjectableDef = i0.defineInjectable({ factory: function PanelService_Factory() { return new PanelService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.ThemeService), i0.inject(i4.WebSocketService)); }, token: PanelService, providedIn: "root" });
    return PanelService;
}());
export { PanelService };
if (false) {
    /** @type {?} */
    PanelService.prototype.funcs;
    /** @type {?} */
    PanelService.prototype.log;
    /** @type {?} */
    PanelService.prototype.ts;
    /** @type {?} */
    PanelService.prototype.wss;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2d1aTItZnctbGliLyIsInNvdXJjZXMiOlsibGliL2xheWVyL3BhbmVsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWVBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDbkQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7Ozs7Ozs7SUFFckIsRUFBRTs7SUFFQSxlQUFlLEdBQUc7SUFDcEIsSUFBSSxFQUFFLE9BQU87SUFDYixLQUFLLEVBQUUsR0FBRztJQUNWLE1BQU0sRUFBRSxFQUFFO0lBQ1YsVUFBVSxFQUFFLEVBQUU7SUFDZCxPQUFPLEVBQUUsR0FBRztJQUNaLElBQUksRUFBRSxJQUFJO0NBQ2I7O0lBRUcsTUFBTTs7SUFDTixVQUFVOzs7O0FBRWQsU0FBUyxJQUFJO0lBQ1QsVUFBVSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMxQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BCLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDaEIsQ0FBQzs7Ozs7QUFHRCxTQUFTLElBQUk7QUFDYixDQUFDOzs7OztBQUVELFNBQVMsTUFBTSxDQUFDLENBQU07SUFDbEIsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUM3QixDQUFDOzs7OztBQUVELFNBQVMsVUFBVSxDQUFDLENBQU07SUFDdEIsT0FBTyxDQUFDLENBQUMsUUFBUSxD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QUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzlDO1NBQ0o7SUFDTCxDQUFDOztnQkF2Q0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkF2S08sU0FBUztnQkFDVCxVQUFVO2dCQUNWLFlBQVk7Z0JBQ1osZ0JBQWdCOzs7dUJBbkJ4QjtDQTZOQyxBQXhDRCxJQXdDQztTQXJDWSxZQUFZOzs7SUFDVCw2QkFBd0I7O0lBQ3hCLDJCQUF1Qjs7SUFDdkIsMEJBQXdCOztJQUN4QiwyQkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIENvcHlyaWdodCAyMDE4LXByZXNlbnQgT3BlbiBOZXR3b3JraW5nIEZvdW5kYXRpb25cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZuU2VydmljZX0gZnJvbSAnLi4vdXRpbC9mbi5zZXJ2aWNlJztcbmltcG9ydCB7TG9nU2VydmljZX0gZnJvbSAnLi4vbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHtUaGVtZVNlcnZpY2V9IGZyb20gJy4uL3V0aWwvdGhlbWUuc2VydmljZSc7XG5pbXBvcnQge1dlYlNvY2tldFNlcnZpY2V9IGZyb20gJy4uL3JlbW90ZS93ZWJzb2NrZXQuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5cbmxldCBmcztcblxuY29uc3QgZGVmYXVsdFNldHRpbmdzID0ge1xuICAgIGVkZ2U6ICdyaWdodCcsXG4gICAgd2lkdGg6IDIwMCxcbiAgICBtYXJnaW46IDIwLFxuICAgIGhpZGVNYXJnaW46IDIwLFxuICAgIHh0blRpbWU6IDc1MCxcbiAgICBmYWRlOiB0cnVlLFxufTtcblxubGV0IHBhbmVscyxcbiAgICBwYW5lbExheWVyO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHBhbmVsTGF5ZXIgPSBkMy5zZWxlY3QoJ2RpdiNmbG9hdHBhbmVscycpO1xuICAgIHBhbmVsTGF5ZXIudGV4dCgnJyk7XG4gICAgcGFuZWxzID0ge307XG59XG5cbi8vIGhlbHBlcnMgZm9yIHBhbmVsXG5mdW5jdGlvbiBub29wKCkge1xufVxuXG5mdW5jdGlvbiBtYXJnaW4ocDogYW55KSB7XG4gICAgcmV0dXJuIHAuc2V0dGluZ3MubWFyZ2luO1xufVxuXG5mdW5jdGlvbiBoaWRlTWFyZ2luKHA6IGFueSkge1xuICAgIHJldHVybiBwLnNldHRpbmdzLmhpZGVNYXJnaW47XG59XG5cbmZ1bmN0aW9uIG5vUHgocDogYW55LCB3aGF0OiBhbnkpIHtcbiAgICByZXR1cm4gTnVtYmVyKHAuZWwuc3R5bGUod2hhdCkucmVwbGFjZSgvcHgkLywgJycpKTtcbn1cblxuZnVuY3Rpb24gd2lkdGhWYWwocDogYW55KSB7XG4gICAgcmV0dXJuIG5vUHgocCwgJ3dpZHRoJyk7XG59XG5cbmZ1bmN0aW9uIGhlaWdodFZhbChwOiBhbnkpIHtcbiAgICByZXR1cm4gbm9QeChwLCAnaGVpZ2h0Jyk7XG59XG5cbmZ1bmN0aW9uIHB4U2hvdyhwOiBhbnkpIHtcbiAgICByZXR1cm4gbWFyZ2luKHApICsgJ3B4Jztcbn1cblxuZnVuY3Rpb24gcHhIaWRlKHA6IGFueSkge1xuICAgIHJldHVybiAoLWhpZGVNYXJnaW4ocCkgLSB3aWR0aFZhbChwKSAtIChub1B4KHAsICdwYWRkaW5nJykgKiAyKSkgKyAncHgnO1xufVxuXG5mdW5jdGlvbiBtYWtlUGFuZWwoaWQ6IGFueSwgc2V0dGluZ3M6IGFueSkge1xuICAgIGNvbnN0IHAgPSB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBzZXR0aW5nczogc2V0dGluZ3MsXG4gICAgICAgICAgICBvbjogZmFsc2UsXG4gICAgICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgYXBpID0ge1xuICAgICAgICAgICAgc2hvdzogc2hvd1BhbmVsLFxuICAgICAgICAgICAgaGlkZTogaGlkZVBhbmVsLFxuICAgICAgICAgICAgdG9nZ2xlOiB0b2dnbGVQYW5lbCxcbiAgICAgICAgICAgIGVtcHR5OiBlbXB0eVBhbmVsLFxuICAgICAgICAgICAgYXBwZW5kOiBhcHBlbmRQYW5lbCxcbiAgICAgICAgICAgIHdpZHRoOiBwYW5lbFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBwYW5lbEhlaWdodCxcbiAgICAgICAgICAgIGJib3g6IHBhbmVsQkJveCxcbiAgICAgICAgICAgIGlzVmlzaWJsZTogcGFuZWxJc1Zpc2libGUsXG4gICAgICAgICAgICBjbGFzc2VkOiBjbGFzc2VkLFxuICAgICAgICAgICAgZWw6IHBhbmVsRWwsXG4gICAgICAgIH07XG5cbiAgICBwLmVsID0gcGFuZWxMYXllci5hcHBlbmQoJ2RpdicpXG4gICAgICAgIC5hdHRyKCdpZCcsIGlkKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnZmxvYXRwYW5lbCcpXG4gICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApO1xuXG4gICAgLy8gaGFzIHRvIGJlIGNhbGxlZCBhZnRlciBlbCBpcyBzZXRcbiAgICBwLmVsLnN0eWxlKHAuc2V0dGluZ3MuZWRnZSwgcHhIaWRlKHApKTtcbiAgICBwYW5lbFdpZHRoKHAuc2V0dGluZ3Mud2lkdGgpO1xuICAgIGlmIChwLnNldHRpbmdzLmhlaWdodCkge1xuICAgICAgICBwYW5lbEhlaWdodChwLnNldHRpbmdzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgcGFuZWxzW2lkXSA9IHA7XG5cbiAgICBmdW5jdGlvbiBzaG93UGFuZWwoY2I6IGFueSkge1xuICAgICAgICBjb25zdCBlbmRDYiA9IGZzLmlzRihjYikgfHwgbm9vcDtcbiAgICAgICAgcC5vbiA9IHRydWU7XG4gICAgICAgIHAuZWwudHJhbnNpdGlvbigpLmR1cmF0aW9uKHAuc2V0dGluZ3MueHRuVGltZSlcbiAgICAgICAgICAgIC5zdHlsZShwLnNldHRpbmdzLmVkZ2UsIHB4U2hvdyhwKSlcbiAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVQYW5lbChjYjogYW55KSB7XG4gICAgICAgIGNvbnN0IGVuZENiID0gZnMuaXNGKGNiKSB8fCBub29wLFxuICAgICAgICAgICAgZW5kT3BhY2l0eSA9IHAuc2V0dGluZ3MuZmFkZSA/IDAgOiAxO1xuICAgICAgICBwLm9uID0gZmFsc2U7XG4gICAgICAgIHAuZWwudHJhbnNpdGlvbigpLmR1cmF0aW9uKHAuc2V0dGluZ3MueHRuVGltZSlcbiAgICAgICAgICAgIC5zdHlsZShwLnNldHRpbmdzLmVkZ2UsIHB4SGlkZShwKSlcbiAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIGVuZE9wYWNpdHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvZ2dsZVBhbmVsKGNiOiBhbnkpIHtcbiAgICAgICAgaWYgKHAub24pIHtcbiAgICAgICAgICAgIGhpZGVQYW5lbChjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93UGFuZWwoY2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwLm9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtcHR5UGFuZWwoKSB7XG4gICAgICAgIHJldHVybiBwLmVsLnRleHQoJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGVuZFBhbmVsKHdoYXQ6IGFueSkge1xuICAgICAgICByZXR1cm4gcC5lbC5hcHBlbmQod2hhdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFuZWxXaWR0aCh3OiBhbnkpIHtcbiAgICAgICAgaWYgKHcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpZHRoVmFsKHApO1xuICAgICAgICB9XG4gICAgICAgIHAuZWwuc3R5bGUoJ3dpZHRoJywgdyArICdweCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhbmVsSGVpZ2h0KGg6IGFueSkge1xuICAgICAgICBpZiAoaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0VmFsKHApO1xuICAgICAgICB9XG4gICAgICAgIHAuZWwuc3R5bGUoJ2hlaWdodCcsIGggKyAncHgnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYW5lbEJCb3goKSB7XG4gICAgICAgIHJldHVybiBwLmVsLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYW5lbElzVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHAub247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xhc3NlZChjbHM6IGFueSwgYm9vbDogYW55KSB7XG4gICAgICAgIHJldHVybiBwLmVsLmNsYXNzZWQoY2xzLCBib29sKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYW5lbEVsKCkge1xuICAgICAgICByZXR1cm4gcC5lbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXBpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVQYW5lbChpZDogYW55KSB7XG4gICAgcGFuZWxMYXllci5zZWxlY3QoJyMnICsgaWQpLnJlbW92ZSgpO1xuICAgIGRlbGV0ZSBwYW5lbHNbaWRdO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYW5lbFNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZnVuY3M6IEZuU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZzogTG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRzOiBUaGVtZVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB3c3M6IFdlYlNvY2tldFNlcnZpY2UpIHtcbiAgICAgICAgZnMgPSB0aGlzLmZ1bmNzO1xuICAgICAgICBpbml0KCk7XG4gICAgfVxuXG4gICAgY3JlYXRlUGFuZWwoaWQ6IGFueSwgb3B0czogYW55KSB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNldHRpbmdzLCBvcHRzKTtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgdGhpcy5sb2cud2FybignY3JlYXRlUGFuZWw6IG5vIElEIGdpdmVuJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFuZWxzW2lkXSkge1xuICAgICAgICAgICAgdGhpcy5sb2cud2FybignUGFuZWwgd2l0aCBJRCBcIicgKyBpZCArICdcIiBhbHJlYWR5IGV4aXN0cycpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZzLmRlYnVnT24oJ3dpZGdldCcpKSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZygnY3JlYXRpbmcgcGFuZWw6JywgaWQsIHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFrZVBhbmVsKGlkLCBzZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgZGVzdHJveVBhbmVsKGlkOiBhbnkpIHtcbiAgICAgICAgaWYgKHBhbmVsc1tpZF0pIHtcbiAgICAgICAgICAgIGlmIChmcy5kZWJ1Z09uKCd3aWRnZXQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCdkZXN0cm95aW5nIHBhbmVsOicsIGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZVBhbmVsKGlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmcy5kZWJ1Z09uKCd3aWRnZXQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nLmRlYnVnKCdubyBwYW5lbCB0byBkZXN0cm95OicsIGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==