/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 *  Copyright 2018-present Open Networking Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import { Inject, Injectable } from '@angular/core';
import { FnService } from '../util/fn.service';
import { LogService } from '../log.service';
import { ThemeService } from '../util/theme.service';
import * as d3 from 'd3';
import * as i0 from "@angular/core";
import * as i1 from "../util/fn.service";
import * as i2 from "../log.service";
import * as i3 from "../util/theme.service";
/** @type {?} */
var id = 'loading-anim';
/** @type {?} */
var dir = 'data/img/loading/';
/** @type {?} */
var pfx = '/load-';
/** @type {?} */
var nImgs = 16;
/** @type {?} */
var speed = 100;
/** @type {?} */
var waitDelay = 500;
/**
 * ONOS GUI -- Layer -- Loading Service
 *
 * Provides a mechanism to start/stop the loading animation, center screen.
 */
var LoadingService = /** @class */ (function () {
    function LoadingService(fs, log, ts, w) {
        this.fs = fs;
        this.log = log;
        this.ts = ts;
        this.w = w;
        this.images = [];
        this.idx = 0;
        this.preloadImages();
        this.log.debug('LoadingService constructed');
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    LoadingService.prototype.dbg = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.fs.debug(this.constructor.name, args);
    };
    /**
     * @return {?}
     */
    LoadingService.prototype.preloadImages = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var idx;
        this.dbg('preload images start...');
        for (idx = 1; idx <= nImgs; idx++) {
            this.addImg('light', idx);
            this.addImg('dark', idx);
        }
        this.dbg('preload images DONE!', this.images);
    };
    /**
     * @param {?} theme
     * @param {?} idx
     * @return {?}
     */
    LoadingService.prototype.addImg = /**
     * @param {?} theme
     * @param {?} idx
     * @return {?}
     */
    function (theme, idx) {
        /** @type {?} */
        var img = new Image();
        img.src = this.fname(idx, theme);
        this.images.push(img);
    };
    /**
     * @param {?} i
     * @param {?} theme
     * @return {?}
     */
    LoadingService.prototype.fname = /**
     * @param {?} i
     * @param {?} theme
     * @return {?}
     */
    function (i, theme) {
        /** @type {?} */
        var z = i > 9 ? '' : '0';
        return dir + theme + pfx + z + i + '.png';
    };
    /**
     * @return {?}
     */
    LoadingService.prototype.nextFrame = /**
     * @return {?}
     */
    function () {
        this.idx = this.idx === 16 ? 1 : this.idx + 1;
        this.img.attr('src', this.fname(this.idx, this.theme));
    };
    // start displaying 'loading...' animation (idempotent)
    // start displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    LoadingService.prototype.startAnim = 
    // start displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dbg('start ANIMATION');
        this.theme = this.ts.getTheme();
        /** @type {?} */
        var div = d3.select('#' + id);
        if (div.empty()) {
            div = d3.select('body')
                .append('div')
                .attr('id', id);
            this.img = div
                .append('img')
                .attr('src', this.fname(1, this.theme));
            this.idx = 1;
            this.task = setInterval(function () { return _this.nextFrame(); }, speed);
        }
    };
    // stop displaying 'loading...' animation (idempotent)
    // stop displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    LoadingService.prototype.stopAnim = 
    // stop displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    function () {
        this.dbg('*stop* ANIMATION');
        if (this.task) {
            clearInterval(this.task);
            this.task = null;
        }
        d3.select('#' + id).remove();
    };
    // schedule function to start animation in the future
    // schedule function to start animation in the future
    /**
     * @return {?}
     */
    LoadingService.prototype.start = 
    // schedule function to start animation in the future
    /**
     * @return {?}
     */
    function () {
        this.dbg('start (schedule)');
        this.wait = this.w.setTimeout(this.startAnim(), waitDelay);
    };
    // cancel future start, if any; stop the animation
    // cancel future start, if any; stop the animation
    /**
     * @return {?}
     */
    LoadingService.prototype.stop = 
    // cancel future start, if any; stop the animation
    /**
     * @return {?}
     */
    function () {
        if (this.wait) {
            this.dbg('start CANCELED');
            clearTimeout(this.wait);
            this.wait = null;
        }
        this.stopAnim();
    };
    // return true if start() has been called but not stop()
    // return true if start() has been called but not stop()
    /**
     * @return {?}
     */
    LoadingService.prototype.waiting = 
    // return true if start() has been called but not stop()
    /**
     * @return {?}
     */
    function () {
        return !!this.wait;
    };
    LoadingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    LoadingService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: ThemeService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ LoadingService.ngInjectableDef = i0.defineInjectable({ factory: function LoadingService_Factory() { return new LoadingService(i0.inject(i1.FnService), i0.inject(i2.LogService), i0.inject(i3.ThemeService), i0.inject("Window")); }, token: LoadingService, providedIn: "root" });
    return LoadingService;
}());
export { LoadingService };
if (false) {
    /** @type {?} */
    LoadingService.prototype.images;
    /** @type {?} */
    LoadingService.prototype.idx;
    /** @type {?} */
    LoadingService.prototype.img;
    /** @type {?} */
    LoadingService.prototype.theme;
    /** @type {?} */
    LoadingService.prototype.task;
    /** @type {?} */
    LoadingService.prototype.wait;
    /** @type {?} */
    LoadingService.prototype.fs;
    /** @type {?} */
    LoadingService.prototype.log;
    /** @type {?} */
    LoadingService.prototype.ts;
    /** @type {?} */
    LoadingService.prototype.w;
}
//# sourceMappingURL=data:application/json;base64,