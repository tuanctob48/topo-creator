import { __extends, __values, __read, __spread } from 'tslib';
import { Injectable, NgModule, Inject, Directive, Component, Input, NgZone, Output, EventEmitter, Pipe, defineInjectable, inject, HostListener } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { event, map, select, scaleOrdinal, range } from 'd3';
import { trigger, state, style, animate, transition } from '@angular/animations';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
Logger = /** @class */ (function () {
    function Logger() {
    }
    return Logger;
}());
/**
 * ONOS GUI -- LogService
 * Inspired by https://robferguson.org/blog/2017/09/09/a-simple-logging-service-for-angular-4/
 */
var LogService = /** @class */ (function (_super) {
    __extends(LogService, _super);
    function LogService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} type
     * @param {?=} args
     * @return {?}
     */
    LogService.prototype.invokeConsoleMethod = /**
     * @param {?} type
     * @param {?=} args
     * @return {?}
     */
    function (type, args) { };
    LogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */ LogService.ngInjectableDef = defineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
    return LogService;
}(Logger));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
var TrieRemoved = {
    REMOVED: 'removed',
    ABSENT: 'absent',
};
/** @enum {string} */
var TrieInsert = {
    ADDED: 'added',
    UPDATED: 'updated',
};
/** @enum {string} */
var TrieOp = {
    PLUS: '+',
    MINUS: '-',
};
var Trie = /** @class */ (function () {
    function Trie(op, trie, word, data) {
        this.p = trie;
        this.w = word.toUpperCase();
        this.s = this.w.split('');
        this.c = { p: this.p, s: this.s },
            this.t = [];
        this.x = 0;
        this.f1 = op === TrieOp.PLUS ? this.add : this.probe;
        this.f2 = op === TrieOp.PLUS ? this.insert : this.remove;
        this.data = data;
        while (this.c.s.length) {
            this.c = this.f1(this.c);
        }
    }
    /**
     * @param {?} cAdded
     * @return {?}
     */
    Trie.prototype.add = /**
     * @param {?} cAdded
     * @return {?}
     */
    function (cAdded) {
        /** @type {?} */
        var q = cAdded.s.shift();
        /** @type {?} */
        var np = cAdded.p[q];
        if (!np) {
            cAdded.p[q] = {};
            np = cAdded.p[q];
            this.x = 1;
        }
        return { p: np, s: cAdded.s };
    };
    /**
     * @param {?} cProbed
     * @return {?}
     */
    Trie.prototype.probe = /**
     * @param {?} cProbed
     * @return {?}
     */
    function (cProbed) {
        /** @type {?} */
        var q = cProbed.s.shift();
        /** @type {?} */
        var k = Object.keys(cProbed.p).length;
        /** @type {?} */
        var np = cProbed.p[q];
        this.t.push({ q: q, k: k, p: cProbed.p });
        if (!np) {
            this.t = [];
            return { p: [], s: [] };
        }
        return { p: np, s: cProbed.s };
    };
    /**
     * @return {?}
     */
    Trie.prototype.insert = /**
     * @return {?}
     */
    function () {
        this.c.p._data = this.data;
        return this.x ? TrieInsert.ADDED : TrieInsert.UPDATED;
    };
    /**
     * @return {?}
     */
    Trie.prototype.remove = /**
     * @return {?}
     */
    function () {
        if (this.t.length) {
            this.t = this.t.reverse();
            while (this.t.length) {
                /** @type {?} */
                var d = this.t.shift();
                delete d.p[d.q];
                if (d.k > 1) {
                    this.t = [];
                }
            }
            return TrieRemoved.REMOVED;
        }
        return TrieRemoved.ABSENT;
    };
    return Trie;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var matcher = /<\/?([a-zA-Z0-9]+)*(.*?)\/?>/igm;
/** @type {?} */
var whitelist = ['b', 'i', 'p', 'em', 'strong', 'br'];
/** @type {?} */
var evillist = ['script', 'style', 'iframe'];
/**
 * ONOS GUI -- Util -- General Purpose Functions
 */
var FnService = /** @class */ (function () {
    function FnService(route, log, w) {
        var _this = this;
        this.route = route;
        this.log = log;
        this.w = w;
        // internal state
        this.debugFlags = new Map([
        //        [ "LoadingService", true ]
        ]);
        this.route.queryParams.subscribe(function (params) {
            /** @type {?} */
            var debugparam = params['debug'];
            //            log.debug('Param:', debugparam);
            _this.parseDebugFlags(debugparam);
        });
        //        this.log.debug('FnService constructed');
    }
    /**
     * Test if an argument is a function
     *
     * Note: the need for this would go away if all functions
     * were strongly typed
     */
    /**
     * Test if an argument is a function
     *
     * Note: the need for this would go away if all functions
     * were strongly typed
     * @param {?} f
     * @return {?}
     */
    FnService.prototype.isF = /**
     * Test if an argument is a function
     *
     * Note: the need for this would go away if all functions
     * were strongly typed
     * @param {?} f
     * @return {?}
     */
    function (f) {
        return typeof f === 'function' ? f : null;
    };
    /**
     * Test if an argument is an array
     *
     * Note: the need for this would go away if all arrays
     * were strongly typed
     */
    /**
     * Test if an argument is an array
     *
     * Note: the need for this would go away if all arrays
     * were strongly typed
     * @param {?} a
     * @return {?}
     */
    FnService.prototype.isA = /**
     * Test if an argument is an array
     *
     * Note: the need for this would go away if all arrays
     * were strongly typed
     * @param {?} a
     * @return {?}
     */
    function (a) {
        // NOTE: Array.isArray() is part of EMCAScript 5.1
        return Array.isArray(a) ? a : null;
    };
    /**
     * Test if an argument is a string
     *
     * Note: the need for this would go away if all strings
     * were strongly typed
     */
    /**
     * Test if an argument is a string
     *
     * Note: the need for this would go away if all strings
     * were strongly typed
     * @param {?} s
     * @return {?}
     */
    FnService.prototype.isS = /**
     * Test if an argument is a string
     *
     * Note: the need for this would go away if all strings
     * were strongly typed
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return typeof s === 'string' ? s : null;
    };
    /**
     * Test if an argument is an object
     *
     * Note: the need for this would go away if all objects
     * were strongly typed
     */
    /**
     * Test if an argument is an object
     *
     * Note: the need for this would go away if all objects
     * were strongly typed
     * @param {?} o
     * @return {?}
     */
    FnService.prototype.isO = /**
     * Test if an argument is an object
     *
     * Note: the need for this would go away if all objects
     * were strongly typed
     * @param {?} o
     * @return {?}
     */
    function (o) {
        return (o && typeof o === 'object' && o.constructor === Object) ? o : null;
    };
    /**
     * Test that an array contains an object
     */
    /**
     * Test that an array contains an object
     * @param {?} a
     * @param {?} x
     * @return {?}
     */
    FnService.prototype.contains = /**
     * Test that an array contains an object
     * @param {?} a
     * @param {?} x
     * @return {?}
     */
    function (a, x) {
        return this.isA(a) && a.indexOf(x) > -1;
    };
    /**
     * Returns width and height of window inner dimensions.
     * offH, offW : offset width/height are subtracted, if present
     */
    /**
     * Returns width and height of window inner dimensions.
     * offH, offW : offset width/height are subtracted, if present
     * @param {?=} offH
     * @param {?=} offW
     * @return {?}
     */
    FnService.prototype.windowSize = /**
     * Returns width and height of window inner dimensions.
     * offH, offW : offset width/height are subtracted, if present
     * @param {?=} offH
     * @param {?=} offW
     * @return {?}
     */
    function (offH, offW) {
        if (offH === void 0) { offH = 0; }
        if (offW === void 0) { offW = 0; }
        return {
            height: this.w.innerHeight - offH,
            width: this.w.innerWidth - offW
        };
    };
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise.
     * Also returns false if there are properties on the api that are NOT
     * listed in the array of names.
     *
     * This gets extra complicated when the api Object is an
     * Angular service - while the functions can be retrieved
     * by an indexed get, the ownProperties does not show the
     * functions of the class. We have to dive in to the prototypes
     * properties to get these - and even then we have to filter
     * out the constructor and any member variables
     */
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise.
     * Also returns false if there are properties on the api that are NOT
     * listed in the array of names.
     *
     * This gets extra complicated when the api Object is an
     * Angular service - while the functions can be retrieved
     * by an indexed get, the ownProperties does not show the
     * functions of the class. We have to dive in to the prototypes
     * properties to get these - and even then we have to filter
     * out the constructor and any member variables
     * @param {?} api
     * @param {?} fnNames
     * @return {?}
     */
    FnService.prototype.areFunctions = /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise.
     * Also returns false if there are properties on the api that are NOT
     * listed in the array of names.
     *
     * This gets extra complicated when the api Object is an
     * Angular service - while the functions can be retrieved
     * by an indexed get, the ownProperties does not show the
     * functions of the class. We have to dive in to the prototypes
     * properties to get these - and even then we have to filter
     * out the constructor and any member variables
     * @param {?} api
     * @param {?} fnNames
     * @return {?}
     */
    function (api, fnNames) {
        /** @type {?} */
        var fnLookup = new Map();
        /** @type {?} */
        var extraFound = false;
        if (!this.isA(fnNames)) {
            return false;
        }
        /** @type {?} */
        var n = fnNames.length;
        /** @type {?} */
        var i;
        /** @type {?} */
        var name;
        for (i = 0; i < n; i++) {
            name = fnNames[i];
            if (!this.isF(api[name])) {
                return false;
            }
            fnLookup.set(name, true);
        }
        // check for properties on the API that are not listed in the array,
        /** @type {?} */
        var keys = Object.getOwnPropertyNames(api);
        if (keys.length === 0) {
            return true;
        }
        // If the api is a class it will have a name,
        //  else it will just be called 'Object'
        /** @type {?} */
        var apiObjectName = api.constructor.name;
        if (apiObjectName === 'Object') {
            Object.keys(api).forEach(function (key) {
                if (!fnLookup.get(key)) {
                    extraFound = true;
                }
            });
        }
        else { // It is a class, so its functions will be in the child (prototype)
            // It is a class, so its functions will be in the child (prototype)
            /** @type {?} */
            var pObj = Object.getPrototypeOf(api);
            for (var key in Object.getOwnPropertyDescriptors(pObj)) {
                if (key === 'constructor') { // Filter out constructor
                    continue;
                }
                /** @type {?} */
                var value = Object.getOwnPropertyDescriptor(pObj, key);
                // Only compare functions. Look for any not given in the map
                if (this.isF(value.value) && !fnLookup.get(key)) {
                    extraFound = true;
                }
            }
        }
        return !extraFound;
    };
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise. This is a non-strict version
     * that does not care about other properties on the api.
     */
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise. This is a non-strict version
     * that does not care about other properties on the api.
     * @param {?} api
     * @param {?} fnNames
     * @return {?}
     */
    FnService.prototype.areFunctionsNonStrict = /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise. This is a non-strict version
     * that does not care about other properties on the api.
     * @param {?} api
     * @param {?} fnNames
     * @return {?}
     */
    function (api, fnNames) {
        if (!this.isA(fnNames)) {
            return false;
        }
        /** @type {?} */
        var n = fnNames.length;
        /** @type {?} */
        var i;
        /** @type {?} */
        var name;
        for (i = 0; i < n; i++) {
            name = fnNames[i];
            if (!this.isF(api[name])) {
                return false;
            }
        }
        return true;
    };
    /**
     * Returns true if current browser determined to be a mobile device
     */
    /**
     * Returns true if current browser determined to be a mobile device
     * @return {?}
     */
    FnService.prototype.isMobile = /**
     * Returns true if current browser determined to be a mobile device
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = this.w.navigator.userAgent;
        /** @type {?} */
        var patt = /iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/;
        return patt.test(ua);
    };
    /**
     * Returns true if the current browser determined to be Chrome
     */
    /**
     * Returns true if the current browser determined to be Chrome
     * @return {?}
     */
    FnService.prototype.isChrome = /**
     * Returns true if the current browser determined to be Chrome
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isChromium = ((/** @type {?} */ (this.w))).chrome;
        /** @type {?} */
        var vendorName = this.w.navigator.vendor;
        /** @type {?} */
        var isOpera = this.w.navigator.userAgent.indexOf('OPR') > -1;
        return (isChromium !== null &&
            isChromium !== undefined &&
            vendorName === 'Google Inc.' &&
            isOpera === false);
    };
    /**
     * @return {?}
     */
    FnService.prototype.isChromeHeadless = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var vendorName = this.w.navigator.vendor;
        /** @type {?} */
        var headlessChrome = this.w.navigator.userAgent.indexOf('HeadlessChrome') > -1;
        return (vendorName === 'Google Inc.' && headlessChrome === true);
    };
    /**
     * Returns true if the current browser determined to be Safari
     */
    /**
     * Returns true if the current browser determined to be Safari
     * @return {?}
     */
    FnService.prototype.isSafari = /**
     * Returns true if the current browser determined to be Safari
     * @return {?}
     */
    function () {
        return (this.w.navigator.userAgent.indexOf('Safari') !== -1 &&
            this.w.navigator.userAgent.indexOf('Chrome') === -1);
    };
    /**
     * Returns true if the current browser determined to be Firefox
     */
    /**
     * Returns true if the current browser determined to be Firefox
     * @return {?}
     */
    FnService.prototype.isFirefox = /**
     * Returns true if the current browser determined to be Firefox
     * @return {?}
     */
    function () {
        return typeof InstallTrigger !== 'undefined';
    };
    /**
     * search through an array of objects, looking for the one with the
     * tagged property matching the given key. tag defaults to 'id'.
     * returns the index of the matching object, or -1 for no match.
     */
    /**
     * search through an array of objects, looking for the one with the
     * tagged property matching the given key. tag defaults to 'id'.
     * returns the index of the matching object, or -1 for no match.
     * @param {?} key
     * @param {?} array
     * @param {?=} tag
     * @return {?}
     */
    FnService.prototype.find = /**
     * search through an array of objects, looking for the one with the
     * tagged property matching the given key. tag defaults to 'id'.
     * returns the index of the matching object, or -1 for no match.
     * @param {?} key
     * @param {?} array
     * @param {?=} tag
     * @return {?}
     */
    function (key, array, tag) {
        if (tag === void 0) { tag = 'id'; }
        /** @type {?} */
        var idx;
        /** @type {?} */
        var n = array.length;
        for (idx = 0; idx < n; idx++) {
            /** @type {?} */
            var d = array[idx];
            if (d[tag] === key) {
                return idx;
            }
        }
        return -1;
    };
    /**
     * search through array to find (the first occurrence of) item,
     * returning its index if found; otherwise returning -1.
     */
    /**
     * search through array to find (the first occurrence of) item,
     * returning its index if found; otherwise returning -1.
     * @param {?} item
     * @param {?} array
     * @return {?}
     */
    FnService.prototype.inArray = /**
     * search through array to find (the first occurrence of) item,
     * returning its index if found; otherwise returning -1.
     * @param {?} item
     * @param {?} array
     * @return {?}
     */
    function (item, array) {
        if (this.isA(array)) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === item) {
                    return i;
                }
            }
        }
        return -1;
    };
    /**
     * remove (the first occurrence of) the specified item from the given
     * array, if any. Return true if the removal was made; false otherwise.
     */
    /**
     * remove (the first occurrence of) the specified item from the given
     * array, if any. Return true if the removal was made; false otherwise.
     * @param {?} item
     * @param {?} array
     * @return {?}
     */
    FnService.prototype.removeFromArray = /**
     * remove (the first occurrence of) the specified item from the given
     * array, if any. Return true if the removal was made; false otherwise.
     * @param {?} item
     * @param {?} array
     * @return {?}
     */
    function (item, array) {
        /** @type {?} */
        var i = this.inArray(item, array);
        if (i >= 0) {
            array.splice(i, 1);
            return true;
        }
        return false;
    };
    /**
     * return true if the object is empty, return false otherwise
     */
    /**
     * return true if the object is empty, return false otherwise
     * @param {?} obj
     * @return {?}
     */
    FnService.prototype.isEmptyObject = /**
     * return true if the object is empty, return false otherwise
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        for (var key in obj) {
            {
                return false;
            }
        }
        return true;
    };
    /**
     * returns true if the two objects have all the same properties
     */
    /**
     * returns true if the two objects have all the same properties
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    FnService.prototype.sameObjProps = /**
     * returns true if the two objects have all the same properties
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        for (var key in obj1) {
            if (obj1.hasOwnProperty(key)) {
                if (!(obj1[key] === obj2[key])) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * returns true if the array contains the object
     * does NOT use strict object reference equality,
     * instead checks each property individually for equality
     */
    /**
     * returns true if the array contains the object
     * does NOT use strict object reference equality,
     * instead checks each property individually for equality
     * @param {?} arr
     * @param {?} obj
     * @return {?}
     */
    FnService.prototype.containsObj = /**
     * returns true if the array contains the object
     * does NOT use strict object reference equality,
     * instead checks each property individually for equality
     * @param {?} arr
     * @param {?} obj
     * @return {?}
     */
    function (arr, obj) {
        /** @type {?} */
        var len = arr.length;
        for (var i = 0; i < len; i++) {
            if (this.sameObjProps(arr[i], obj)) {
                return true;
            }
        }
        return false;
    };
    /**
     * Return the given string with the first character capitalized.
     */
    /**
     * Return the given string with the first character capitalized.
     * @param {?} s
     * @return {?}
     */
    FnService.prototype.cap = /**
     * Return the given string with the first character capitalized.
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return s ? s[0].toUpperCase() + s.slice(1).toLowerCase() : s;
    };
    /**
     * return the parameter without a px suffix
     */
    /**
     * return the parameter without a px suffix
     * @param {?} num
     * @return {?}
     */
    FnService.prototype.noPx = /**
     * return the parameter without a px suffix
     * @param {?} num
     * @return {?}
     */
    function (num) {
        return Number(num.replace(/px$/, ''));
    };
    /**
     * return an element's given style property without px suffix
     */
    /**
     * return an element's given style property without px suffix
     * @param {?} elem
     * @param {?} prop
     * @return {?}
     */
    FnService.prototype.noPxStyle = /**
     * return an element's given style property without px suffix
     * @param {?} elem
     * @param {?} prop
     * @return {?}
     */
    function (elem, prop) {
        return Number(elem.style(prop).replace(/px$/, ''));
    };
    /**
     * Return true if a str ends with suffix
     */
    /**
     * Return true if a str ends with suffix
     * @param {?} str
     * @param {?} suffix
     * @return {?}
     */
    FnService.prototype.endsWith = /**
     * Return true if a str ends with suffix
     * @param {?} str
     * @param {?} suffix
     * @return {?}
     */
    function (str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };
    /**
     * output debug message to console, if debug tag set...
     * e.g. fs.debug('mytag', arg1, arg2, ...)
     */
    /**
     * output debug message to console, if debug tag set...
     * e.g. fs.debug('mytag', arg1, arg2, ...)
     * @param {?} tag
     * @param {...?} args
     * @return {?}
     */
    FnService.prototype.debug = /**
     * output debug message to console, if debug tag set...
     * e.g. fs.debug('mytag', arg1, arg2, ...)
     * @param {?} tag
     * @param {...?} args
     * @return {?}
     */
    function (tag) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.debugFlags.get(tag)) ;
    };
    /**
     * @param {?} dbgstr
     * @return {?}
     */
    FnService.prototype.parseDebugFlags = /**
     * @param {?} dbgstr
     * @return {?}
     */
    function (dbgstr) {
        var _this = this;
        /** @type {?} */
        var bits = dbgstr ? dbgstr.split(',') : [];
        bits.forEach(function (key) {
            _this.debugFlags.set(key, true);
        });
        //        this.log.debug('Debug flags:', dbgstr);
    };
    /**
      * Return true if the given debug flag was specified in the query params
      */
    /**
     * Return true if the given debug flag was specified in the query params
     * @param {?} tag
     * @return {?}
     */
    FnService.prototype.debugOn = /**
     * Return true if the given debug flag was specified in the query params
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        return this.debugFlags.get(tag);
    };
    // -----------------------------------------------------------------
    // The next section deals with sanitizing external strings destined
    // to be loaded via a .html() function call.
    //
    // See definition of matcher, evillist and whitelist at the top of this file
    /*
     * Returns true if the tag is in the evil list, (and is not an end-tag)
     */
    // -----------------------------------------------------------------
    // The next section deals with sanitizing external strings destined
    // to be loaded via a .html() function call.
    //
    // See definition of matcher, evillist and whitelist at the top of this file
    /*
         * Returns true if the tag is in the evil list, (and is not an end-tag)
         */
    /**
     * @param {?} tag
     * @return {?}
     */
    FnService.prototype.inEvilList = 
    // -----------------------------------------------------------------
    // The next section deals with sanitizing external strings destined
    // to be loaded via a .html() function call.
    //
    // See definition of matcher, evillist and whitelist at the top of this file
    /*
         * Returns true if the tag is in the evil list, (and is not an end-tag)
         */
    /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        return (evillist.indexOf(tag.name) !== -1 && tag.full.indexOf('/') === -1);
    };
    /*
     * Returns an array of Matches of matcher in html
     */
    /*
         * Returns an array of Matches of matcher in html
         */
    /**
     * @param {?} html
     * @return {?}
     */
    FnService.prototype.analyze = /*
         * Returns an array of Matches of matcher in html
         */
    /**
     * @param {?} html
     * @return {?}
     */
    function (html) {
        /** @type {?} */
        var matches = [];
        /** @type {?} */
        var match;
        // extract all tags
        while ((match = matcher.exec(html)) !== null) {
            matches.push({
                full: match[0],
                name: match[1],
            });
        }
        return matches;
    };
    /*
     * Returns a cleaned version of html
     */
    /*
         * Returns a cleaned version of html
         */
    /**
     * @param {?} html
     * @return {?}
     */
    FnService.prototype.sanitize = /*
         * Returns a cleaned version of html
         */
    /**
     * @param {?} html
     * @return {?}
     */
    function (html) {
        var _this = this;
        /** @type {?} */
        var matches = this.analyze(html);
        // completely obliterate evil tags and their contents...
        evillist.forEach(function (tag) {
            /** @type {?} */
            var re = new RegExp('<' + tag + '(.*?)>(.*?[\r\n])*?(.*?)(.*?[\r\n])*?<\/' + tag + '>', 'gim');
            html = html.replace(re, '');
        });
        // filter out all but white-listed tags and end-tags
        matches.forEach(function (tag) {
            if (whitelist.indexOf(tag.name) === -1) {
                html = html.replace(tag.full, '');
                if (_this.inEvilList(tag)) {
                    _this.log.warn('Unsanitary HTML input -- ' +
                        tag.full + ' detected!');
                }
            }
        });
        // TODO: consider encoding HTML entities, e.g. '&' -> '&amp;'
        return html;
    };
    /**
     * add word to trie (word will be converted to uppercase)
     * data associated with the word
     * returns 'added' or 'updated'
     */
    /**
     * add word to trie (word will be converted to uppercase)
     * data associated with the word
     * returns 'added' or 'updated'
     * @param {?} trie
     * @param {?} word
     * @param {?} data
     * @return {?}
     */
    FnService.prototype.addToTrie = /**
     * add word to trie (word will be converted to uppercase)
     * data associated with the word
     * returns 'added' or 'updated'
     * @param {?} trie
     * @param {?} word
     * @param {?} data
     * @return {?}
     */
    function (trie, word, data) {
        return new Trie(TrieOp.PLUS, trie, word, data);
    };
    /**
     * remove word from trie (word will be converted to uppercase)
     * returns 'removed' or 'absent'
     */
    /**
     * remove word from trie (word will be converted to uppercase)
     * returns 'removed' or 'absent'
     * @param {?} trie
     * @param {?} word
     * @return {?}
     */
    FnService.prototype.removeFromTrie = /**
     * remove word from trie (word will be converted to uppercase)
     * returns 'removed' or 'absent'
     * @param {?} trie
     * @param {?} word
     * @return {?}
     */
    function (trie, word) {
        return new Trie(TrieOp.MINUS, trie, word);
    };
    /**
     * lookup word (converted to uppercase) in trie
     * returns:
     *    undefined if the word is not in the trie
     *    -1 for a partial match (word is a prefix to an existing word)
     *    data for the word for an exact match
     */
    /**
     * lookup word (converted to uppercase) in trie
     * returns:
     *    undefined if the word is not in the trie
     *    -1 for a partial match (word is a prefix to an existing word)
     *    data for the word for an exact match
     * @param {?} trie
     * @param {?} word
     * @return {?}
     */
    FnService.prototype.trieLookup = /**
     * lookup word (converted to uppercase) in trie
     * returns:
     *    undefined if the word is not in the trie
     *    -1 for a partial match (word is a prefix to an existing word)
     *    data for the word for an exact match
     * @param {?} trie
     * @param {?} word
     * @return {?}
     */
    function (trie, word) {
        /** @type {?} */
        var s = word.toUpperCase().split('');
        /** @type {?} */
        var p = trie;
        /** @type {?} */
        var n;
        while (s.length) {
            n = s.shift();
            p = p[n];
            if (!p) {
                return undefined;
            }
        }
        if (p._data) {
            return p._data;
        }
        return -1;
    };
    FnService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    FnService.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: LogService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ FnService.ngInjectableDef = defineInjectable({ factory: function FnService_Factory() { return new FnService(inject(ActivatedRoute), inject(LogService), inject("Window")); }, token: FnService, providedIn: "root" });
    return FnService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- OnosService - a placeholder for the global onos variable
 */
var OnosService = /** @class */ (function () {
    function OnosService(log) {
        this.log = log;
        //        this.log.debug('OnosService constructed');
    }
    OnosService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    OnosService.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    /** @nocollapse */ OnosService.ngInjectableDef = defineInjectable({ factory: function OnosService_Factory() { return new OnosService(inject(LogService)); }, token: OnosService, providedIn: "root" });
    return OnosService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Detect Browser Directive
 */
var DetectBrowserDirective = /** @class */ (function () {
    function DetectBrowserDirective(fs, log, onos, w) {
        this.fs = fs;
        this.log = log;
        this.onos = onos;
        this.w = w;
        /** @type {?} */
        var body = document.getElementsByTagName('body')[0];
        //        let body = d3.select('body');
        /** @type {?} */
        var browser = '';
        if (fs.isChrome()) {
            browser = 'chrome';
        }
        else if (fs.isChromeHeadless()) {
            browser = 'chromeheadless';
        }
        else if (fs.isSafari()) {
            browser = 'safari';
        }
        else if (fs.isFirefox()) {
            browser = 'firefox';
        }
        else {
            this.log.warn('Unknown browser. ', 'Vendor:', this.w.navigator.vendor, 'Agent:', this.w.navigator.userAgent);
            return;
        }
        body.classList.add(browser);
        //        body.classed(browser, true);
        this.onos.browser = browser;
        if (fs.isMobile()) {
            body.classList.add('mobile');
            this.onos.mobile = true;
        }
        //        this.log.debug('Detected browser is', fs.cap(browser));
    }
    DetectBrowserDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[onosDetectBrowser]'
                },] },
    ];
    /** @nocollapse */
    DetectBrowserDirective.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: OnosService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    return DetectBrowserDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS logo glyph
 *
 * TODO: Some major refactoring needs to go on here to make this more understandable
 * @type {?}
 */
var logos = new Map([
    ['_bird', '352 224 113 112'],
    ['bird', 'M427.7,300.4 c-6.9,0.6-13.1,5-19.2,7.1c-18.1,6.2-33.9,' +
            '9.1-56.5,4.7c24.6,17.2,36.6,13,63.7,0.1c-0.5,0.6-0.7,1.3-1.3,' +
            '1.9c1.4-0.4,2.4-1.7,3.4-2.2c-0.4,0.7-0.9,1.5-1.4,1.9c2.2-0.6,' +
            '3.7-2.3,5.9-3.9c-2.4,2.1-4.2,5-6,8c-1.5,2.5-3.1,4.8-5.1,6.9c-1,' +
            '1-1.9,1.9-2.9,2.9c-1.4,1.3-2.9,2.5-5.1,2.9c1.7,0.1,3.6-0.3,6.5' +
            '-1.9c-1.6,2.4-7.1,6.2-9.9,7.2c10.5-2.6,19.2-15.9,25.7-18c18.3' +
            '-5.9,13.8-3.4,27-14.2c1.6-1.3,3-1,5.1-0.8c1.1,0.1,2.1,0.3,3.2,' +
            '0.5c0.8,0.2,1.4,0.4,2.2,0.8l1.8,0.9c-1.9-4.5-2.3-4.1-5.9-6c-2.3' +
            '-1.3-3.3-3.8-6.2-4.9c-7.1-2.6-11.9,11.7-11.7-5c0.1-8,4.2-14.4,' +
            '6.4-22c1.1-3.8,2.3-7.6,2.4-11.5c0.1-2.3,0-4.7-0.4-7c-2-11.2-8.4' +
            '-21.5-19.7-24.8c-1-0.3-1.1-0.3-0.9,0c9.6,17.1,7.2,38.3,3.1,54.2' +
            'C429.9,285.5,426.7,293.2,427.7,300.4z'],
    ['_cord', '0 0 110 110'],
    ['cord', 'M92.5,62.3l-33,33,2.5,2.5c4.1,4.1,7.4,3.6,11.2-.1L95.9,75' +
            'l-4.5-4.5,4.7-4.7-3.6-3.6Z' +
            'm2.6,7L98.4,66l3.3,3.3-3.3,3.3-3.3-3.3Z' +
            'M94.5,60l4.9-4.9,4.9,4.9-4.9,4.9Z' +
            'M36.2,36.1L18.6,53.8c-7.8,7.8-5.8,17.4-2.4,22l-2.2-2.2' +
            'c-10.6-10.6-11.2-20,0-31.2L28.2,28.1L31.3,25l8,8-3.1,3.1Z' +
            'M55.5,55.4l3.6-3.6L66.9,44l-8-8l-2.5,2.5-5.2,5.2l-3.6,3.6' +
            'L33.2,61.6C22,72.7,22.5,82.2,33.2,92.8L35.4,95' +
            'c-3.4-4.5-5.4-14.1,2.4-22L55.5,55.4Z' +
            'M50.7,21.7l-8-8L35,21.2l8,8,7.6-7.6Z' +
            'M62.8,9.6L55.4,17l-8-8,7.4-7.4,8,8Z' +
            'm0.7,18.3-7.6,7.6-8-8,7.6-7.6,8,8Z' +
            'm26.1-6.6-8.1,8.1-8-8,8.1-8.1,8,8Z' +
            'M79.3,31.5l-7.4,7.4-8-8,7.4-7.4,8,8Z' +
            'M45.7,45.6L54.3,37l-8-8-8.6,8.6L23.4,51.8' +
            'C12.2,63,12.8,72.4,23.4,83l2.2,2.2c-3.4-4.5-5.4-14.1,2.4-22Z' +
            'M34.9,80.7l20.6,20.5c2,2,4.6,4.1,7.9,3.2-2.9,2.9-8.9,1.7-11.9-1.3' +
            'L35.1,86.8,35,86.6H34.9l-0.8-.8' +
            'a15,15,0,0,1,.1-1.9,14.7,14.7,0,0,1,.7-3.2Z' +
            'm-0.6,7.4a21.3,21.3,0,0,0,5.9,11.7l5.7,5.7' +
            'c3,3,9,4.1,11.9,1.3-3.3.9-5.9-1.2-7.9-3.2L34.3,88.1Z' +
            'm3.5-12.4a16.6,16.6,0,0,0-2.3,3.6L57,100.8' +
            'c3,3,9,4.1,11.9,1.3-3.3.9-5.9-1.2-7.9-3.2Z'],
]);
// --- Core glyphs ------------------------------------
// NOTE: when adding glyphs, please also update GlyphConstants class.
/** @type {?} */
var tableFrame = 'M6.3,5.3h8.5v14.2h-8.5z' +
    'M95.3,5.3h8.5v14.2h-8.5z' +
    'M18.5,5.3h15.6v14.2h-15.6z' +
    'M37.9,5.3h15.6v14.2h-15.6z' +
    'M57,5.3h15.6v14.2h-15.6z' +
    'M76.1,5.3h15.6v14.2h-15.6z' +
    'M6.3,23.9h97.5v80.75h-97.5z';
/** @type {?} */
var rSquare = 'M10,20a10,10,0,0,1,10-10h70a10,10,0,0,1,10,10v70a10,10,' +
    '0,0,1-10,10h-70a10,10,0,0,1-10-10z';
/** @type {?} */
var octagon = 'M10,35l25-25h40l25,25v40l-25,25h-40l-25-25z';
/** @type {?} */
var circle = 'M10,55A45,45,0,0,1,100,55A45,45,0,0,1,10,55';
/** @type {?} */
var arrowsLR = 'M58,26l12,0,0-8,18,13-18,13,0-8-12,0z' +
    'M58,60l12,0,0-8,18,13-18,13,0-8-12,0z' +
    'M52,40l-12,0,0-8-18,13,18,13,0-8,12,0z' +
    'M52,74l-12,0,0-8-18,13,18,13,0-8,12,0z';
/** @type {?} */
var arrowsInHOutV = 'M20,50l12,0,0-8,18,13-18,13,0-8-12,0z' +
    'M90,50l-12,0,0-8-18,13,18,13,0-8,12,0z' +
    'M50,47l0-12-8,0,13-18,13,18-8,0,0,12z' +
    'M50,63l0,12-8,0,13,18,13-18-8,0,0-12z';
/** @type {?} */
var laser = 'M47.2,68.4L31.1,84.5,25.6,79,41.7,62.9Z' +
    'M76.3,30.6A3.4,3.4,0,0,0,72.9,34a3.3,3.3,0,0,0,.3,1.3L44.7,63.7' +
    'l1.7,1.7L74.8,37a3.2,3.2,0,0,0,1.5.4A3.4,3.4,0,1,0,76.3,30.6Z' +
    'm0.9-2.9V23.8a0.8,0.8,0,0,0-.8-0.8H76.1a0.8,0.8,0,0,0-.8.8v3.9' +
    'a0.8,0.8,0,0,0,.8.8h0.3A0.8,0.8,0,0,0,77.2,27.7Z' +
    'm3.5,3.2,3.6-3.6a0.9,0.9,0,0,0,0-1.2H84.3a0.9,0.9,0,0,0-1.2,0' +
    'l-3.6,3.6a0.9,0.9,0,0,0,0,1.2h0.1A0.9,0.9,0,0,0,80.7,30.9Z' +
    'm1.8,4h3.9a0.8,0.8,0,0,0,.8-0.8V33.7a0.8,0.8,0,0,0-.8-0.8H82.6' +
    'a0.8,0.8,0,0,0-.8.8V34A0.8,0.8,0,0,0,82.6,34.8Z' +
    'm-16.3.1h3.9a0.8,0.8,0,0,0,.8-0.8V33.8a0.8,0.8,0,0,0-.8-0.8' +
    'H66.2a0.8,0.8,0,0,0-.8.8v0.3A0.8,0.8,0,0,0,66.2,34.9Z' +
    'm6.8-5.2-3.8-3.8a0.9,0.9,0,0,0-1.3,0a0.9,0.9,0,0,0,0,1.3' +
    'L71.8,31A0.9,0.9,0,0,0,73,31A0.9,0.9,0,0,0,73.1,29.7Z' +
    'M84.8,40.9L80.9,37a0.9,0.9,0,0,0-1.3,0a0.9,0.9,0,0,0,0,1.3' +
    'l3.9,3.9a0.9,0.9,0,0,0,1.3,0A0.9,0.9,0,0,0,84.8,40.9Z' +
    'm-7.6,3.2V40.2a0.8,0.8,0,0,0-.8-0.8H76.2a0.8,0.8,0,0,0-.8.8' +
    'v3.9a0.8,0.8,0,0,0,.8.8h0.3A0.8,0.8,0,0,0,77.3,44.1Z';
/** @type {?} */
var fiberStar = 'M89,60V57H70.6a15,15,0,0,1-3.2,7.6l13,12.9L82.8,75v7.5' +
    'H75.2l2.2-2.2-12.8-13A14.9,14.9,0,0,1,57,70.6V89h3.1l-5.3,5.4' +
    'L49.4,89H53V70.6a13.2,13.2,0,0,1-8-3.2l-13.1,13,2.3,2.3H26.5' +
    'V75.1l2.3,2.3,13-12.8A15,15,0,0,1,38.7,57H21v3l-5.4-5.4L21,49.3' +
    'V53H38.7a13.1,13.1,0,0,1,3.2-8l-13-13.1-2.2,2.1V26.4h7.5l-2.4,2.4' +
    'L45,41.8a13.2,13.2,0,0,1,8-3.2V21H49.4l5.4-5.4L60.1,21H57V38.6' +
    'a14.9,14.9,0,0,1,7.6,3.2l12.9-13-2.4-2.3h7.5v7.6l-2.3-2.3L67.4,45' +
    'a13.1,13.1,0,0,1,3.2,8H89V49.3l5.4,5.3Z';
/** @type {?} */
var glyphDataSet = new Map([
    ['_viewbox', '0 0 110 110'],
    ['uiAttached', 'M91.9,16.7H18.1A5.3,5.3,0,0,0,12.8,22V68' +
            'a5.3,5.3,0,0,0,5.3,5.3H91.9A5.3,5.3,0,0,0,97.2,68V22' +
            'A5.3,5.3,0,0,0,91.9,16.7ZM91.6,65.2H18.4V22.3H91.6V65.2Z' +
            'M71.5,87.5h3.8v5.9h-40.6v-5.9h3.8v-1.7h5.4v-9.7h22.3v9.7h5.3v1.7z'],
    // Small dot
    ['unknown', 'M35,40a5,5,0,0,1,5-5h30a5,5,0,0,1,5,5v30a5,5,0,0,1-5,5' +
            'h-30a5,5,0,0,1-5-5z'],
    // Question mark for unknown device types
    ['query', 'M51.4,69.9c0-0.9,0-1.6,0-2.1c0-2.7,0.4-5.1,1.2-7.1' +
            'c0.6-1.5,1.5-3,2.8-4.5c0.9-1.1,2.6-2.7,5.1-4.8c2.4-2.1,4-3.8,' +
            '4.8-5.1 c0.7-1.3,1.1-2.6,1.1-4.1c0-2.7-1.1-5.1-3.2-7.1c-2.1-2' +
            '-4.8-3.1-7.9-3.1c-3,0-5.5,0.9-7.5,2.8c-2,1.9-3.3,4.8-4,8.7l-7.2' +
            '-0.8 c0.7-5.3,2.6-9.3,5.8-12.1c3.2-2.8,7.5-4.2,12.8-4.2c5.6,0,' +
            '10.1,1.5,13.4,4.5c3.3,3,5,6.7,5,10.9c0,2.5-0.6,4.8-1.8,6.8 ' +
            's-3.5,4.6-6.9,7.6c-2.3,2-3.8,3.5-4.5,4.4c-0.7,1-1.2,2-1.6,3.3' +
            'c-0.3,1.2-0.5,3.2-0.6,6H51.4z M51,83.8v-7.9h8v7.9H51z'],
    // --- ONOS cluster node ---
    ['node', 'M15,100a5,5,0,0,1-5-5v-65a5,5,0,0,1,5-5h80a5,5,0,0,1,5,5' +
            'v65a5,5,0,0,1-5,5zM14,22.5l11-11a10,3,0,0,1,10-2h40a10,3,0,0,1,' +
            '10,2l11,11zM16,35a5,5,0,0,1,10,0a5,5,0,0,1-10,0z'],
    // --- DEVICES ---
    // See Device.DeviceType enum for the following...
    // NOTE: 'other' should map to 'unknown' (.) above
    // deprecated glyphs -- using Mojo Designs below -- m_*
    ['switch', rSquare + arrowsLR],
    ['router', circle + arrowsInHOutV],
    ['roadm', octagon + arrowsLR],
    ['otn', rSquare + laser],
    ['roadm_otn', octagon + laser],
    ['fiber_switch', rSquare + fiberStar],
    ['microwave', 'M85,71.2c-8.9,10.5-29.6,8.7-45.3-3.5C23.9,55.4,19.8,' +
            '37,28.6,26.5C29.9,38.6,71.5,69.9,85,71.2z M92.7,76.2M16.2,15 ' +
            'M69.5,100.7v-4c0-1.4-1.2-2.2-2.6-2.2H19.3c-1.4,0-2.8,0.7-2.8,2.2' +
            'v3.9c0,0.7,0.8,1,1.5,1h50.3C69,101.5,69.5,101.3,69.5,100.7z ' +
            'M77.3,7.5l0,3.7c9,0.1,16.3,7.1,16.2,15.7l3.9,0C97.5,16.3,88.5,' +
            '7.6,77.3,7.5z M77.6,14.7l0,2.5c5.3,0,9.7,4.2,9.6,9.3l2.6,0C89.9' +
            ',20,84.4,14.7,77.6,14.7z M82.3,22.2c-1.3-1.2-2.9-1.9-4.7-1.9' +
            'l0,1.2c1.4,0,2.8,0.6,3.8,1.5c1,1,1.6,2.3,1.6,3.7l1.3,0C84.3,25.1,' +
            '83.6,23.4,82.3,22.2z M38.9,69.5l-5.1,23h16.5l-2.5-17.2C44.1,73.3,' +
            '38.9,69.5,38.9,69.5zM58.1,54.1c13.7,10.1,26.5,16.8,29.2,13.7' +
            'c2.7-3.1-5.6-13-19.3-24.4 M62.9,34.2 M62,37.9C47.7,27.3,33.7,20,' +
            '31,23.1c-2.7,3.2,7,14.2,20.6,26 M73.9,25.7c-2.9,0.1-5.2,2.3-5.1,' +
            '4.8c0,0.7,0.2,1.4,0.6,2l0,0L53.8,49.7l3.3,2.5L72.7,35l-0.4-0.3' +
            'c0.6,0.2,1.3,0.3,1.9,0.3c2.9-0.1,5.2-2.3,5.1-4.9C79.3,27.6,76.8,' +
            '25.6,73.9,25.7z'],
    // NOTE: 'unrecognized' should map to 'query' (?) above
    // --- HOSTS ---
    // default glyph for a host
    ['endstation', 'M10,15a5,5,0,0,1,5-5h65a5,5,0,0,1,5,5v80a5,5,0,0,1' +
            '-5,5h-65a5,5,0,0,1-5-5zM87.5,14l11,11a3,10,0,0,1,2,10v40a3,10,' +
            '0,0,1,-2,10l-11,11zM17,19a2,2,0,0,1,2-2h56a2,2,0,0,1,2,2v26a2,' +
            '2,0,0,1-2,2h-56a2,2,0,0,1-2-2zM20,20h54v10h-54zM20,33h54v10h' +
            '-54zM42,70a5,5,0,0,1,10,0a5,5,0,0,1-10,0z'],
    ['bgpSpeaker', 'M10,40a45,35,0,0,1,90,0Q100,77,55,100Q10,77,10,40z' +
            'M50,29l12,0,0-8,18,13-18,13,0-8-12,0zM60,57l-12,0,0-8-18,13,' +
            '18,13,0-8,12,0z'],
    // --- Miscellaneous glyphs ---------------------------------
    ['chain', 'M60.4,77.6c-4.9,5.2-9.6,11.3-15.3,16.3c-8.6,7.5-20.4,6.8' +
            '-28-0.8c-7.7-7.7-8.4-19.6-0.8-28.4c6.5-7.4,13.5-14.4,20.9-20.9' +
            'c7.5-6.7,19.2-6.7,26.5-0.8c3.5,2.8,4.4,6.1,2.2,8.7c-2.7,3.1' +
            '-5.5,2.5-8.5,0.3c-4.7-3.4-9.7-3.2-14,0.9C37.1,58.7,31,64.8,' +
            '25.2,71c-4.2,4.4-4.2,10.6-0.6,14.3c3.7,3.7,9.7,3.7,14.3-0.4' +
            'c2.9-2.5,5.3-5.5,8.3-8c1-0.9,3-1.1,4.4-0.9C54.8,76.3,57.9,77.1,' +
            '60.4,77.6zM49.2,32.2c5-5.2,9.7-10.9,15.2-15.7c12.8-11,31.2' +
            '-4.9,34.3,11.2C100,34.2,98.3,40.2,94,45c-6.7,7.4-13.7,14.6' +
            '-21.2,21.2C65.1,73,53.2,72.7,46,66.5c-3.2-2.8-3.9-5.8-1.6-8.4' +
            'c2.6-2.9,5.3-2.4,8.2-0.3c5.2,3.7,10,3.3,14.7-1.1c5.8-5.6,11.6' +
            '-11.3,17.2-17.2c4.6-4.8,4.9-11.1,0.9-15c-3.9-3.9-10.1-3.4-15,' +
            '1.2c-3.1,2.9-5.7,7.4-9.3,8.5C57.6,35.3,53,33,49.2,32.2z'],
    ['crown', 'M99.5,21.6c0,3-2.3,5.4-5.1,5.4c-0.3,0-0.7,0-1-0.1c-1.8,' +
            '4-4.8,10-7.2,17.3c-3.4,10.6-0.9,26.2,2.7,27.3C90.4,72,91.3,' +
            '75,88,75H22.7c-3.3,0-2.4-3-0.9-3.5c3.6-1.1,6.1-16.7,2.7-27.3' +
            'c-2.4-7.4-5.4-13.5-7.2-17.5c-0.5,0.2-1,0.3-1.6,0.3c-2.8,0' +
            '-5.1-2.4-5.1-5.4c0-3,2.3-5.4,5.1-5.4c2.8,0,5.1,2.4,5.1,5.4c0,' +
            '1-0.2,1.9-0.7,2.7c0.7,0.8,1.4,1.6,2.4,2.6c8.8,8.9,11.9,12.7,' +
            '18.1,11.7c6.5-1,11-8.2,13.3-14.1c-2-0.8-3.3-2.7-3.3-5.1c0-3,' +
            '2.3-5.4,5.1-5.4c2.8,0,5.1,2.4,5.1,5.4c0,2.5-1.6,4.5-3.7,5.2' +
            'c2.3,5.9,6.8,13,13.2,14c6.2,1,9.3-2.7,18.1-11.7c0.7-0.7,1.4' +
            '-1.5,2-2.1c-0.6-0.9-1-2-1-3.1c0-3,2.3-5.4,5.1-5.4C97.2,16.2,' +
            '99.5,18.6,99.5,21.6zM92,87.9c0,2.2-1.7,4.1-3.8,4.1H22.4c' +
            '-2.1,0-4.4-1.9-4.4-4.1v-3.3c0-2.2,2.3-4.5,4.4-4.5h65.8c2.1,' +
            '0,3.8,2.3,3.8,4.5V87.9z'],
    ['lock', 'M79.4,48.6h-2.7c0.2-5.7-0.2-20.4-7.9-28.8c-3.6-3.9-8.3' +
            '-5.9-13.7-5.9c-5.4,0-10.2,2-13.8,5.9c-7.8,8.4-8.3,23.2-8.1,28.8' +
            'h-2.7c-4.4,0-8,2.6-8,5.9v35.7c0,3.3,3.6,5.9,8,5.9h48.9c4.4,0,' +
            '8-2.6,8-5.9V54.5C87.5,51.3,83.9,48.6,79.4,48.6z M48.1,26.1c1.9' +
            '-2,4.1-2.9,7-2.9c2.9,0,5.1,0.9,6.9,2.9c5,5.4,5.6,17.1,5.4,22.6' +
            'h-25C42.3,43.1,43.1,31.5,48.1,26.1z'],
    ['topo', 'M97.2,76.3H86.6l-7.7-21.9H82c1,0,1.9-0.8,1.9-1.9V35.7c' +
            '0-1-0.8-1.9-1.9-1.9H65.2c-1,0-1.9,0.8-1.9,1.9v2.6L33.4,26.1v-11' +
            'c0-1-0.8-1.9-1.9-1.9H14.7c-1,0-1.9,0.8-1.9,1.9v16.8c0,1,0.8,' +
            '1.9,1.9,1.9h16.8c1,0,1.9-0.8,1.9-1.9v-2.6l29.9,12.2v9L30.5,76.9' +
            'c-0.3-0.3-0.8-0.5-1.3-0.5H12.4c-1,0-1.9,0.8-1.9,1.9V95c0,1,0.8,' +
            '1.9,1.9,1.9h16.8c1,0,1.9-0.8,1.9-1.9v-6.9h47.4V95c0,1,0.8,1.9,' +
            '1.9,1.9h16.8c1,0,1.9-0.8,1.9-1.9V78.2C99.1,77.2,98.2,76.3,97.2,' +
            '76.3z M31.1,85.1v-4.9l32.8-26.4c0.3,0.3,0.8,0.5,1.3,0.5h10.5l' +
            '7.7,21.9h-3c-1,0-1.9,0.8-1.9,1.9v6.9H31.1z'],
    ['refresh',
        'M99.7,53.8l-10,13.3L85,73.5,78,64,70.4,53.7h9' +
            'A28.5,28.5,0,1,0,68.3,77.6l10.6,6.9A40.7,40.7,0,1,1,91.6,53.8h8.2Z'],
    ['garbage', 'M55.1,31.1c9.4,0,18.7.1,28.1-.1,3.2-.1,4.2,1,3.7,4.1' +
            'q-4.1,28.6-8,57.3c-0.3,2.3-1.3,3.4-3.5,3.4h-41' +
            'c-2.2,0-2.9-1.2-3.2-3.2Q27,63.5,22.7,34.4c-0.4-2.8.6-3.4,3.1-3.4' +
            'H55.1Z' +
            'M44.3,81.9c0.4-1.1-2.5-27.4-3.8-40.5a3.2,3.2,0,0,0-3.7-3.2' +
            'c-2.5.1-2.5,1.9-2.4,3.7,0.5,4.9,1,9.8,1.5,14.7,0.8,8.1,1.6,16.2,' +
            '2.4,24.2,0.2,2.2,1.1,4.1,3.6,3.4A3.6,3.6,0,0,0,44.3,81.9Z' +
            'm21.2,0a2.8,2.8,0,0,0,2.2,2.3' +
            'c2.3,0.8,3.7-.7,4-3.1,1.3-12.9,2.6-25.7,3.8-38.6,0.2-2,.3-4.1-2.6-4.4' +
            's-3.3,1.7-3.5,3.7C68.1,54.8,65.5,81.1,65.5,81.9Z' +
            'M57.9,61.3q0-9.8,0-19.6c0-2.2-.8-3.6-3.2-3.5s-2.6,1.7-2.6,3.6' +
            'q0,19.4,0,38.8c0,1.9,0,3.8,2.8,3.9s3-1.8,3-3.9Q57.9,70.9,57.9,61.3Z' +
            'M19,24.7c0.3-2,.5-5.7,1.5-8a5.1,5.1,0,0,1,3.6-2.3' +
            'c5.5-.5,17.3-0.8,17.3-0.8l4.3-3.3H62.9l5.6,3.5S84.5,14.6,87,15' +
            's2.5,0.7,3.2,1.9,0.9,7.4.9,7.4Z'],
    ['cog', 'M100.2,46.4L87.1,44.8l-2.1-5L93.1,29a2.3,2.3,0,0,0-.2-3' +
            'l-8.7-8.8a2.4,2.4,0,0,0-3.1-.2l-11,7.9L66,23.1,63.1,9.5' +
            'A2.1,2.1,0,0,0,60.8,8H49.3A2.1,2.1,0,0,0,47,9.5L44.2,22.7l-5,2.2' +
            'L28.8,16.8a2.3,2.3,0,0,0-3.1.2l-9.2,9.2a2.4,2.4,0,0,0-.2,3.2' +
            'l8.1,10.4-1.7,4.1L9.8,46.4A2.3,2.3,0,0,0,8,48.7V61.9' +
            'a2.3,2.3,0,0,0,2,2.4L22.6,66l1.7,5.2-7.7,10a2.4,2.4,0,0,0,.2,3.2' +
            'l9.1,9a2.4,2.4,0,0,0,3.3.1l9-8.2,4.8,2.2,2.6,12.7' +
            'a2.3,2.3,0,0,0,2.4,1.9l13.9-.2a2.5,2.5,0,0,0,2.3-2.4' +
            'l0.7-11.4,5.5-2.3,9.8,8.1a2.4,2.4,0,0,0,3.2-.1L93,83.9' +
            'a2.4,2.4,0,0,0,.1-3.3L84.7,71,87,66l13.2-2.5a2.3,2.3,0,0,0,1.9-2.3' +
            'l0.2-12.5A2.4,2.4,0,0,0,100.2,46.4ZM54.4,73' +
            'A18.2,18.2,0,1,1,72.6,54.8,18.2,18.2,0,0,1,54.4,73Z'],
    ['delta', 'M55,19.2L13.7,90.8h82.7L55,19.2z ' +
            'M55,31.2l30.9,53.5H24.1L55,31.2z'],
    ['nonzero', 'M76.7,25.1l7.8-13.5l-7.6-0.3l-5.7,9.9' +
            'c-4.8-2.9-10.4-4.5-16.2-4.5c-19.1,0-34.7,17.2-34.7,38.4' +
            'c0,12.5,5.4,23.6,13.7,30.6l-7.6,13.2l7.6,0.1l5.5-9.6' +
            'c4.7,2.6,9.9,4,15.5,4c19.1,0,34.7-17.2,34.7-38.4' +
            'C89.7,42.9,84.6,32.1,76.7,25.1z M27.9,55C27.9,38.4,40,25,55,25' +
            'c4.4,0,8.5,1.2,12.2,3.2l-29,50.3C31.9,73,27.9,64.5,27.9,55z' +
            'M55,85c-4.1,0-7.9-1-11.4-2.8l29-50.1c5.8,5.5,9.5,13.7,9.5,22.8' +
            'C82.1,71.6,70,85,55,85z'],
    ['download', 'M90.3,94.5H19.7V79.2H90.3V94.5Z' +
            'm-49.1-79V44H26.2L55,72.3,83.8,44H68.9V15.5H41.1Z'],
    ['upload', 'M90.3,79.4H19.7V94.6H90.3V79.4Z' +
            'M41.1,71.8V43.5H26.2L55,15.4,83.8,43.5H68.9V71.8H41.1Z'],
    // --- Navigation glyphs ------------------------------------
    ['flowTable', tableFrame +
            'M86,63.2c0,3.3-2.7,6-6,6c-2.8,0-5.1-1.9-5.8-' +
            '4.5H63.3v5.1c0,0.9-0.7,1.5-1.5,1.5h-5.2v10.6c2.6,0.7,4.5,3,4.5,' +
            '5.8c0,3.3-2.7,6-6,6c-3.3,0-6-2.7-6-6c0-2.8,1.9-5.1,4.4-5.8V71.3' +
            'H48c-0.9,0-1.5-0.7-1.5-1.5v-5.1H36c-0.7,2.6-3,4.4-5.8,4.4c-3.3,' +
            '0-6-2.7-6-6s2.7-6,6-6c2.8,0,5.2,1.9,5.8,4.5h10.5V56c0-0.9,0.7-' +
            '1.5,1.5-1.5h5.5V43.8c-2.6-0.7-4.5-3-4.5-5.8c0-3.3,2.7-6,6-6s6,' +
            '2.7,6,6c0,2.8-1.9,5.1-4.5,5.8v10.6h5.2c0.9,0,1.5,0.7,1.5,1.5v' +
            '5.6h10.8c0.7-2.6,3-4.5,5.8-4.5C83.3,57.1,86,59.8,86,63.2z ' +
            'M55.1,42.3c2.3,0,4.3-1.9,4.3-4.3c0-2.3-1.9-4.3-4.3-4.3' +
            's-4.3,1.9-4.3,4.3C50.8,40.4,52.7,42.3,55.1,42.3z ' +
            'M34.4,63.1c0-2.3-1.9-4.3-4.3-4.3s-4.3,1.9-4.3,4.3' +
            's1.9,4.3,4.3,4.3S34.4,65.5,34.4,63.1z ' +
            'M55.1,83.5c-2.3,0-4.3,1.9-4.3,4.3s1.9,4.3,4.3,4.3' +
            's4.3-1.9,4.3-4.3S57.5,83.5,55.1,83.5z' +
            'M84.2,63.2c0-2.3-1.9-4.3-4.3-4.3s-4.3,' +
            '1.9-4.3,4.3s1.9,4.3,4.3,4.3S84.2,65.5,84.2,63.2z'],
    ['portTable', tableFrame +
            'M85.5,37.7c0-0.7-0.4-1.3-0.9-1.3H26.2c-0.5,0-' +
            '0.9,0.6-0.9,1.3v34.6c0,0.7,0.4,1.3,0.9,1.3h11v9.6c0,1.1,0.5,2,' +
            '1.2,2h9.1c0,0.2,0,0.3,0,0.5v3c0,1.1,0.5,2,1.2,2h13.5c0.6,0,1.2-' +
            '0.9,1.2-2v-3c0-0.2,0-0.3,0-0.5h9.1c0.6,0,1.2-0.9,1.2-2v-9.6h11' +
            'c0.5,0,0.9-0.6,0.9-1.3V37.7z M30.2,40h-1v8h1V40zM75.2,40h-2.1v8' +
            'h2.1V40z M67.7,40h-2.1v8h2.1V40z M60.2,40h-2.1v8h2.1V40z M52.7,' +
            '40h-2.1v8h2.1V40z M45.2,40h-2.1v8h2.1V40zM37.7,40h-2.1v8h2.1V40' +
            'z M81.6,40h-1v8h1V40z'],
    ['groupTable', tableFrame +
            'M45.7,52.7c0.2-5.6,2.6-10.7,6.2-14.4c-2.6-1.5-5.7-2.5-8.9-2.5' +
            'c-9.8,0-17.7,7.9-17.7,17.7c0,6.3,3.3,11.9,8.3,15' +
            'C34.8,61.5,39.4,55.6,45.7,52.7z ' +
            'M51.9,68.8c-3.1-3.1-5.2-7.2-6-11.7c-4.7,2.8-7.9,7.6-8.6,13.2' +
            'c1.8,0.6,3.6,0.9,5.6,0.9C46.2,71.2,49.3,70.3,51.9,68.8z ' +
            'M55.2,71.5c-3.5,2.4-7.7,3.7-12.2,3.7c-1.9,0-3.8-0.3-5.6-0.7' +
            'C38.5,83.2,45.9,90,54.9,90c9,0,16.4-6.7,17.5-15.4' +
            'c-1.6,0.4-3.4,0.6-5.1,0.6C62.8,75.2,58.6,73.8,55.2,71.5z ' +
            'M54.9,50.6c1.9,0,3.8,0.3,5.6,0.7c-0.5-4.1-2.5-7.9-5.4-10.6' +
            'c-2.9,2.7-4.8,6.4-5.3,10.5C51.5,50.8,53.2,50.6,54.9,50.6z ' +
            'M49.7,55.4c0.5,4.3,2.4,8.1,5.4,10.9c2.9-2.8,4.9-6.6,5.4-10.8' +
            'c-1.8-0.6-3.6-0.9-5.6-0.9C53.1,54.6,51.4,54.9,49.7,55.4z ' +
            'M89,53.5c0-12-9.7-21.7-21.7-21.7c-4.5,0-8.7,1.4-12.2,3.7' +
            'c-3.5-2.4-7.7-3.7-12.2-3.7c-12,0-21.7,9.7-21.7,21.7' +
            'c0,8.5,4.9,15.9,12,19.4C33.6,84.6,43.2,94,54.9,94' +
            'c11.7,0,21.2-9.3,21.7-20.9C84,69.7,89,62.2,89,53.5z ' +
            'M64.3,57.3c-0.8,4.4-2.9,8.4-5.9,11.5c2.6,1.5,5.7,2.5,8.9,2.5' +
            'c1.8,0,3.6-0.3,5.2-0.8C72,64.9,68.8,60.1,64.3,57.3z ' +
            'M67.3,35.8c-3.3,0-6.3,0.9-8.9,2.5c3.7,3.8,6.1,8.9,6.2,14.6' +
            'c6.1,3.1,10.6,8.9,11.7,15.8C81.5,65.6,85,60,85,53.5' +
            'C85,43.8,77.1,35.8,67.3,35.8z'],
    ['meterTable', tableFrame +
            'M96.3,79.2c0-19.1-22.1-34.6-41.3-34.6S13.7,60.1,13.7,79.2' +
            'H39.4c0-7.2,8.4-13.1,15.7-13.1S70.6,72,70.6,79.2H96.3z' +
            'M48,65.6L36.8,53c0-.5-1.5.5-1.4,0.7l5.3,16.6z'],
    ['pipeconfTable', tableFrame +
            'M10,66h13v3h-13z' +
            'M23,62.5L28,67.5L23,72.5z' +
            'M30,55h12.5v25h-12.5z' +
            'M45,66h13v3h-13z' +
            'M58,62.5L63,67.5L58,72.5z' +
            'M65,55h12.5v25h-12.5z' +
            'M79,66h15v3h-15z' +
            'M94,62.5L99,67.5L94,72.5z'],
    // --- Topology toolbar specific glyphs ----------------------
    ['summary', 'M95.8,9.2H14.2c-2.8,0-5,2.2-5,5v81.5c0,2.8,2.2,5,5,' +
            '5h81.5c2.8,0,5-2.2,5-5V14.2C100.8,11.5,98.5,9.2,95.8,9.2z ' +
            'M16.7,22.2c0-1.1,0.9-2,2-2h20.1c1.1,0,2,0.9,2,2v20.1c0,1.1-0.9,' +
            '2-2,2H18.7c-1.1,0-2-0.9-2-2V22.2z M93,87c0,1.1-0.9,2-2,2H18.9' +
            'c-1.1,0-2-0.9-2-2v-7c0-1.1,0.9-2,2-2H91c1.1,0,2,0.9,2,2V87z ' +
            'M93,65c0,1.1-0.9,2-2,2H18.9c-1.1,0-2-0.9-2-2v-7c0-1.1,0.9-2,' +
            '2-2H91c1.1,0,2,0.9,2,2V65z'],
    ['details', 'M95.8,9.2H14.2c-2.8,0-5,2.2-5,5v81.5c0,2.8,2.2,5,5,' +
            '5h81.5c2.8,0,5-2.2,5-5V14.2C100.8,11.5,98.5,9.2,95.8,9.2z M16.9,' +
            '22.2c0-1.1,0.9-2,2-2H91c1.1,0,2,0.9,2,2v7c0,1.1-0.9,2-2,2H18.9c' +
            '-1.1,0-2-0.9-2-2V22.2z M93,87.8c0,1.1-0.9,2-2,2H18.9c-1.1,' +
            '0-2-0.9-2-2v-7c0-1.1,0.9-2,2-2H91c1.1,0,2,0.9,2,2V87.8z M93,68.2' +
            'c0,1.1-0.9,2-2,2H18.9c-1.1,0-2-0.9-2-2v-7c0-1.1,0.9-2,2-2H91' +
            'c1.1,0,2,0.9,2,2V68.2z M93,48.8c0,1.1-0.9,2-2,2H19c-1.1,0-2-' +
            '0.9-2-2v-7c0-1.1,0.9-2,2-2H91c1.1,0,2,0.9,2,2V48.8z'],
    ['ports', 'M98,9.2H79.6c-1.1,0-2.1,0.9-2.1,2.1v17.6l-5.4,5.4c-1.7' +
            '-1.1-3.8-1.8-6-1.8c-6,0-10.9,4.9-10.9,10.9c0,2.2,0.7,4.3,1.8,6' +
            'l-7.5,7.5c-1.8-1.2-3.9-1.9-6.2-1.9c-6,0-10.9,4.9-10.9,10.9c0,' +
            '2.3,0.7,4.4,1.9,6.2l-6.2,6.2H11.3c-1.1,0-2.1,0.9-2.1,2.1v18.4' +
            'c0,1.1,0.9,2.1,2.1,2.1h18.4c1.1,0,2.1-0.9,2.1-2.1v-16l7-6.9' +
            'c1.4,0.7,3,1.1,4.7,1.1c6,0,10.9-4.9,10.9-10.9c0-1.7-0.4-3.3-' +
            '1.1-4.7l8-8c1.5,0.7,3.1,1.1,4.8,1.1c6,0,10.9-4.9,10.9-10.9c0' +
            '-1.7-0.4-3.4-1.1-4.8l6.9-6.9H98c1.1,0,2.1-0.9,2.1-2.1V11.3' +
            'C100.1,10.2,99.2,9.2,98,9.2z M43.4,72c-3.3,0-6-2.7-6-6s2.7-6,' +
            '6-6s6,2.7,6,6S46.7,72,43.4,72z M66.1,49.5c-3.3,0-6-2.7-6-6' +
            'c0-3.3,2.7-6,6-6s6,2.7,6,6C72.2,46.8,69.5,49.5,66.1,49.5z'],
    ['map', 'M95.8,9.2H14.2c-2.8,0-5,2.2-5,5v66c0.3-1.4,0.7-2.8,' +
            '1.1-4.1l1.6,0.5c-0.9,2.4-1.6,4.8-2.2,7.3l-0.5-0.1v12c0,2.8,2.2,' +
            '5,5,5h81.5c2.8,0,5-2.2,5-5V14.2C100.8,11.5,98.5,9.2,95.8,9.2z ' +
            'M16.5,67.5c-0.4,0.5-0.7,1-1,1.5c-0.3,0.5-0.6,1-0.9,1.6l-1.9-0.9' +
            'c0.3-0.6,0.6-1.2,0.9-1.8c0.3-0.6,0.6-1.2,1-1.7c0.7-1.1,1.5-2.2,' +
            '2.5-3.2l1.8,1.8C18,65.6,17.2,66.5,16.5,67.5z M29.7,64.1' +
            'c-0.4-0.4-0.8-0.8-1.2-1.1c-0.1-0.1-0.2-0.1-0.2-0.1c0,0-0.1,' +
            '0-0.1-0.1l-0.1,0l0,0l-0.1,0c-0.3-0.1-0.5-0.2-0.8-0.2c-0.5-0.1' +
            '-1.1-0.2-1.6-0.3c-0.6,0-1.1,0-1.6,0l-0.4-2.8c0.7-0.1,1.5-0.2,2.2' +
            '-0.1c0.7,0,1.4,0.1,2.2,0.3c0.4,0.1,0.7,0.2,1,0.3l0.1,0l0,0l0.1,' +
            '0l0.1,0c0.1,0,0.1,0,0.3,0.1c0.3,0.1,0.5,0.2,0.7,0.4c0.7,0.5,' +
            '1.2,0.9,1.7,1.4L29.7,64.1z M39.4,74.7c-1.8-1.8-3.6-3.8-5.3-5.7' +
            'l2.6-2.4c0.9,0.9,1.8,1.8,2.7,2.7c0.9,0.9,1.8,1.7,2.7,2.6L39.4,' +
            '74.7z M50.8,84.2c-1.1-0.7-2.2-1.5-3.3-2.3c-0.5-0.4-1.1-0.8-1.6' +
            '-1.2c-0.5-0.4-1-0.8-1.5-1.2l2.7-3.4c0.5,0.4,1,0.8,1.5,1.1c0.5,' +
            '0.3,1,0.7,1.5,1c1,0.7,2.1,1.3,3.1,1.9L50.8,84.2z M61.3,' +
            '88.7c-0.7-0.1-1.4-0.3-2.1-0.5c-0.7-0.2-1.4-0.5-2-0.7l1.8' +
            '-4.8c0.6,0.2,1.1,0.4,1.6,0.5c0.5,0.2,1.1,0.3,1.6,0.4c1,0.2,2.1,' +
            '0.2,3,0.1l0.7,5.1C64.3,89.1,62.7,88.9,61.3,88.7z M75.1,80.4c' +
            '-0.2,0.7-0.5,1.4-0.9,2c-0.2,0.3-0.3,0.7-0.5,1l-0.3,0.5l-0.3,' +
            '0.4l-3.9-2.8l0.3-0.4l0.2-0.3c0.1-0.2,0.3-0.4,0.4-0.7c0.3-0.5,' +
            '0.5-0.9,0.7-1.5c0.4-1,0.8-2.1,1.1-3.3l4.2,0.9C75.9,77.7,75.6,' +
            '79,75.1,80.4z M73,69.2l0.2-1.9l0.1-1.9c0.1-1.2,0.1-2.5,0.1-' +
            '3.8l2.5-0.2c0.2,1.3,0.4,2.6,0.5,3.9l0.1,2l0.1,2L73,69.2z ' +
            'M73,51l0.5-0.1c0.4,1.3,0.8,2.6,1.1,3.9L73.2,55C73.1,53.7,73.1,' +
            '52.3,73,51z M91.9,20.4c-0.7,1.4-3.6,3.6-4.2,3.9c-1.5,0.8-5,' +
            '2.8-10.1,7.7c3,2.9,5.8,5.4,7.3,6.4c2.6,1.8,3.4,4.3,3.6,6.1c0.1,' +
            '1.1-0.1,2.5-0.4,3c-0.5,0.9-1.6,2-3,1.4c-2-0.8-11.5-9.6-13-11c' +
            '-3.5,3.9-7.4,8.9-11.7,15.1c0,0-3.1,3.4-5.2,0.9C52.9,51.5,61,' +
            '39.3,61,39.3s2.2-3.1,5.6-7c-2.9-3-5.9-6.3-6.6-7.3c0,0-3.7-5-1.3' +
            '-6.6c3.2-2.1,6.3,0.8,6.3,0.8s3.1,3.3,7,7.2c4.7-4.7,10.1-9.2,' +
            '14.7-10c0,0,3.3-1,5.2,1.7C92.5,18.8,92.4,19.6,91.9,20.4z'],
    ['cycleLabels', 'M72.5,33.9c0,0.6-0.2,1-0.5,1H40c-0.3,0-0.5-0.4' +
            '-0.5-1V20.7c0-0.6,0.2-1,0.5-1h32c0.3,0,0.5,0.4,0.5,1V33.9z ' +
            'M41.2,61.8c0-0.6-0.2-1-0.5-1h-32c-0.3,0-0.5,0.4-0.5,1V75c0,0.6,' +
            '0.2,1,0.5,1h32c0.3,0,0.5-0.4,0.5-1V61.8z M101.8,61.8c0-0.6-0.2' +
            '-1-0.5-1h-32c-0.3,0-0.5,0.4-0.5,1V75c0,0.6,0.2,1,0.5,1h32c0.3,' +
            '0,0.5-0.4,0.5-1V61.8z M17.2,52.9c0-0.1-0.3-7.1,4.6-13.6l-2.4-1.8' +
            'c-5.4,7.3-5.2,15.2-5.1,15.5L17.2,52.9z M12.7,36.8l7.4,2.5l1.5,' +
            '7.6L29.5,31L12.7,36.8z M94.2,42.3c-2.1-8.9-8.3-13.7-8.6-13.9l' +
            '-1.8,2.4c0.1,0,5.6,4.3,7.5,12.2L94.2,42.3z M99,37.8l-6.6,4.1l' +
            '-6.8-3.7l7.1,16.2L99,37.8z M69,90.2l-1.2-2.8c-0.1,0-6.6,2.8' +
            '-14.3,0.6l-0.8,2.9c2.5,0.7,4.9,1,7,1C65,91.8,68.7,90.2,69,90.2z ' +
            'M54.3,97.3L54,89.5l6.6-4.1l-17.6-1.7L54.3,97.3z'],
    ['oblique', 'M80.9,30.2h4.3l15-16.9H24.8l-15,16.9h19v48.5h-4l-15,' +
            '16.9h75.3l15-16.9H80.9V30.2z M78.6,78.7H56.1V30.2h22.5V78.7z' +
            'M79.7,17.4c2.4,0,4.3,1.9,4.3,4.3c0,2.4-1.9,4.3-4.3,4.3s-4.3' +
            '-1.9-4.3-4.3C75.4,19.3,77.4,17.4,79.7,17.4z M55,17.4c2.4,0,' +
            '4.3,1.9,4.3,4.3c0,2.4-1.9,4.3-4.3,4.3s-4.3-1.9-4.3-4.3C50.7,' +
            '19.3,52.6,17.4,55,17.4z M26.1,21.7c0-2.4,1.9-4.3,4.3-4.3c2.4,' +
            '0,4.3,1.9,4.3,4.3c0,2.4-1.9,4.3-4.3,4.3C28,26,26.1,24.1,26.1,' +
            '21.7z M31.1,30.2h22.6v48.5H31.1V30.2z M30.3,91.4c-2.4,0-4.3' +
            '-1.9-4.3-4.3c0-2.4,1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3C34.6,' +
            '89.5,32.7,91.4,30.3,91.4z M54.9,91.4c-2.4,0-4.3-1.9-4.3-4.3c0' +
            '-2.4,1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3C59.2,89.5,57.3,' +
            '91.4,54.9,91.4z M84,87.1c0,2.4-1.9,4.3-4.3,4.3c-2.4,0-4.3-1.9' +
            '-4.3-4.3c0-2.4,1.9-4.3,4.3-4.3C82.1,82.8,84,84.7,84,87.1z'],
    ['filters', 'M24.8,13.3L9.8,40.5h75.3l15.0-27.2H24.8z M72.8,32.1l-' +
            '9.7-8.9l-19.3,8.9l-6.0-7.4L24.1,30.9l-1.2-2.7l15.7-7.1l6.0,7.4' +
            'l19.0-8.8l9.7,8.8l11.5-5.6l1.3,2.7L72.8,32.1zM24.3,68.3L9.3,' +
            '95.5h75.3l15.0-27.2H24.3z M84.3,85.9L70.7,79.8l-6.0,7.4l-19.3' +
            '-8.9l-9.7,8.9l-13.3-6.5l1.3-2.7l11.5,5.6l9.7-8.8l19.0,8.8l6.0' +
            '-7.4l15.7,7.1L84.3,85.9z M15.3,57h-6v-4h6V57zM88.1,57H76.0v-4h' +
            '12.1V57z M69.9,57H57.8v-4h12.1V57z M51.7,57H39.6v-4H51.7V57z ' +
            'M33.5,57H21.4v-4h12.1V57zM100.2,57h-6v-4h6V57z'],
    ['resetZoom', 'M86,79.8L61.7,54.3c1.8-2.9,2.8-6.3,2.9-10c0.3-11.2' +
            '-8.6-20.5-19.8-20.8C33.7,23.2,24.3,32,24.1,43.2c-0.3,11.2,8.6,' +
            '20.5,19.8,20.8c4,0.1,8.9-0.8,11.9-3.6l23.7,25c1.5,1.6,4,2.3,' +
            '5.3,1l1.6-1.6C87.7,83.7,87.5,81.4,86,79.8z M31.4,43.4c0.2-7.1,' +
            '6.1-12.8,13.2-12.6C51.8,31,57.5,37,57.3,44.1c-0.2,7.1-6.1,12.8' +
            '-13.2,12.6C36.9,56.5,31.3,50.6,31.4,43.4zM22.6,104H6V86.4c0' +
            '-1.7,1.4-3.1,3.1-3.1s3.1,1.4,3.1,3.1v11.4h10.4c1.7,0,3.1,1.4,' +
            '3.1,3.1S24.3,104,22.6,104z M25.7,9.1c0,1.7-1.4,3.1-3.1,3.1' +
            'H12.2v11.4c0,1.7-1.4,3.1-3.1,3.1S6,25.3,6,23.6V6h16.6C24.3,6,' +
            '25.7,7.4,25.7,9.1z M84.3,100.9c0-1.7,1.4-3.1,3.1-3.1h10.4V86.4' +
            'c0-1.7,1.4-3.1,3.1-3.1s3.1,1.4,3.1,3.1V104H87.4C85.7,104,84.3,' +
            '102.6,84.3,100.9z M87.4,6H104v17.6c0,1.7-1.4,3.1-3.1,3.1s-3.1' +
            '-1.4-3.1-3.1V12.2H87.4c-1.7,0-3.1-1.4-3.1-3.1S85.7,6,87.4,6z'],
    ['relatedIntents', 'M99.9,43.7v22.6c0,1.9-1.5,3.4-3.4,3.4H73.9c' +
            '-1.9,0-3.4-1.5-3.4-3.4V43.7c0-1.9,1.5-3.4,3.4-3.4h22.6C98.4,' +
            '40.3,99.9,41.8,99.9,43.7z M48.4,46.3l6.2,6.7h-4.6L38.5,38v9.7' +
            'l4.7,5.3H10.1V57h33.2l-4.8,5.3v9.5L49.8,57h5.1v0l-6.5,7v11.5' +
            'L64.1,55L48.4,34.4V46.3z'],
    ['nextIntent', 'M88.1,55.7L34.6,13.1c0,0-1.6-0.5-2.1-0.2c-1.9,1.2' +
            '-6.5,13.8-3.1,17.2c7,6.9,30.6,24.5,32.4,25.9c-1.8,1.4-25.4,19' +
            '-32.4,25.9c-3.4,3.4,1.2,16,3.1,17.2c0.6,0.4,2.1-0.2,2.1-0.2' +
            's53.1-42.4,53.5-42.7C88.5,56,88.1,55.7,88.1,55.7z'],
    ['prevIntent', 'M22.5,55.6L76,12.9c0,0,1.6-0.5,2.2-0.2c1.9,1.2,' +
            '6.5,13.8,3.1,17.2c-7,6.9-30.6,24.5-32.4,25.9c1.8,1.4,25.4,19,' +
            '32.4,25.9c3.4,3.4-1.2,16-3.1,17.2c-0.6,0.4-2.2-0.2-2.2-0.2' +
            'S22.9,56.3,22.5,56C22.2,55.8,22.5,55.6,22.5,55.6z'],
    ['intentTraffic', 'M14.7,71.5h-6v-33h6V71.5z M88.5,38.5H76.9v33' +
            'h11.7V38.5z M70.1,38.5H58.4v33h11.7V38.5z M51.6,38.5H39.9v33' +
            'h11.7V38.5z M33.1,38.5H21.5v33h11.7V38.5z M101.3,38.5h-6v33h6' +
            'V38.5z'],
    ['allTraffic', 'M15.7,64.5h-7v-19h7V64.5z M78.6,45.5H62.9v19h15.7' +
            'V45.5z M47.1,45.5H31.4v19h15.7V45.5z M101.3,45.5h-7v19h7V45.5z' +
            'M14.7,14.1h-6v19h6V14.1z M88.5,14.1H76.9v19h11.7V14.1z M70.1,' +
            '14.1H58.4v19h11.7V14.1z M51.6,14.1H39.9v19h11.7V14.1z M33.1,14.1' +
            'H21.5v19h11.7V14.1z M101.3,14.1h-6v19h6V14.1z M14.7,76.9h-6v19' +
            'h6V76.9z M88.5,76.9H76.9v19h11.7V76.9z M70.1,76.9H58.4v19h11.7' +
            'V76.9z M51.6,76.9H39.9v19h11.7V76.9z M33.1,76.9H21.5v19h11.7' +
            'V76.9z M101.3,76.9h-6v19h6V76.9z'],
    ['flows', 'M93.8,46.1c-4.3,0-8,3-9,7H67.9v-8.8c0-1.3-1.1-2.4-2.4' +
            '-2.4h-8.1V25.3c4-1,7-4.7,7-9.1c0-5.2-4.2-9.4-9.4-9.4c-5.2,0' +
            '-9.4,4.2-9.4,9.4c0,4.3,3,8,7,9v16.5H44c-1.3,0-2.4,1.1-2.4,2.4' +
            'v8.8H25.3c-1-4.1-4.7-7.1-9.1-7.1c-5.2,0-9.4,4.2-9.4,9.4s4.2,' +
            '9.4,9.4,9.4c4.3,0,8-2.9,9-6.9h16.4v7.9c0,1.3,1.1,2.4,2.4,2.4' +
            'h8.6v16.6c-4,1.1-6.9,4.7-6.9,9c0,5.2,4.2,9.4,9.4,9.4c5.2,0,' +
            '9.4-4.2,9.4-9.4c0-4.4-3-8-7.1-9.1V68.2h8.1c1.3,0,2.4-1.1,2.4' +
            '-2.4v-7.9h16.8c1.1,4,4.7,7,9,7c5.2,0,9.4-4.2,9.4-9.4S99,46.1,' +
            '93.8,46.1z M48.7,16.3c0-3.5,2.9-6.4,6.4-6.4c3.5,0,6.4,2.9,6.4,' +
            '6.4s-2.9,6.4-6.4,6.4C51.5,22.6,48.7,19.8,48.7,16.3zM16.2,61.7c' +
            '-3.5,0-6.4-2.9-6.4-6.4c0-3.5,2.9-6.4,6.4-6.4s6.4,2.9,6.4,6.4' +
            'C22.6,58.9,19.7,61.7,16.2,61.7z M61.4,93.7c0,3.5-2.9,6.4-6.4,' +
            '6.4c-3.5,0-6.4-2.9-6.4-6.4c0-3.5,2.9-6.4,6.4-6.4C58.6,87.4,' +
            '61.4,90.2,61.4,93.7z M93.8,61.8c-3.5,0-6.4-2.9-6.4-6.4c0-3.5,' +
            '2.9-6.4,6.4-6.4s6.4,2.9,6.4,6.4C100.1,58.9,97.3,61.8,93.8,61.8z'],
    ['eqMaster', 'M100.1,46.9l-10.8-25h0.2c0.5,0,0.8-0.5,0.8-1.1v-3.2' +
            'c0-0.6-0.4-1.1-0.8-1.1H59.2v-5.1c0-0.5-0.8-1-1.7-1h-5.1c-0.9,0' +
            '-1.7,0.4-1.7,1v5.1l-30.2,0c-0.5,0-0.8,0.5-0.8,1.1v3.2c0,0.6,' +
            '0.4,1.1,0.8,1.1h0.1l-10.8,25C9,47.3,8.4,48,8.4,48.8v1.6l0,0h0' +
            'v6.4c0,1.3,1.4,2.3,3.2,2.3h21.7c1.8,0,3.2-1,3.2-2.3v-8c0-0.9' +
            '-0.7-1.6-1.7-2L22.9,21.9h27.9v59.6l-29,15.9c0,1.2,1.8,2.2,4.1,' +
            '2.2h58.3c2.3,0,4.1-1,4.1-2.2l-29-15.9V21.9h27.8L75.2,46.8c-1,' +
            '0.4-1.7,1.1-1.7,2v8c0,1.3,1.4,2.3,3.2,2.3h21.7c1.8,0,3.2-1,3.2' +
            '-2.3v-8C101.6,48,101,47.3,100.1,46.9z M22,23.7l10.8,22.8H12.1' +
            'L22,23.7z M97.9,46.5H77.2L88,23.7L97.9,46.5z'],
    ['xClose', 'M20,8l35,35,35-35,12,12-35,35,35,35-12,12-35-35-35,35' +
            '-12-12,35-35-35-35,12-12Z'],
]);
/** @type {?} */
var badgeDataSet = new Map([
    ['_viewbox', '0 0 10 10'],
    ['checkMark', 'M8.6,3.4L4.4,7.7L1.4,4.7L2.5,3.6L4.4,5.5L7.5,2.3L8.6,3.4Z'],
    ['xMark', 'M7.8,6.7L6.7,7.8,5,6.1,3.3,7.8,2.2,6.7,3.9,5,2.2,3.3,3.3,' +
            '2.2,5,3.9,6.7,2.2,7.8,3.3,6.1,5Z'],
    ['triangleUp', 'M0.5,6.2c0,0,3.8-3.8,4.2-4.2C5,1.7,5.3,2,5.3,2l4.3,' +
            '4.3c0,0,0.4,0.4-0.1,0.4c-1.7,0-8.2,0-8.8,0C0,6.6,0.5,6.2,0.5,6.2z'],
    ['triangleLeft', 'm 6.13,9.63 c 0,0 -3.8,-3.8 -4.2,-4.2 -0.3,-0.3 0,-0.6 0,' +
            '-0.6 L 6.23,0.54 c 0,0 0.4,-0.4 0.4,0.1 0,1.7 0,8.2 0,8.8 -0.1,0.7 -0.5,0.2 -0.5,0.2 z'],
    ['triangleRight', 'm 4.07,9.6 c 0,0 3.8,-3.8 4.2,-4.2 0.3,-0.3 0,-0.6 0,-0.6' +
            'l -4.3,-4.3 c 0,0 -0.4,-0.4 -0.4,0.1 0,1.7 0,8.2 0,8.8 0.1,0.7 0.5,0.2 0.5,0.2 z'],
    ['triangleDown', 'M9.5,4.2c0,0-3.8,3.8-4.2,4.2c-0.3,0.3-0.5,0-0.5,' +
            '0L0.5,4.2c0,0-0.4-0.4,0.1-0.4c1.7,0,8.2,0,8.8,0C10,3.8,9.5,4.2,' +
            '9.5,4.2z'],
    ['plus', 'M4,2h2v2h2v2h-2v2h-2v-2h-2v-2h2z'],
    ['minus', 'M2,4h6v2h-6z'],
    ['play', 'M3,1.5l3.5,3.5l-3.5,3.5z'],
    ['stop', 'M2.5,2.5h5v5h-5z'],
]);
/** @type {?} */
var spriteData = new Map([
    ['_cloud', '0 0 110 110'],
    ['cloud', 'M37.6,79.5c-6.9,8.7-20.4,8.6-22.2-2.7' +
            'M16.3,41.2c-0.8-13.9,19.4-19.2,23.5-7.8' +
            'M38.9,30.9c5.1-9.4,15.1-8.5,16.9-1.3' +
            'M54.4,32.9c4-12.9,14.8-9.6,18.6-3.8' +
            'M95.8,58.5c10-4.1,11.7-17.8-0.9-19.8' +
            'M18.1,76.4C5.6,80.3,3.8,66,13.8,61.5' +
            'M16.2,62.4C2.1,58.4,3.5,36,16.8,36.6' +
            'M93.6,74.7c10.2-2,10.7-14,5.8-18.3' +
            'M71.1,79.3c11.2,7.6,24.6,6.4,22.1-11.7' +
            'M36.4,76.8c3.4,13.3,35.4,11.6,36.1-1.4' +
            'M70.4,31c11.8-10.4,26.2-5.2,24.7,10.1'],
]);
// --- Mojo Re-Design ---------------------------------------
/** @type {?} */
var m_octagon = 'M33.5,91.9a1.8,1.8,0,0,1-1.3-.5L8.7,68a1.8,1.8,0,0,' +
    '1-.5-1.3V33.5a1.8,1.8,0,0,1,.5-1.3L32,8.7a1.8,1.8,0,0,1,1.3-.5' +
    'H66.5a1.8,1.8,0,0,1,1.3.5L91.3,32a1.8,1.8,0,0,1,.5,1.3V66.5' +
    'a1.8,1.8,0,0,1-.5,1.3L68,91.3a1.8,1.8,0,0,1-1.3.5H33.5Z' +
    'm-21.7-26L34.3,88.2H65.9L88.2,65.7V34.1L65.7,11.8H34.1' +
    'L11.8,34.3V65.9Z';
/** @type {?} */
var m_switch_arrows = 'M60,42.1l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V33.8' +
    'a1.8,1.8,0,0,1,3.7,0v3.3l13-7.1L61.9,23v3.3' +
    'A1.8,1.8,0,0,1,60,28.2h-7v3.7h1.7a1.8,1.8,0,0,1,0,3.7H51.2' +
    'a1.8,1.8,0,0,1-1.8-1.8V26.4a1.8,1.8,0,0,1,1.8-1.8h7V20' +
    'a1.8,1.8,0,0,1,2.7-1.6l18.7,10a1.8,1.8,0,0,1,0,3.2L60.9,41.8Z' +
    'M60,69.2l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V60.9a1.8,1.8,0,0,1,3.7,0' +
    'v3.3l13-7.1-13-6.9v3.3A1.8,1.8,0,0,1,60,55.3h-7V59h1.7' +
    'a1.8,1.8,0,0,1,0,3.7H51.2a1.8,1.8,0,0,1-1.8-1.8V53.5' +
    'a1.8,1.8,0,0,1,1.8-1.8h7V47.1a1.8,1.8,0,0,1,2.7-1.6l18.7,10' +
    'a1.8,1.8,0,0,1,0,3.2L60.9,69ZM40,54.8l-0.9-.2L20.4,44.2' +
    'a1.8,1.8,0,0,1,0-3.2L39.1,31a1.8,1.8,0,0,1,2.7,1.6v4.5h7' +
    'A1.8,1.8,0,0,1,50.6,39v7.4a1.8,1.8,0,0,1-1.8,1.8H45.2' +
    'a1.8,1.8,0,0,1,0-3.7h1.7V40.9H40A1.8,1.8,0,0,1,38.1,39' +
    'V35.7l-13,6.9,13,7.1V46.4a1.8,1.8,0,0,1,3.7,0v6.5' +
    'a1.8,1.8,0,0,1-.9,1.6ZM40,81.9l-0.9-.2L20.4,71.4' +
    'a1.8,1.8,0,0,1,0-3.2l18.7-10a1.8,1.8,0,0,1,2.7,1.6v4.5h7' +
    'a1.8,1.8,0,0,1,1.8,1.8v7.4a1.8,1.8,0,0,1-1.8,1.8H45.2' +
    'a1.8,1.8,0,0,1,0-3.7h1.7V68H40a1.8,1.8,0,0,1-1.8-1.8V62.9' +
    'l-13,6.9,13,7.1V73.6a1.8,1.8,0,0,1,3.7,0V80a1.8,1.8,0,0,1-.9,1.6Z';
/** @type {?} */
var m_diamond = 'M50,87a16.1,16.1,0,0,1-11.5-4.7L17.7,61.5a16.3,16.3,0,0,' +
    '1,0-22.9L38.5,17.7a16.3,16.3,0,0,1,22.9,0L82.3,38.5' +
    'a16.3,16.3,0,0,1,0,22.9L61.5,82.3A16.1,16.1,0,0,1,50,87Z' +
    'm0-70.3a12.4,12.4,0,0,0-8.9,3.7L20.3,41.1a12.6,12.6,0,0,0,0,' +
    '17.7L41.1,79.7a12.6,12.6,0,0,0,17.7,0L79.7,58.9a12.6,12.6,0,0,' +
    '0,0-17.7L58.9,20.3A12.4,12.4,0,0,0,50,16.7Z';
/** @type {?} */
var m_trafficArrows = 'M41,66.7l-0.9-.2-16.8-9a1.8,1.8,0,0,1,0-3.2' +
    'L40.1,45a1.8,1.8,0,0,1,2.7,1.6v5.8a1.8,1.8,0,0,1-3.7,0V49.7' +
    'L28,55.8l11.1,5.9V59.1A1.8,1.8,0,0,1,41,57.2H47v-3H45.7' +
    'a1.8,1.8,0,0,1,0-3.7h3.2a1.8,1.8,0,0,1,1.8,1.8v6.7' +
    'a1.8,1.8,0,0,1-1.8,1.8H42.8v3.9a1.8,1.8,0,0,1-.9,1.6ZM59,55.3' +
    'l-1-.3a1.8,1.8,0,0,1-.9-1.6V49.5H51.1a1.8,1.8,0,0,1-1.8-1.8' +
    'V41a1.8,1.8,0,0,1,1.8-1.8h3.2a1.8,1.8,0,0,1,0,3.7H53v3H59' +
    'a1.8,1.8,0,0,1,1.8,1.8v2.7L72,44.4,60.9,38.3V41' +
    'a1.8,1.8,0,0,1-3.7,0V35.2a1.8,1.8,0,0,1,2.7-1.6l16.8,9.3' +
    'a1.8,1.8,0,0,1,0,3.2L59.9,55Z';
/** @type {?} */
var m_otn_base = 'M63.1,79.8a7.5,7.5,0,0,1-5.3-12.8,7.7,7.7,0,0,1,10.7,0' +
    'A7.5,7.5,0,0,1,63.1,79.8Zm0-11.3A3.8,3.8,0,0,0,60.4,75h0' +
    'a3.9,3.9,0,0,0,5.4,0A3.8,3.8,0,0,0,63.1,68.4Z' +
    'M63.1,35.2A7.5,7.5,0,1,1,68.5,33h0A7.5,7.5,0,0,1,63.1,35.2Z' +
    'm4-3.5h0Zm-4-7.8A3.8,3.8,0,1,0,65.8,25,3.8,3.8,0,0,0,63.1,23.9Z' +
    'M73.3,57.3a7.5,7.5,0,1,1,7.5-7.5A7.5,7.5,0,0,1,73.3,57.3Z' +
    'm0-11.3a3.8,3.8,0,1,0,3.8,3.8A3.8,3.8,0,0,0,73.3,46Z' +
    'M61.9,48.7H51.5V41.9l5-5a1.9,1.9,0,0,0-2.6-2.6l-4.2,4.2L38,48.7' +
    'H34.1A7.3,7.3,0,0,0,32,45a7.6,7.6,0,0,0-10.7,0,7.5,7.5,0,0,0,0,' +
    '10.6,7.6,7.6,0,0,0,10.7,0,7.4,7.4,0,0,0,1.9-3.2h5.2' +
    'l11.4,9.9,3.4,3.4a1.8,1.8,0,0,0,2.6,0,1.8,1.8,0,0,0,0-2.6l-5-5' +
    'V52.4H61.9A1.9,1.9,0,0,0,61.9,48.7ZM29.4,53a3.8,3.8,0,0,1-6.5-2.7' +
    'A3.9,3.9,0,0,1,24,47.6a3.9,3.9,0,0,1,5.4,0A3.8,3.8,0,0,1,29.4,53Z';
/** @type {?} */
var mojoDataSet = new Map([
    ['_viewbox', '0 0 100 100'],
    ['m_cloud', 'M62,48.8H61.5a1.8,1.8,0,0,1-1.3-2.3,11,11,0,0,' +
            '0-21.1-6.1,1.8,1.8,0,1,1-3.5-1,14.7,14.7,0,0,1,28.2,8.1' +
            'A1.8,1.8,0,0,1,62,48.8ZM70.6,71.2H28.3' +
            'A14.7,14.7,0,1,1,38.4,45.2,1.8,1.8,0,1,1,36,48' +
            'a11,11,0,1,0-7.5,19.4H71.8A11,11,0,0,0,71,45.5' +
            'a10.9,10.9,0,0,0-3.2.5,1.8,1.8,0,1,1-1.1-3.5,14.7,14.7,0,0,1,19,14' +
            'A14.8,14.8,0,0,1,72.2,71.1H70.6Z'],
    ['m_map', 'M50,17.6A32.4,32.4,0,1,0,82.4,50,32.4,32.4,0,0,0,50,17.6Z' +
            'm0,61.1A28.7,28.7,0,1,1,78.7,50,28.7,28.7,0,0,1,50,78.7Z' +
            'M75.9,48.8a1.8,1.8,0,0,1-1.8,1.8H65' +
            'a38.3,38.3,0,0,1-8.4,22.9,1.8,1.8,0,0,1-1.4.7,1.8,1.8,0,0,' +
            '1-1.2-.4,1.8,1.8,0,0,1-.3-2.6,34.6,34.6,0,0,0,7.5-20.5H39.2' +
            'a34.5,34.5,0,0,0,7.6,20.7,1.8,1.8,0,0,1-1.4,3,1.8,1.8,0,0,' +
            '1-1.4-.7,38.2,38.2,0,0,1-8.5-23H26.2a1.8,1.8,0,1,1,0-3.7' +
            'h9.4a38.1,38.1,0,0,1,8.4-21.6,1.8,1.8,0,0,1,2.9,2.3,34.4,34.4,0,0,' +
            '0-7.6,19.3h22a34.3,34.3,0,0,0-8-19.7,1.8,1.8,0,1,1,2.8-2.4,38,38,' +
            '0,0,1,8.8,22.1h9.1A1.8,1.8,0,0,1,75.9,48.8Z'],
    ['m_selectMap', 'M51.36,8.74A32.45,32.45,0,0,0,19,41.15' +
            'a32.12,32.12,0,0,0,9.22,22.62L17,72.07a1.84,1.84,0,0,0,1,3.32' +
            'L35.52,76h0l10,14.42a1.84,1.84,0,0,0,1.52.79,2.05,2.05,0,0,' +
            '0,.49-0.06,1.84,1.84,0,0,0,1.35-1.66l2.68-39.19' +
            'a1.73,1.73,0,0,0-.06-0.6,0.85,0.85,0,0,0-.09-0.24,1.7,1.7,0,0,' +
            '0-.81-0.9l-0.18-.1a1.69,1.69,0,0,0-.94-0.16H49.33l-0.16,0' +
            'a1,1,0,0,0-.31.12,1.52,1.52,0,0,0-.33.18L42.73,53' +
            'a34.6,34.6,0,0,1-2.22-11.21H62.68a34.55,34.55,0,0,1-7.55,20.54' +
            'A1.85,1.85,0,1,0,58,64.63a38.26,38.26,0,0,0,8.37-22.86h9.08' +
            'a1.85,1.85,0,0,0,0-3.7H66.3a38.06,38.06,0,0,0-8.83-22.14,' +
            '1.85,1.85,0,1,0-2.82,2.38,34.37,34.37,0,0,1,8,19.76h-22' +
            'a34.38,34.38,0,0,1,7.58-19.3,1.85,1.85,0,1,0-2.87-2.33,' +
            '38.11,38.11,0,0,0-8.41,21.63H27.53a1.85,1.85,0,0,0,0,3.7' +
            'h9.28a38.43,38.43,0,0,0,2.85,13.48l-8.5,6.31a28.71,28.71,0,1,' +
            '1,23.21,8.16,1.85,1.85,0,0,0,.19,3.68h0.19A32.41,32.41,0,0,' +
            '0,51.36,8.74Zm-4,49.75L45.57,84l-6.85-9.87,2.64-4.92,0.56-1,2.8-5' +
            'C45.61,61.58,46.49,60,47.31,58.49ZM44,56.63' +
            'c-0.81,1.5-1.69,3.11-2.56,4.73l-3.3,6.11-0.19.35' +
            'C37,69.4,36.19,70.93,35.4,72.34l-12-.44Z'],
    ['thatsNoMoon', 'M50,83.4A33.2,33.2,0,1,1,83.2,50.2,33.2,33.2,0,0,' +
            '1,50,83.4ZM79.3,50.1A29.3,29.3,0,1,0,50.1,79.4,29.3,29.3,0,0,0,' +
            '79.3,50.1ZM65.4,46.9h9.1A1.9,1.9,0,0,1,76.4,48a1.9,1.9,0,0,' +
            '1-.3,2.1,2.1,2.1,0,0,1-1.8.7H65.4c-0.1.6-.1,1.2-0.2,1.8' +
            'A38.5,38.5,0,0,1,57,73.9a2.1,2.1,0,0,1-2.2.9,2,2,0,0,' +
            '1-1.4-1.6,2.3,2.3,0,0,1,.6-1.7,33.6,33.6,0,0,0,4.9-8.5,34.6,34.6,' +
            '0,0,0,2.5-11c0-.3,0-0.7,0-1.1H38.9c0.2,1.3.3,2.6,0.5,3.9' +
            'a34.2,34.2,0,0,0,7.3,17,2,2,0,1,1-3,2.4A37.1,37.1,0,0,1,39.1,67' +
            'a40.8,40.8,0,0,1-4-15.5V50.8H25.8a2,2,0,0,1-2.2-1.9,1.9,1.9,0,0,' +
            '1,2.1-2H35l0.3-1.8-0.8-.2a7.5,7.5,0,0,1-5.5-8.5,12.4,12.4,0,0,' +
            '1,10-10.3,15.5,15.5,0,0,1,3.4,0,0.6,0.6,0,0,0,.7-0.3l0.8-1.1' +
            'a1.9,1.9,0,0,1,2.5-.4,1.8,1.8,0,0,1,.7,2.4,13.6,13.6,0,0,' +
            '1-.8,1.4,7.7,7.7,0,0,1,2.1,6.3A11,11,0,0,1,46,40.2a12.6,12.6,0,0,' +
            '1-6.3,4.5,0.5,0.5,0,0,0-.5.6c0,0.5-.1,1-0.1,1.6H61.5l-0.7-4' +
            'A33.6,33.6,0,0,0,53.5,27c-0.8-1-.9-1.7-0.4-2.5a1.7,1.7,0,0,' +
            '1,2.4-.7,3.6,3.6,0,0,1,1.1.9,37,37,0,0,1,8,17.1' +
            'c0.3,1.5.4,3,.7,4.4v0.7Zm-28.8-4A10.1,10.1,0,0,0,46,34.1' +
            'a5.3,5.3,0,0,0-6-5.8A10.2,10.2,0,0,0,31.3,36' +
            'C30.4,39.9,32.8,42.9,36.6,42.9ZM34.9,35.1a4,4,0,0,' +
            '1,2.7-3.2,2.7,2.7,0,0,1,3.8,2.6,4.4,4.4,0,0,1-2.5,4' +
            'C36.8,39.5,34.7,38,34.9,35.1Zm2,0.7c0,0.7.3,1,.9,0.9' +
            'a2.3,2.3,0,0,0,1.5-2.3,0.7,0.7,0,0,0-1.1-.6' +
            'A2.2,2.2,0,0,0,36.9,35.8Z'],
    ['m_ports', 'M83.2,20L80,16.8a4.8,4.8,0,0,0-6.8,0l-1.4,1.4' +
            'a4.8,4.8,0,0,0-1.4,3.4l-4.5,5.9a3.8,3.8,0,0,0,.4,5l1.2,1.2' +
            'a3.8,3.8,0,0,0,5,.4l5.4-3.9,0.5-.6h0a4.8,4.8,0,0,0,3.4-1.4' +
            'l1.4-1.4A4.8,4.8,0,0,0,83.2,20ZM70.3,31.1H70.1l-1.2-1.2' +
            'a0.2,0.2,0,0,1,0-.2l3.3-4.4,2.6,2.6Zm10.3-6.9-1.4,1.4' +
            'a1.1,1.1,0,0,1-1.6,0l-3.2-3.2a1.1,1.1,0,0,1,0-1.6l1.4-1.4' +
            'a1.1,1.1,0,0,1,1.6,0l3.2,3.2A1.1,1.1,0,0,1,80.6,24.2Z' +
            'M33.7,67.5l-1.2-1.2a3.8,3.8,0,0,0-5-.4l-5.9,4.5' +
            'a4.8,4.8,0,0,0-3.4,1.4l-1.4,1.4a4.8,4.8,0,0,0,0,6.8L20,83.2' +
            'a4.8,4.8,0,0,0,6.8,0l1.4-1.4a4.8,4.8,0,0,0,1.4-3.5l4.5-5.9' +
            'A3.8,3.8,0,0,0,33.7,67.5ZM25.6,79.3l-1.4,1.4' +
            'a1.2,1.2,0,0,1-1.6,0l-3.2-3.2a1.1,1.1,0,0,1,0-1.6l1.4-1.4' +
            'a1.1,1.1,0,0,1,.8-0.3,1.1,1.1,0,0,1,.8.3l3.2,3.2' +
            'A1.1,1.1,0,0,1,25.6,79.3Zm5.6-9-3.3,4.4-2.5-2.5,4.3-3.3h0.2' +
            'l1.2,1.2A0.2,0.2,0,0,1,31.1,70.3ZM65.4,61.9a6.2,6.2,0,0,1-8.8,0' +
            'L37.2,42.5A2.5,2.5,0,1,0,33.7,46l7,7a6.2,6.2,0,0,1,.4,8.3h0' +
            'l-0.2.2-0.2.2-3.6,3.6a1.8,1.8,0,0,1-2.6-2.6l3.6-3.6h0.1' +
            'a2.5,2.5,0,0,0-.1-3.4l-7-7a6.2,6.2,0,0,1,8.8-8.8L59.3,59.3' +
            'a2.5,2.5,0,0,0,3.5-3.5l-6.2-6.2a6.2,6.2,0,0,1,0-8.8l6.1-6.1' +
            'a1.8,1.8,0,0,1,2.6,2.6l-6.1,6.1a2.5,2.5,0,0,0,0,3.5l6.2,6.2' +
            'A6.2,6.2,0,0,1,65.4,61.9Z'],
    ['m_switch', m_switch_arrows],
    ['m_roadm', m_switch_arrows + m_octagon],
    ['m_router', 'M29.3,60.9l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V55.2H21.4' +
            'a1.8,1.8,0,0,1-1.8-1.8V46.7a1.8,1.8,0,0,1,1.8-1.8h3.2' +
            'a1.8,1.8,0,0,1,0,3.7H23.2v3h6.1a1.8,1.8,0,0,1,1.8,1.8V56' +
            'l11.1-5.9L31.1,44v2.7a1.8,1.8,0,0,1-3.7,0V40.8' +
            'a1.8,1.8,0,0,1,2.7-1.6L47,48.5a1.8,1.8,0,0,1,0,3.2l-16.8,9Z' +
            'M70.6,60.9l-0.9-.2L52.9,51.4a1.8,1.8,0,0,1,0-3.2l16.8-9' +
            'a1.8,1.8,0,0,1,2.7,1.6v3.9h6.1a1.8,1.8,0,0,1,1.8,1.8v6.7' +
            'a1.8,1.8,0,0,1-1.8,1.8H75.4a1.8,1.8,0,0,1,0-3.7h1.3v-3H70.6' +
            'a1.8,1.8,0,0,1-1.8-1.8V43.9L57.7,49.8l11.1,6.1V53.2' +
            'a1.8,1.8,0,0,1,3.7,0v5.8a1.8,1.8,0,0,1-.9,1.6Z' +
            'M49.8,82.5h0a1.8,1.8,0,0,1-1.6-1l-9-16.8A1.8,1.8,0,0,1,40.8,62' +
            'h3.9V55.9a1.8,1.8,0,0,1,1.8-1.8h6.7a1.8,1.8,0,0,1,1.8,1.8v3.2' +
            'a1.8,1.8,0,0,1-3.7,0V57.8h-3v6.1a1.8,1.8,0,0,1-1.8,1.8H43.9' +
            'l5.9,11.1,6.1-11.1H53.2a1.8,1.8,0,0,1,0-3.7h5.8' +
            'a1.8,1.8,0,0,1,1.6,2.7L51.4,81.5A1.8,1.8,0,0,1,49.8,82.5Z' +
            'M53.3,45.8H46.7A1.8,1.8,0,0,1,44.8,44V40.8a1.8,1.8,0,0,1,3.7,0' +
            'v1.3h3V36a1.8,1.8,0,0,1,1.8-1.8H56L50.1,23.1,44,34.2h2.7' +
            'a1.8,1.8,0,0,1,0,3.7H40.8a1.8,1.8,0,0,1-1.6-2.7l9.2-16.8' +
            'a1.8,1.8,0,0,1,1.6-1h0a1.8,1.8,0,0,1,1.6,1l9,16.8' +
            'a1.8,1.8,0,0,1-1.6,2.7H55.2V44A1.8,1.8,0,0,1,53.3,45.8Z' +
            'M50,91.2A41.3,41.3,0,1,1,91.2,50,41.3,41.3,0,0,1,50,91.2Z' +
            'm0-78.9A37.6,37.6,0,1,0,87.6,50,37.6,37.6,0,0,0,50,12.4Z'],
    ['m_uiAttached', 'M73.6,61.3H26.4a4.9,4.9,0,0,1-4.9-4.9V27.7' +
            'a4.9,4.9,0,0,1,4.9-4.9H73.6a4.9,4.9,0,0,1,4.9,4.9V56.5' +
            'A4.9,4.9,0,0,1,73.6,61.3ZM26.4,26.5a1.2,1.2,0,0,0-1.2,1.2' +
            'V56.5a1.2,1.2,0,0,0,1.2,1.2H73.6a1.2,1.2,0,0,0,1.2-1.2V27.7' +
            'a1.2,1.2,0,0,0-1.2-1.2H26.4ZM63.5,75.3a1.8,1.8,0,0,1-1.8,1.8' +
            'H38.4a1.8,1.8,0,0,1,0-3.7h9.8V65.7a1.8,1.8,0,0,1,3.7,0v7.8' +
            'h9.8A1.8,1.8,0,0,1,63.5,75.3Z'],
    ['m_office', 'M31.7,28.6h-6a1.8,1.8,0,1,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,31.7,28.6ZM45,28.6h-6a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,1,' +
            '1,45,28.6ZM31.7,38.3h-6a1.8,1.8,0,1,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,31.7,38.3ZM45,38.3h-6a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,1,' +
            '1,45,38.3ZM31.7,48.1h-6a1.8,1.8,0,1,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,31.7,48.1ZM45,48.1h-6a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,1,' +
            '1,45,48.1ZM63.7,51.1h-6a1.8,1.8,0,1,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,63.7,51.1ZM77,51.1H71a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,77,51.1ZM63.7,60.9h-6a1.8,1.8,0,1,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,63.7,60.9ZM77,60.9H71a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,0,' +
            '1,77,60.9ZM45,57.9h-6a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,1,1,' +
            '45,57.9ZM45,67.6h-6a1.8,1.8,0,0,1,0-3.7h6A1.8,1.8,0,1,1,45,67.6Z' +
            'M82.3,37.9H52.6V18a1.8,1.8,0,0,0-1.8-1.8H19.2A1.8,1.8,0,0,' +
            '0,17.3,18V50.1a1.8,1.8,0,0,0,3.7,0V19.8H48.9V80.2H27.2V75.4' +
            'c4-1.2,6.5-3.3,7.3-6.3,2-7.2-6.8-16.2-7.8-17.2a1.9,1.9,0,0,' +
            '0-2.6,0c-1,1-9.9,10-7.9,17.2,0.8,3,3.3,5.1,7.3,6.3v4.7H21V77.9' +
            'a1.8,1.8,0,0,0-3.7,0V82a1.8,1.8,0,0,0,1.9,1.8H82.3A1.8,1.8,0,0,' +
            '0,84.1,82V39.7A1.8,1.8,0,0,0,82.3,37.9ZM25.4,62.5a1.9,1.9,0,0,' +
            '0-1.9,1.8v7.2c-2.1-.8-3.4-1.9-3.8-3.4-1-3.7,3-9.2,5.6-12.2,2.6,' +
            '3,6.6,8.5,5.6,12.2-0.4,1.5-1.7,2.6-3.8,3.4V64.4A1.8,1.8,0,0,' +
            '0,25.4,62.5ZM71.5,80.2H63.3V70h8.2V80.2Zm8.9,0H75.2V68.1' +
            'a1.8,1.8,0,0,0-1.8-1.8H61.5a1.8,1.8,0,0,0-1.8,1.8V80.2H52.6' +
            'V41.6H80.4V80.2Z'],
    ['m_home', 'M79.2,52.2a1.7,1.7,0,0,1-2.3,0l-5.8-5.8V77a1.7,1.7,0,0,' +
            '1-1.7,1.7H30.6A1.7,1.7,0,0,1,28.9,77V52.1a1.7,1.7,0,1,1,3.3,0' +
            'V75.3H67.8V43.8a1.7,1.7,0,0,1,.1-0.7L50.1,25.4l-26.9,27' +
            'a1.7,1.7,0,0,1-1.2.5A1.7,1.7,0,0,1,20.8,50L48.9,21.8' +
            'a1.7,1.7,0,0,1,2.4,0l28,28A1.7,1.7,0,0,1,79.2,52.2ZM57.1,61.6' +
            'H42.9a1.7,1.7,0,0,1-1.7-1.7V45.6A1.7,1.7,0,0,1,42.9,44H57.1' +
            'a1.7,1.7,0,0,1,1.7,1.7V59.9A1.7,1.7,0,0,1,57.1,61.6ZM44.5,58.2' +
            'H55.5V47.3H44.5V58.2Z'],
    ['m_summary', 'M73.9,79.9H26.1A4.9,4.9,0,0,1,21.2,75V25' +
            'a4.9,4.9,0,0,1,4.9-4.9H73.9A4.9,4.9,0,0,1,78.8,25V75' +
            'A4.9,4.9,0,0,1,73.9,79.9Zm-47.8-56A1.2,1.2,0,0,0,24.9,25V75' +
            'a1.2,1.2,0,0,0,1.2,1.2H73.9A1.2,1.2,0,0,0,75.1,75V25' +
            'a1.2,1.2,0,0,0-1.2-1.2H26.1ZM42.4,46.7h-8a4.9,4.9,0,0,1-4.9-4.9' +
            'v-8A4.9,4.9,0,0,1,34.4,29h8a4.9,4.9,0,0,1,4.9,4.9v8' +
            'A4.9,4.9,0,0,1,42.4,46.7Zm-8-14.1a1.2,1.2,0,0,0-1.2,1.2v8' +
            'A1.2,1.2,0,0,0,34.4,43h8a1.2,1.2,0,0,0,1.2-1.2v-8' +
            'a1.2,1.2,0,0,0-1.2-1.2h-8ZM68.7,57.3H31.3a1.8,1.8,0,0,1,0-3.7' +
            'H68.7A1.8,1.8,0,0,1,68.7,57.3ZM68.7,66.5H31.3a1.8,1.8,0,0,1,0-3.7' +
            'H68.7A1.8,1.8,0,0,1,68.7,66.5Z'],
    ['m_details', 'M68.7,33.2H31.3a1.8,1.8,0,0,1,0-3.7H68.7' +
            'A1.8,1.8,0,1,1,68.7,33.2ZM73.9,17.5H26.1a4.9,4.9,0,0,0-4.9,4.9' +
            'V72.4a4.9,4.9,0,0,0,4.9,4.9h8.2l-4.1,6.6a1.9,1.9,0,0,0,.6,2.5' +
            'l1,0.3a1.8,1.8,0,0,0,1.6-.9L46.1,64.9a15.1,15.1,0,0,' +
            '0,4,.5,15.6,15.6,0,0,0,3.7-.4A15.9,15.9,0,0,0,57,63.9H68.7' +
            'a1.8,1.8,0,0,0,0-3.7H61.9a16.6,16.6,0,0,0,1.6-2.2,15.5,15.5,0,0,' +
            '0,2.2-9.4h2.9a1.8,1.8,0,0,0,0-3.7H65a15.7,15.7,0,0,0-29.8,0' +
            'H31.3a1.8,1.8,0,1,0,0,3.7h3.2a15.7,15.7,0,0,0,.4,4.9,15.5,15.5,' +
            '0,0,0,3.5,6.7H31.3a1.8,1.8,0,1,0,0,3.7H42.4l-6,9.8H26.1' +
            'a1.2,1.2,0,0,1-1.2-1.2V22.4a1.2,1.2,0,0,1,1.2-1.2H73.9' +
            'a1.2,1.2,0,0,1,1.2,1.2V72.4a1.2,1.2,0,0,1-1.2,1.2H44.5' +
            'a1.8,1.8,0,0,0,0,3.7H73.9a4.9,4.9,0,0,0,4.9-4.9V22.4' +
            'A4.9,4.9,0,0,0,73.9,17.5ZM38.5,52.6A12,12,0,0,1,50.2,37.8,12,12,' +
            '0,0,1,61.8,47a10.7,10.7,0,0,1,.3,1.6,12,12,0,0,1-5.9,11.6,12,12,' +
            '0,0,1-12,0L43.9,60A12,12,0,0,1,38.5,52.6Z'],
    ['m_oblique', 'M82.1,30.5a1.8,1.8,0,0,0-1.7-1.1H30.2' +
            'a1.8,1.8,0,0,0-1.4.7L18.2,42.8a1.8,1.8,0,0,0,1.4,3H40.9V62.2' +
            'a1.8,1.8,0,1,0,3.7,0V45.8H55.4V62.2a1.9,1.9,0,1,0,3.7,0V45.8' +
            'H69.8a1.9,1.9,0,0,0,1.4-.7L81.8,32.5A1.8,1.8,0,0,0,82.1,30.5Z' +
            'M69,42.2H23.5l7.5-9H76.5ZM69.8,70.5H19.6a1.8,1.8,0,0,1-1.4-3' +
            'L28.7,54.8a1.8,1.8,0,0,1,1.4-.7h7a1.8,1.8,0,0,1,0,3.7H31l-7.5,9' +
            'H69l7.5-9H62.4a1.8,1.8,0,0,1,0-3.7H80.4a1.8,1.8,0,0,1,1.4,3' +
            'L71.3,69.9A1.8,1.8,0,0,1,69.8,70.5ZM52.3,57.8H47.6' +
            'a1.8,1.8,0,0,1,0-3.7h4.8A1.8,1.8,0,0,1,52.3,57.8Z'],
    ['m_filters', 'M69.9,45.8H19.5a1.9,1.9,0,0,1-1.4-3L28.7,30' +
            'a1.8,1.8,0,0,1,1.4-.7H80.5a1.8,1.8,0,0,1,1.4,3L71.3,45.1' +
            'A1.8,1.8,0,0,1,69.9,45.8ZM23.5,42.1H69l7.5-9H31ZM69.9,58.2' +
            'H19.5a1.8,1.8,0,0,1-1.4-3l6.1-7.3a1.8,1.8,0,0,1,2.8,2.4l-3.6,4.3' +
            'H69l7.6-9.1a1.8,1.8,0,0,1,.5-3.6h3.4a1.8,1.8,0,0,1,1.4,3' +
            'L71.3,57.5A1.8,1.8,0,0,1,69.9,58.2ZM69.9,70.7H19.5' +
            'a1.9,1.9,0,0,1-1.4-3l5.6-6.7a1.8,1.8,0,0,1,2.8,2.4L23.5,67H69' +
            'l7.5-9H76.3a1.8,1.8,0,0,1,0-3.7h4.1a1.9,1.9,0,0,1,1.4,3L71.3,70' +
            'A1.8,1.8,0,0,1,69.9,70.7Z'],
    ['m_cycleLabels', 'M78.5,74.7a34.2,34.2,0,0,1-47.7,6.8l-0.3-.3' +
            'L30.4,81V80.8a1.8,1.8,0,0,1,.8-2.5l0.7-.3-5.2-3.4v6.2l0.7-.3' +
            'a1.8,1.8,0,1,1,1.7,3.3l-3.4,1.8-0.9.2-1-.3a1.9,1.9,0,0,1-.9-1.6' +
            'V71.1a1.8,1.8,0,0,1,2.8-1.5l10.7,7a1.9,1.9,0,0,1,.8,1.6,1.9,1.9,' +
            '0,0,1-1,1.5l-0.7.4a30.5,30.5,0,0,0,40.1-7.7A1.8,1.8,0,0,' +
            '1,78.5,74.7ZM30.8,25.7L29.5,38.4a1.8,1.8,0,0,1-1.1,1.5l-0.8.2' +
            'a1.9,1.9,0,0,1-1.1-.3l-1.7-1.2a30.1,30.1,0,0,0-2.7,6,1.9,1.9,0,0,' +
            '1-1.8,1.3H19.9a1.8,1.8,0,0,1-1.2-2.3A33.9,33.9,0,0,1,22.8,35' +
            'a1.8,1.8,0,0,1,1.6-.8,1.9,1.9,0,0,1,1.2.3L26.2,35l0.7-6.2-5.5,2.8' +
            'L21.9,32a1.8,1.8,0,1,1-2.1,3l-3.1-2.2a1.8,1.8,0,0,1,.2-3.2' +
            'l11.3-5.8A1.8,1.8,0,0,1,30.8,25.7ZM85.2,30.8L84.7,43.4' +
            'a1.8,1.8,0,0,1-1,1.6l-0.8.2a1.8,1.8,0,0,1-1.1-.4L71.4,37.4' +
            'a1.8,1.8,0,0,1,.3-3.2l1.9-.9a30.5,30.5,0,0,0-3.9-5.3,1.8,1.8,0,0,' +
            '1,2.7-2.5,34.3,34.3,0,0,1,5.3,7.7,2,2,0,0,1-.9,2.6' +
            'l-0.7.3,5.1,3.6,0.3-6.2-0.7.3a1.8,1.8,0,0,1-1.6-3.3L82.6,29' +
            'a1.8,1.8,0,0,1,1.8.1A1.9,1.9,0,0,1,85.2,30.8ZM62.4,32.2H40.2' +
            'a4.9,4.9,0,0,1-4.9-4.9V16.6a4.9,4.9,0,0,1,4.9-4.9H62.4' +
            'a4.9,4.9,0,0,1,4.9,4.9V27.3A4.9,4.9,0,0,1,62.4,32.2ZM40.2,15.4' +
            'A1.2,1.2,0,0,0,39,16.6V27.3a1.2,1.2,0,0,0,1.2,1.2H62.4' +
            'a1.2,1.2,0,0,0,1.2-1.2V16.6a1.2,1.2,0,0,0-1.2-1.2H40.2Z' +
            'M88.4,68.1H66.2a4.9,4.9,0,0,1-4.9-4.9V52.6a4.9,4.9,0,0,1,4.9-4.9' +
            'H88.4a4.9,4.9,0,0,1,4.9,4.9V63.2A4.9,4.9,0,0,1,88.4,68.1Z' +
            'M66.2,51.4A1.2,1.2,0,0,0,65,52.6V63.2a1.2,1.2,0,0,0,1.2,1.2H88.4' +
            'a1.2,1.2,0,0,0,1.2-1.2V52.6a1.2,1.2,0,0,0-1.2-1.2H66.2Z' +
            'M33.8,68.1H11.6a4.9,4.9,0,0,1-4.9-4.9V52.6a4.9,4.9,0,0,1,4.9-4.9' +
            'H33.8a4.9,4.9,0,0,1,4.9,4.9V63.2A4.9,4.9,0,0,1,33.8,68.1Z' +
            'M11.6,51.4a1.2,1.2,0,0,0-1.2,1.2V63.2a1.2,1.2,0,0,0,1.2,1.2' +
            'H33.8A1.2,1.2,0,0,0,35,63.2V52.6a1.2,1.2,0,0,0-1.2-1.2H11.6Z'],
    ['m_cycleGridDisplay', 'M 78.5,74.7 A 34.2,34.2 0 0 1 30.8,81.5 ' +
            'L 30.5,81.2 30.4,81 v -0.2 a 1.8,1.8 0 0 1 0.8,-2.5 L 31.9,78 26.7,74.6 ' +
            'v 6.2 l 0.7,-0.3 a 1.8560711,1.8560711 0 1 1 1.7,3.3 ' +
            'l -3.4,1.8 -0.9,0.2 -1,-0.3 A 1.9,1.9 0 0 1 22.9,83.9 V 71.1 ' +
            'a 1.8,1.8 0 0 1 2.8,-1.5 l 10.7,7 a 1.9,1.9 0 0 1 0.8,1.6 1.9,1.9 0 0 1 -1,1.5 ' +
            'l -0.7,0.4 a 30.5,30.5 0 0 0 40.1,-7.7 1.8506756,1.8506756 0 0 1 2.9,2.3 z ' +
            'M 18.500163,7.4998005 V 20.50004 H 2.5001058 v 2.999817 H 18.500163 V 50.499758 ' +
            'H 2.5001058 v 3.000335 H 18.500163 v 13.999663 h 2.999816 V 53.500093 h 26.999902 ' +
            'v 13.999663 h 3.000333 V 53.500093 h 26.999903 v 13.999663 h 2.999817 V 53.500093 ' +
            'H 97.499992 V 50.499758 H 81.499934 V 23.499857 H 97.499992 V 20.50004 H 81.499934 ' +
            'V 7.4998005 H 78.500117 V 20.50004 H 51.500214 V 7.4998005 H 48.499881 V 20.50004 ' +
            'H 21.499979 V 7.4998005 Z M 21.499979,23.499857 H 48.499881 V 50.499758 H 21.499979 ' +
            'Z m 30.000235,0 H 78.500117 V 50.499758 H 51.500214 Z'],
    ['m_prev', 'M59.8,72l-0.9-.2L21.8,51.3a1.8,1.8,0,0,1,0-3.2L58.9,28.2' +
            'a1.8,1.8,0,0,1,2.7,1.6V40.7H77.3a1.8,1.8,0,0,1,1.8,1.8V57.3' +
            'a1.8,1.8,0,0,1-1.8,1.8h-7a1.8,1.8,0,1,1,0-3.7h5.2v-11H59.8' +
            'A1.8,1.8,0,0,1,58,42.6V33L26.6,49.7,58,67V57.3' +
            'a1.8,1.8,0,0,1,3.7,0V70.1a1.8,1.8,0,0,1-.9,1.6Z'],
    ['m_next', 'M40.2,72l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V57.3' +
            'a1.8,1.8,0,0,1,3.7,0V67L73.5,49.7,42,32.9v9.6' +
            'a1.8,1.8,0,0,1-1.8,1.8H24.5v11h5.2a1.8,1.8,0,1,1,0,3.7h-7' +
            'a1.8,1.8,0,0,1-1.8-1.8V42.6a1.8,1.8,0,0,1,1.8-1.8H38.3V29.9' +
            'a1.8,1.8,0,0,1,2.7-1.6L78.2,48.1a1.8,1.8,0,0,1,0,3.2L41.1,71.8Z'],
    ['m_flows', 'M50.1,26.2a7.4,7.4,0,1,1,7.4-7.4A7.4,7.4,0,0,1,50.1,26.2Z' +
            'm0-11.2a3.8,3.8,0,1,0,3.8,3.8A3.8,3.8,0,0,0,50.1,15Z' +
            'M50.1,88.6a7.4,7.4,0,1,1,7.4-7.4A7.4,7.4,0,0,1,50.1,88.6Z' +
            'm0-11.2a3.8,3.8,0,1,0,3.8,3.8A3.8,3.8,0,0,0,50.1,77.4Z' +
            'M72,50.1a1.8,1.8,0,0,1-1.8,1.8H58.1V55a3,3,0,0,1-3,3H51.9V70.2' +
            'a1.8,1.8,0,0,1-3.6,0V58.1h-3a3,3,0,0,1-3-3V51.9H29.8' +
            'a1.8,1.8,0,1,1,0-3.6H42.3v-3a3,3,0,0,1,3-3h3a1.7,1.7,0,0,1,0-.3' +
            'V29.8a1.8,1.8,0,0,1,3.6,0V41.9a1.7,1.7,0,0,1,0,.3h3.2' +
            'a3,3,0,0,1,3,3v3H70.2A1.8,1.8,0,0,1,72,50.1ZM18.8,57.5' +
            'a7.4,7.4,0,1,1,7.4-7.4A7.4,7.4,0,0,1,18.8,57.5Zm0-11.2' +
            'a3.8,3.8,0,1,0,3.8,3.8A3.8,3.8,0,0,0,18.8,46.3ZM81.2,57.5' +
            'a7.4,7.4,0,1,1,7.4-7.4A7.4,7.4,0,0,1,81.2,57.5Zm0-11.2' +
            'A3.8,3.8,0,1,0,85,50.1,3.8,3.8,0,0,0,81.2,46.3Z'],
    ['m_allTraffic', m_diamond + m_trafficArrows],
    ['m_xMark', 'M76.8,73.7a2.2,2.2,0,0,1-3.1,3.1L50,53.1,26.3,76.7' +
            'a2.2,2.2,0,1,1-3.1-3.1L46.9,50,23.2,26.3a2.2,2.2,0,0,1,3.1-3.1' +
            'L50,46.9,73.7,23.2a2.2,2.2,0,1,1,3.1,3.1L53.1,50Z'],
    ['m_resetZoom', 'M73.9,76.8H64.2a1.8,1.8,0,1,1,0-3.7h9.7' +
            'a1.2,1.2,0,0,0,1.2-1.2V62.6a1.8,1.8,0,0,1,3.7,0v9.3' +
            'A4.9,4.9,0,0,1,73.9,76.8ZM77,33.3a1.8,1.8,0,0,1-1.8-1.8V22' +
            'a1.2,1.2,0,0,0-1.2-1.2H64.2a1.8,1.8,0,1,1,0-3.7h9.7' +
            'A4.9,4.9,0,0,1,78.8,22v9.5A1.8,1.8,0,0,1,77,33.3ZM23,33.6' +
            'a1.8,1.8,0,0,1-1.8-1.8V22a4.9,4.9,0,0,1,4.9-4.9h9.8' +
            'a1.8,1.8,0,0,1,0,3.7H26.1A1.2,1.2,0,0,0,24.9,22v9.7' +
            'A1.8,1.8,0,0,1,23,33.6ZM65.3,42.3A15.7,15.7,0,1,0,42.6,59.8' +
            'L34.4,73.1H26.1a1.2,1.2,0,0,1-1.2-1.2V62.1a1.9,1.9,0,0,0-3.7,0' +
            'v9.8a4.9,4.9,0,0,0,4.9,4.9h6.1l-2,3.3' +
            'a1.8,1.8,0,0,0,.6,2.5,1.8,1.8,0,0,0,1,.3,1.8,1.8,0,0,0,1.6-.9' +
            'L46,61.2a15.7,15.7,0,0,0,7.7.1A15.7,15.7,0,0,0,65.3,42.3Z' +
            'm-5,9.9A12,12,0,1,1,50.1,34a12,12,0,0,1,11.7,9.2' +
            'A11.9,11.9,0,0,1,60.3,52.3Z'],
    ['m_eqMaster', 'M63,79.9H37.4a1.8,1.8,0,0,1-1.2-3.2L48.8,65.1' +
            'a1.8,1.8,0,0,1,2.5,0L64.2,76.7A1.8,1.8,0,0,1,63,79.9Z' +
            'M42.1,76.2H58.2l-8.1-7.3ZM19.7,65.8a1.8,1.8,0,0,1-.3-3.7' +
            'l61-11.3a1.8,1.8,0,1,1,.7,3.6L20,65.8H19.7ZM34.2,53.5' +
            'A16.7,16.7,0,1,1,50.9,36.8,16.7,16.7,0,0,1,34.2,53.5Zm0-29.7' +
            'a13,13,0,1,0,13,13A13,13,0,0,0,34.2,23.8ZM70.7,45.7' +
            'a8.6,8.6,0,1,1,8.6-8.6A8.6,8.6,0,0,1,70.7,45.7Zm0-13.6' +
            'a4.9,4.9,0,1,0,4.9,4.9A4.9,4.9,0,0,0,70.7,32.2Z'],
    ['m_unknown', 'M63.2,20.6H36.8A16.2,16.2,0,0,0,20.6,36.8V63.2' +
            'A16.2,16.2,0,0,0,36.8,79.4H63.2A16.2,16.2,0,0,0,79.4,63.2V36.8' +
            'A16.2,16.2,0,0,0,63.2,20.6ZM75.7,63.2A12.5,12.5,0,0,1,63.2,75.7' +
            'H36.8A12.5,12.5,0,0,1,24.3,63.2V36.8A12.5,12.5,0,0,1,36.8,24.3' +
            'H63.2A12.5,12.5,0,0,1,75.7,36.8V63.2ZM67.3,64.7' +
            'a1.8,1.8,0,0,1-2.6,2.6L50,52.6,35.3,67.3a1.8,1.8,0,0,1-2.6-2.6' +
            'L47.4,50,32.7,35.3a1.8,1.8,0,0,1,2.6-2.6L50,47.4,64.7,32.7' +
            'a1.8,1.8,0,0,1,2.6,2.6L52.6,50Z'],
    ['m_controller', 'M73.9,20.1H26.1A4.9,4.9,0,0,0,21.2,25V75' +
            'a4.9,4.9,0,0,0,4.9,4.9H73.9A4.9,4.9,0,0,0,78.8,75V25' +
            'A4.9,4.9,0,0,0,73.9,20.1ZM75.1,75a1.2,1.2,0,0,1-1.2,1.2H26.1' +
            'A1.2,1.2,0,0,1,24.9,75V25a1.2,1.2,0,0,1,1.2-1.2H73.9' +
            'A1.2,1.2,0,0,1,75.1,25V75ZM70.5,63a1.8,1.8,0,0,1-1.9,1.8H38.3' +
            'v2.4a1.8,1.8,0,0,1-3.7,0V64.9H31.3a1.8,1.8,0,1,1,0-3.7h3.3V58.3' +
            'a1.8,1.8,0,0,1,3.7,0v2.9H68.7A1.9,1.9,0,0,1,70.5,63ZM70.5,36.6' +
            'a1.9,1.9,0,0,1-1.9,1.9H44.5v2.3a1.8,1.8,0,0,1-3.7,0V38.5H31.3' +
            'a1.8,1.8,0,1,1,0-3.7h9.5v-3a1.8,1.8,0,0,1,3.7,0v3H68.7' +
            'A1.8,1.8,0,0,1,70.5,36.6ZM70.5,49.8a1.9,1.9,0,0,1-1.9,1.8H60.9' +
            'v2.1a1.8,1.8,0,1,1-3.7,0V51.7H31.3a1.8,1.8,0,1,1,0-3.7H57.2' +
            'V44.8a1.8,1.8,0,1,1,3.7,0V48h7.8A1.9,1.9,0,0,1,70.5,49.8Z'],
    ['m_virtual', 'M56.6,53.5l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V45.8' +
            'a1.8,1.8,0,1,1,3.7,0v2.7l11.1-6.1L58.4,36.5v2.7' +
            'A1.8,1.8,0,0,1,56.6,41H50.5v3h1.3a1.8,1.8,0,0,1,0,3.7H48.6' +
            'a1.8,1.8,0,0,1-1.8-1.8V39.2a1.8,1.8,0,0,1,1.8-1.8h6.1V33.4' +
            'a1.8,1.8,0,0,1,2.7-1.6l16.8,9a1.8,1.8,0,0,1,0,3.2L57.5,53.3Z' +
            'M56.6,77.9l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V70.2a1.8,1.8,0,1,1,3.7,0' +
            'v2.7l11.1-6.1L58.4,60.9v2.7a1.8,1.8,0,0,1-1.8,1.8H50.5v3h1.3' +
            'a1.8,1.8,0,0,1,0,3.7H48.6a1.8,1.8,0,0,1-1.8-1.8V63.6' +
            'a1.8,1.8,0,0,1,1.8-1.8h6.1V57.8a1.8,1.8,0,0,1,2.7-1.6l16.8,9' +
            'a1.8,1.8,0,0,1,0,3.2L57.5,77.7ZM38.5,64.9l-0.9-.2L20.8,55.4' +
            'a1.8,1.8,0,0,1,0-3.2l16.8-9a1.8,1.8,0,0,1,2.7,1.6v3.9h6.1' +
            'a1.8,1.8,0,0,1,1.8,1.8v6.7a1.8,1.8,0,0,1-1.8,1.8H43.2' +
            'a1.8,1.8,0,1,1,0-3.7h1.3v-3H38.5a1.8,1.8,0,0,1-1.8-1.8V47.9' +
            'L25.6,53.8l11.1,6.1V57.2a1.8,1.8,0,0,1,3.7,0v5.8' +
            'a1.8,1.8,0,0,1-.9,1.6ZM38.5,89.3l-0.9-.2L20.8,79.8' +
            'a1.8,1.8,0,0,1,0-3.2l16.8-9a1.8,1.8,0,0,1,2.7,1.6v3.9h6.1' +
            'A1.8,1.8,0,0,1,48.3,75v6.7a1.8,1.8,0,0,1-1.8,1.8H43.2' +
            'a1.8,1.8,0,1,1,0-3.7h1.3v-3H38.5A1.8,1.8,0,0,1,36.6,75V72.3' +
            'L25.6,78.2l11.1,6.1V81.6a1.8,1.8,0,1,1,3.7,0v5.8' +
            'a1.8,1.8,0,0,1-.9,1.6ZM60.8,29.1H60.3A1.8,1.8,0,0,1,59,26.8' +
            'a9.7,9.7,0,0,0-18.7-5.4,1.8,1.8,0,1,1-3.5-1,13.4,13.4,0,0,' +
            '1,25.8,7.4A1.8,1.8,0,0,1,60.8,29.1ZM77.4,45.7a1.8,1.8,0,0,' +
            '1-1.3-3.1,9.7,9.7,0,0,0-9.9-16A1.8,1.8,0,1,1,65,23.1,13.4,13.4,' +
            '0,0,1,78.7,45.1,1.8,1.8,0,0,1,77.4,45.7ZM22.7,45.8a1.8,1.8,0,0,' +
            '1-1.3-.6A13.4,13.4,0,0,1,39.6,25.6a1.8,1.8,0,1,1-2.4,2.8' +
            'A9.7,9.7,0,0,0,24,42.6,1.8,1.8,0,0,1,22.7,45.8Z'],
    ['m_other', 'M78.9,64.9H21.1A4.9,4.9,0,0,1,16.2,60V24.3a4.9,4.9,0,0,' +
            '1,4.9-4.9H78.9a4.9,4.9,0,0,1,4.9,4.9V60A4.9,4.9,0,0,1,78.9,64.9Z' +
            'M21.1,23.1a1.2,1.2,0,0,0-1.2,1.2V60a1.2,1.2,0,0,0,1.2,1.2H78.9' +
            'A1.2,1.2,0,0,0,80.1,60V24.3a1.2,1.2,0,0,0-1.2-1.2H21.1Z' +
            'M65.8,78.8a1.9,1.9,0,0,1-1.8,1.8H36.1a1.9,1.9,0,1,1,0-3.7H48.2' +
            'V70.4a1.8,1.8,0,1,1,3.7,0v6.5H63.9A1.9,1.9,0,0,1,65.8,78.8Z' +
            'M47.2,49.3V48.1c-0.3-2.3.5-4.9,2.7-7.5s3-4,3-5.9-1.4-3.7-4.1-3.7' +
            'a7.7,7.7,0,0,0-4.4,1.3l-1-2.7A11.3,11.3,0,0,1,49.5,28' +
            'c5,0,7.2,3.1,7.2,6.3s-1.6,5-3.7,7.5-2.6,4.1-2.5,6.3v1.1H47.2Z' +
            'm-1,6a2.5,2.5,0,0,1,2.6-2.7A2.7,2.7,0,1,1,46.3,55.3Z'],
    ['m_endstation', 'M75,49.5H25a1.8,1.8,0,0,1-1.8-1.8V27.1' +
            'A1.8,1.8,0,0,1,25,25.3H75a1.8,1.8,0,0,1,1.8,1.8V47.7' +
            'A1.8,1.8,0,0,1,75,49.5ZM26.9,45.8H73.1V28.9H26.9V45.8Z' +
            'M35.5,43.2H30.7a1.8,1.8,0,1,1,0-3.7h4.8A1.8,1.8,0,1,1,35.5,43.2Z' +
            'M72.1,72.9a1.8,1.8,0,0,1-1.8,1.8H29.7a1.8,1.8,0,1,1,0-3.7' +
            'H48.2V53.5a1.8,1.8,0,1,1,3.7,0V71.1H70.3A1.9,1.9,0,0,1,72.1,72.9Z'],
    ['m_bgpSpeaker', 'M59.2,49.6l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V43.3' +
            'a1.8,1.8,0,1,1,3.7,0v1.3l7-3.9L61,37v1.3a1.8,1.8,0,0,1-1.8,1.8' +
            'H47.5a1.8,1.8,0,1,1,0-3.7h9.8V33.9A1.8,1.8,0,0,1,60,32.3' +
            'l12.8,6.8a1.8,1.8,0,0,1,0,3.2l-12.8,7Z' +
            'M40,58.8l-0.9-.2-12.8-7a1.8,1.8,0,0,1,0-3.2l12.8-6.8' +
            'a1.8,1.8,0,0,1,2.7,1.6v2.5h9.8a1.8,1.8,0,0,1,0,3.7H40' +
            'a1.8,1.8,0,0,1-1.8-1.8V46.2l-7,3.8,7,3.9V52.5' +
            'a1.8,1.8,0,0,1,3.7,0v4.4a1.8,1.8,0,0,1-.9,1.6Z' +
            'M83.6,45.8c0,13.8-15.1,25-33.6,25a43.8,43.8,0,0,1-6.1-.4' +
            'c-2.5,2.7-7.2,6.1-15.6,8.7H27.8a1.8,1.8,0,0,1-1.2-3.2' +
            's5.4-5,5.8-10.2a1.8,1.8,0,0,1,2-1.7A1.8,1.8,0,0,1,36,66' +
            'a16.2,16.2,0,0,1-2.5,7.2,24.4,24.4,0,0,0,8.3-5.9L42,67l0.2-.2' +
            'h0l0.6-.2h0.6a41.4,41.4,0,0,0,6.5.5c16.5,0,29.9-9.5,29.9-21.3' +
            'S66.5,24.5,50,24.5,20.1,34.1,20.1,45.8c0,5.4,2.9,10.6,8.2,14.6' +
            'a1.8,1.8,0,0,1-2.2,2.9' +
            'c-6.2-4.7-9.7-10.9-9.7-17.5,0-13.8,15.1-25,33.6-25' +
            'S83.6,32,83.6,45.8Z'],
    ['m_otn', m_otn_base],
    ['m_roadm_otn', m_otn_base + m_octagon],
    ['m_fiberSwitch', 'M47.5,37.2a1.8,1.8,0,0,1-1.8-1.8V25.6H43.4' +
            'a1.8,1.8,0,0,1-1.6-2.7l6.4-12a1.8,1.8,0,0,1,1.6-1h0' +
            'a1.8,1.8,0,0,1,1.6,1l6.6,12a1.8,1.8,0,0,1-1.6,2.7H53.2' +
            'a1.8,1.8,0,0,1,0-3.7h0.1l-3.5-6.3L46.5,22h1a1.8,1.8,0,0,1,1.8,1.8' +
            'V35.3A1.8,1.8,0,0,1,47.5,37.2Z' +
            'M75.9,46.9H75.8a1.8,1.8,0,0,1-1.5-1l-1.8-3.4' +
            'a1.8,1.8,0,1,1,3.2-1.7l0.4,0.8,4.2-6-7.1-.3,0.5,0.9' +
            'a1.8,1.8,0,0,1-.8,2.5l-10.4,5a1.8,1.8,0,0,1-1.6-3.3l8.7-4.2-1-2' +
            'a1.8,1.8,0,0,1,.1-1.8,1.8,1.8,0,0,1,1.6-.8l13.6,0.5' +
            'A1.8,1.8,0,0,1,85.3,35L77.4,46.1A1.8,1.8,0,0,1,75.9,46.9Z' +
            'M81.2,72.5H81.1l-13.6-.8A1.8,1.8,0,0,1,66,69l1.7-3.1' +
            'a1.8,1.8,0,1,1,3.2,1.8l-0.3.5,7.3,0.4-3.5-6.2-0.5.9' +
            'a1.8,1.8,0,0,1-2.5.6l-9.8-6.1a1.8,1.8,0,0,1,1.9-3.1' +
            'l8.2,5.1,1.2-1.9a1.9,1.9,0,0,1,1.6-.9,1.8,1.8,0,0,1,1.6.9' +
            'l6.8,11.8A1.8,1.8,0,0,1,81.2,72.5Z' +
            'M48.8,89.7a1.8,1.8,0,0,1-1.6-1l-6.6-12a1.8,1.8,0,0,1,1.6-2.7h3.3' +
            'a1.8,1.8,0,0,1,0,3.7H45.3L48.7,84l3.4-6.3h-1' +
            'a1.8,1.8,0,0,1-1.8-1.8V64.4a1.8,1.8,0,0,1,1.8-1.8h0' +
            'a1.8,1.8,0,0,1,1.8,1.8v9.7h2.3a1.8,1.8,0,0,1,1.6,2.7l-6.4,12' +
            'a1.8,1.8,0,0,1-1.6,1h0Z' +
            'M16.9,71.3a1.8,1.8,0,0,1-1.6-2.7l6.7-12' +
            'a1.8,1.8,0,0,1,1.6-.9,1.9,1.9,0,0,1,1.6.9l1.7,2.8' +
            'a1.8,1.8,0,1,1-3.1,1.9H23.7l-3.5,6.3,7.1-.5L26.8,66' +
            'a1.8,1.8,0,0,1,.6-2.5l9.8-6.1a1.8,1.8,0,0,1,1.9,3.1l-8.2,5.1' +
            'L32,67.6a1.8,1.8,0,0,1-1.4,2.8l-13.5.9H16.9Z' +
            'M35.8,46.9L35,46.7l-8.7-4.3-1,2a1.8,1.8,0,0,1-3.1.3l-8-11' +
            'a1.8,1.8,0,0,1,1.4-2.9l13.6-.7' +
            'a1.8,1.8,0,0,1,1.6.8,1.8,1.8,0,0,1,.1,1.8l-1.6,3' +
            'a1.8,1.8,0,1,1-3.3-1.7h0.1l-7.1.4,4.2,5.8,0.5-.9' +
            'a1.8,1.8,0,0,1,2.5-.8l10.4,5.1A1.8,1.8,0,0,1,35.8,46.9Z' +
            'M60.5,49.9a11.3,11.3,0,1,1-3.3-8A11.2,11.2,0,0,1,60.5,49.9Z'],
    ['m_microwave', 'M63.5,38.9a2.8,2.8,0,0,0-2.1,1H49.6V15.1' +
            'a1.8,1.8,0,0,0-.5-1.3,1.8,1.8,0,0,0-1.3-.5h0' +
            'a28.4,28.4,0,0,0-15.7,52V82.5H22.8a1.8,1.8,0,0,0,0,3.7H45' +
            'a1.8,1.8,0,1,0,0-3.7H35.8V67.4a28.4,28.4,0,0,0,12,2.8h0' +
            'a1.9,1.9,0,0,0,1.8-1.8V43.6H61.3a2.8,2.8,0,0,0,2.1,1' +
            'A2.8,2.8,0,1,0,63.5,38.9ZM46,66.4a24.8,24.8,0,0,1,0-49.4V66.4Z' +
            'M41.7,64H41.2a24.3,24.3,0,0,1-12.9-9.7L28,53.9' +
            'a1.8,1.8,0,0,1,3.1-2l0.2,0.3a20.3,20.3,0,0,0,10.9,8.2' +
            'A1.8,1.8,0,0,1,41.7,64Z' +
            'M66.4,53.1a1.8,1.8,0,0,1-.5-3.6A8.1,8.1,0,0,0,66,34' +
            'a1.8,1.8,0,0,1,1.1-3.5A11.8,11.8,0,0,1,67,53H66.4Z' +
            'M66.5,58.2a1.8,1.8,0,0,1-.4-3.6,13.1,13.1,0,0,0,0-25.7,' +
            '1.8,1.8,0,1,1,.7-3.6,16.8,16.8,0,0,1,0,32.9H66.5Z'],
    ['m_relatedIntents', 'M34.5,73.1A7.5,7.5,0,1,1,42,65.6,7.5,7.5,' +
            '0,0,1,34.5,73.1Zm0-11.3a3.8,3.8,0,1,0,3.8,3.8' +
            'A3.8,3.8,0,0,0,34.5,61.8Z' +
            'M56.7,34.3a1.8,1.8,0,0,1-1.8,1.9H42.6v3.1a3.1,3.1,0,0,1-3,3' +
            'H36.4V54.5a1.9,1.9,0,0,1-3.7,0V42.3h-3a3.1,3.1,0,0,1-3-3' +
            'V29.5a3,3,0,0,1,3-3h9.8a3,3,0,0,1,3,3v3H54.8' +
            'A1.8,1.8,0,0,1,56.7,34.3Z' +
            'M66,41.8a7.5,7.5,0,1,1,7.5-7.5A7.5,7.5,0,0,1,66,41.8Z' +
            'm0-11.3a3.8,3.8,0,1,0,3.8,3.8A3.8,3.8,0,0,0,66,30.5Z'],
    ['m_intentTraffic', 'M28.9,77.6H28.5a1.8,1.8,0,0,1-1.4-2.2L39,23.3' +
            'a1.8,1.8,0,0,1,3.6.8l-12,52.1A1.8,1.8,0,0,1,28.9,77.6Z' +
            'M71.1,77.6a1.8,1.8,0,0,1-1.8-1.4l-12-52.1a1.8,1.8,0,0,1,3.6-.8' +
            'l12,52.1a1.8,1.8,0,0,1-1.4,2.2H71.1Z' +
            'M49.9,26.2A1.8,1.8,0,0,1,48,24.4V23.7a1.8,1.8,0,0,1,3.7,0' +
            'v0.7A1.8,1.8,0,0,1,49.9,26.2Z' +
            'M49.9,43.6A1.8,1.8,0,0,1,48,41.8V40.2a1.8,1.8,0,0,1,3.7,0' +
            'v1.6A1.8,1.8,0,0,1,49.9,43.6Zm0-8.7A1.8,1.8,0,0,1,48,33.1' +
            'V31.5a1.8,1.8,0,0,1,3.7,0v1.6A1.8,1.8,0,0,1,49.9,34.9Z' +
            'M49.9,69.8A1.8,1.8,0,0,1,48,67.9V66.3a1.8,1.8,0,0,1,3.7,0' +
            'v1.6A1.8,1.8,0,0,1,49.9,69.8Zm0-8.7A1.8,1.8,0,0,1,48,59.2' +
            'V57.6a1.8,1.8,0,0,1,3.7,0v1.6A1.8,1.8,0,0,1,49.9,61.1Zm0-8.7' +
            'A1.8,1.8,0,0,1,48,50.5V48.9a1.8,1.8,0,0,1,3.7,0v1.6' +
            'A1.8,1.8,0,0,1,49.9,52.3Z' +
            'M49.9,77.6A1.8,1.8,0,0,1,48,75.7V75a1.8,1.8,0,0,1,3.7,0v0.7' +
            'A1.8,1.8,0,0,1,49.9,77.6Z'],
    ['m_firewall', 'M75.3,88.8H65.6a4.9,4.9,0,0,1-4.9-4.9V79.1' +
            'a4.9,4.9,0,0,1,4.9-4.9h9.7a4.9,4.9,0,0,1,4.9,4.9v4.8' +
            'A4.9,4.9,0,0,1,75.3,88.8ZM65.6,77.9a1.2,1.2,0,0,0-1.2,1.2v4.8' +
            'a1.2,1.2,0,0,0,1.2,1.2h9.7a1.2,1.2,0,0,0,1.2-1.2V79.1' +
            'a1.2,1.2,0,0,0-1.2-1.2H65.6Z' +
            'M53.9,88.8H24.7a4.9,4.9,0,0,1-4.9-4.9V79.1a4.9,4.9,0,0,1,4.9-4.9' +
            'H53.9a4.9,4.9,0,0,1,4.9,4.9v4.8A4.9,4.9,0,0,1,53.9,88.8Z' +
            'M24.7,77.9a1.2,1.2,0,0,0-1.2,1.2v4.8a1.2,1.2,0,0,0,1.2,1.2' +
            'H53.9a1.2,1.2,0,0,0,1.2-1.2V79.1a1.2,1.2,0,0,0-1.2-1.2H24.7Z' +
            'M34.4,72.1H24.7a4.9,4.9,0,0,1-4.9-4.9V62.4a4.9,4.9,0,0,1,4.9-4.9' +
            'h9.7a4.9,4.9,0,0,1,4.9,4.9v4.8A4.9,4.9,0,0,1,34.4,72.1Z' +
            'M24.7,61.2a1.2,1.2,0,0,0-1.2,1.2v4.8a1.2,1.2,0,0,0,1.2,1.2h9.7' +
            'a1.2,1.2,0,0,0,1.2-1.2V62.4a1.2,1.2,0,0,0-1.2-1.2H24.7Z' +
            'M75.3,72.1H46.1a4.9,4.9,0,0,1-4.9-4.9V62.4a4.9,4.9,0,0,1,4.9-4.9' +
            'H75.3a4.9,4.9,0,0,1,4.9,4.9v4.8A4.9,4.9,0,0,1,75.3,72.1Z' +
            'M46.1,61.2a1.2,1.2,0,0,0-1.2,1.2v4.8a1.2,1.2,0,0,0,1.2,1.2H75.3' +
            'a1.2,1.2,0,0,0,1.2-1.2V62.4a1.2,1.2,0,0,0-1.2-1.2H46.1Z' +
            'M67.7,40.7c-0.2-4.8-3.6-8.8-6.3-12s-3-3.6-3.3-4.8' +
            'a13.1,13.1,0,0,1,1-9.7,2.2,2.2,0,0,0,.3-1.1,1.9,1.9,0,0,' +
            '0-.8-1.5,1.8,1.8,0,0,0-1.7-.2c-0.3.1-8.1,3-10.4,14.7-1.4-2.3' +
            '-3.4-4.6-5.9-5.4a1.8,1.8,0,0,0-2,.6,1.9,1.9,0,0,0-.2,2.1,6.8,6.8,' +
            '0,0,1-.6,7.1c-1.4,1.8-5.9,8.3-4.1,14.9,1.2,4.1,4.6,7.3,10.2,9.4' +
            'h1.6l0.2-.2h0.1l0.2-.3,0.2-.3h0V53.2a1.6,1.6,0,0,0,0-.4,1.7,1.7,' +
            '0,0,0,0-.3h0V52.2h0V51.8L46,51.6H45.9c-0.3-.4-2.4-3-2.1-5.9' +
            'a5,5,0,0,1,.7-2.1c1,2,2.7,4.4,5.5,4.6a5.1,5.1,0,0,0,3.9-1.3' +
            'A8.2,8.2,0,0,0,56,43.5a7.3,7.3,0,0,1,.3,2.6,7.6,7.6,0,0,' +
            '1-3.1,5.3,1.8,1.8,0,0,0,1.2,3.3h0c0.3,0,6.3-.1,10.1-4.3' +
            'C66.9,47.9,67.9,44.6,67.7,40.7Zm-5.8,7.1a9,9,0,0,1-2.7,2,9.9,9.9,' +
            '0,0,0,.9-3.5c0.3-5.1-3.4-9.2-3.5-9.4a1.8,1.8,0,0,0-3.2,1.2' +
            'c0,1.4-.5,4.8-1.8,5.9a1.4,1.4,0,0,1-1.2.4c-1.7-.1-2.9-3.3-3.3-4.8' +
            'a1.8,1.8,0,0,0-1.2-1.4,1.8,1.8,0,0,0-1.8.3,9.7,9.7,0,0,' +
            '0-4,6.8,9.4,9.4,0,0,0,.3,3.1,8.4,8.4,0,0,1-3.1-4.4' +
            'c-1.4-5,2.6-10.5,3.5-11.7A10,10,0,0,0,42.8,27,27.2,27.2,0,0,' +
            '1,46,33.7a1.8,1.8,0,0,0,3.6-.6,33.2,33.2,0,0,1,.4-5.4,19.3,19.3,' +
            '0,0,1,4-9.7,19.1,19.1,0,0,0,.5,6.7c0.5,2.1,2.2,4,4.1,6.3' +
            's5.3,6.2,5.5,9.8A9.1,9.1,0,0,1,61.9,47.8Z'],
    ['m_balancer', 'M33.4,56.6H26.7a3.1,3.1,0,0,1-3-3V46.9a3.1,3.1,0,0,1,3-3' +
            'h6.7a3.1,3.1,0,0,1,3,3v6.7A3.1,3.1,0,0,1,33.4,56.6Z' +
            'M73.3,36.5H66.6a3.1,3.1,0,0,1-3-3V26.7a3.1,3.1,0,0,1,3-3' +
            'h6.7a3.1,3.1,0,0,1,3,3v6.7A3.1,3.1,0,0,1,73.3,36.5Z' +
            'M73.3,56.1H66.6a3.1,3.1,0,0,1-3-3V46.4a3.1,3.1,0,0,1,3-3' +
            'h6.7a3.1,3.1,0,0,1,3,3v6.7A3.1,3.1,0,0,1,73.3,56.1Z' +
            'M73.3,76.3H66.6a3.1,3.1,0,0,1-3-3V66.6a3.1,3.1,0,0,1,3-3' +
            'h6.7a3.1,3.1,0,0,1,3,3v6.7A3.1,3.1,0,0,1,73.3,76.3Z' +
            'M62.7,70.4a1.9,1.9,0,0,1-1.8,1.5H60.5a15.2,15.2,0,0,1-10.9-9.1' +
            'c-3.9-8.6-4.7-9.8-10.8-10.4a1.8,1.8,0,0,1-1.6-1.7,0.3,0.3,0,0,1,0-.1' +
            'h0V50.1h0a1.8,1.8,0,0,1,1.7-2c6.2-.5,7-1.7,10.9-10.4' +
            'a15.2,15.2,0,0,1,10.7-9.1,1.8,1.8,0,1,1,.8,3.6,11.5,11.5,0,0,0-8.2,7' +
            'c-2,4.4-3.4,7.3-5.3,9.2H60.8a1.8,1.8,0,1,1,0,3.7h-13' +
            'c1.8,1.9,3.2,4.8,5.2,9.1a11.5,11.5,0,0,0,8.3,7' +
            'A1.9,1.9,0,0,1,62.7,70.4Z'],
    ['m_ips', 'M79.4,26.8a0.9,0.9,0,0,0-.1-0.3V26.1l-0.3-.4-0.2-.2' +
            'H78.6c-1.3-1-11-8-28.3-8H49.7c-18.7,0-28.1,7.8-28.5,8.1' +
            'a2,2,0,0,0-.7,1.3c-1.1,22.8,6.7,36.8,13.4,44.4S48.3,82.4,49.1,82.7' +
            'h1.6c0.3-.1,7.9-3.1,15.3-11.4S80.5,49.7,79.4,26.8ZM50,79' +
            'c-3.9-1.7-27.3-13.4-25.8-51.1,2.3-1.6,10.7-6.8,25.5-6.8h0.5' +
            'c14.4,0,23.2,5.2,25.5,6.8C77.2,65.6,53.9,77.3,50,79Z' +
            'M41.7,41.9a1.8,1.8,0,0,1-1.8-1.9V37.3a9.8,9.8,0,0,1,9.8-9.8h0.6' +
            'a9.8,9.8,0,0,1,9.8,9.8v2.6a1.8,1.8,0,1,1-3.7,0V37.3' +
            'a6.1,6.1,0,0,0-6.1-6.1H49.6a6.1,6.1,0,0,0-6.1,6.1v2.8' +
            'A1.8,1.8,0,0,1,41.7,41.9Z' +
            'M58.6,63.1H41.3a3.7,3.7,0,0,1-3.6-3.7V47.3a3.7,3.7,0,0,1,3.6-3.7' +
            'H58.6a3.8,3.8,0,0,1,3.6,3.7V59.4A3.7,3.7,0,0,1,58.6,63.1Z'],
    ['m_ids', 'M69.7,41.5c-2.9,3.6-9.1,5-18.6,4.2a18.4,18.4,0,0,0-8.9,1.4' +
            'H41.5a1.8,1.8,0,0,1-.7-3.5A22.2,22.2,0,0,1,51.5,42' +
            'c7.4,0.6,12.5-.2,14.8-2.3L63.2,22.6c-5,2.9-12.5,2.4-15.9,1.9' +
            'a18.7,18.7,0,0,0-12.7,3.4H34.3l9.5,52.4a1.9,1.9,0,0,1-1.5,2.1' +
            'H42a1.8,1.8,0,0,1-1.8-1.5L29.9,24.3a1.8,1.8,0,1,1,3.6-.6v0.4' +
            'a22.3,22.3,0,0,1,14.1-3.2C55,21.8,60.9,20.7,63,18' +
            'a1.8,1.8,0,0,1,1.9-.6,1.8,1.8,0,0,1,1.4,1.5L70.1,40' +
            'A1.9,1.9,0,0,1,69.7,41.5Z'],
    ['m_olt', 'M83,47.6H64.5a1.8,1.8,0,0,0-1.9,1.9V74.3' +
            'a1.8,1.8,0,0,0,1.9,1.8H83a1.8,1.8,0,0,0,1.8-1.8V49.5' +
            'A1.8,1.8,0,0,0,83,47.6ZM81.1,72.5H77.7v-5a1.4,1.4,0,0,0-1.4-1.4' +
            'H72.1a1.4,1.4,0,0,0-1.4,1.4v5H66.3V51.3H81.1V72.5Z' +
            'M70.9,56.9H69.5a1.8,1.8,0,0,1,0-3.7h1.3A1.8,1.8,0,1,1,70.9,56.9Z' +
            'M77.5,56.9H76.1a1.8,1.8,0,0,1,0-3.7h1.3A1.8,1.8,0,1,1,77.5,56.9Z' +
            'M70.9,62.5H69.5a1.8,1.8,0,0,1,0-3.7h1.3A1.8,1.8,0,1,1,70.9,62.5Z' +
            'M77.5,62.5H76.1a1.8,1.8,0,0,1,0-3.7h1.3A1.8,1.8,0,1,1,77.5,62.5Z' +
            'M40.9,56.2H36.1a1.8,1.8,0,1,1,0-3.7h4.8A1.8,1.8,0,0,1,40.9,56.2Z' +
            'M82.2,25.7V43.9a1.8,1.8,0,0,1-3.7,0V27.5H32.3V59.8H58.4' +
            'a1.8,1.8,0,0,1,0,3.7h-28a1.9,1.9,0,0,1-1.8-1.9V45.5H17' +
            'a1.8,1.8,0,0,1,0-3.7H28.6V25.7a1.8,1.8,0,0,1,1.8-1.8h50' +
            'A1.8,1.8,0,0,1,82.2,25.7Z'],
    ['m_onu', 'M39.8,58.7H35a1.8,1.8,0,1,1,0-3.7h4.9' +
            'A1.8,1.8,0,1,1,39.8,58.7Z' +
            'M81.4,28.3V46.5a1.9,1.9,0,0,1-3.7,0V30.2H31.2V62.4H57.4' +
            'a1.8,1.8,0,1,1,0,3.7H29.3a1.8,1.8,0,0,1-1.8-1.9V48.1H15.9' +
            'a1.8,1.8,0,1,1,0-3.7H27.5V28.3a1.8,1.8,0,0,1,1.8-1.8H79.5' +
            'A1.8,1.8,0,0,1,81.4,28.3Z' +
            'M85.8,60.3L75.1,49.6a1.8,1.8,0,0,0-2.6,0L61.6,60.3' +
            'a1.8,1.8,0,0,0,0,2.6,1.8,1.8,0,0,0,2.6,0l0.2-.2v8.8' +
            'a1.8,1.8,0,0,0,1.8,1.8H81.2a1.8,1.8,0,0,0,1.8-1.8V62.7l0.2,0.2' +
            'A1.8,1.8,0,0,0,85.8,60.3Zm-6.5,9.4H68.1V59.1l5.6-5.6L79.4,59V69.7Z'],
    ['m_swap', 'M62.2,54.7l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V47.1' +
            'a1.8,1.8,0,1,1,3.7,0v2.6l10.8-6L64,38v2.6a1.8,1.8,0,0,1-1.8,1.8' +
            'H47.1a1.8,1.8,0,0,1,0-3.7H60.3V34.9a1.8,1.8,0,0,1,2.7-1.6' +
            'l16.5,8.8a1.8,1.8,0,0,1,0,3.2L63.1,54.5Z' +
            'M37.4,66.6l-0.9-.2L20,57.2a1.8,1.8,0,0,1,0-3.2l16.5-8.8' +
            'a1.8,1.8,0,0,1,2.7,1.6v3.8H52.5a1.8,1.8,0,0,1,0,3.7H37.4' +
            'a1.8,1.8,0,0,1-1.8-1.8V49.9L24.8,55.7l10.8,6V59' +
            'a1.8,1.8,0,1,1,3.7,0v5.7a1.8,1.8,0,0,1-.9,1.6Z'],
    ['m_shortestGeoPath', 'M49.7,17.5A32.3,32.3,0,1,0,81.9,49.8,32.3,32.3,0,' +
            '0,0,49.7,17.5Zm0,60.9A28.6,28.6,0,1,1,78.2,49.8,28.6,28.6,0,0,1,' +
            '49.7,78.4Z M60.9,49a1.5,1.5,0,0,1-.1-0.4,0.8,0.8,0,0,1,0-.3' +
            'C60.9,48.5,60.9,48.8,60.9,49Z' +
            'M75.4,48.6a1.8,1.8,0,0,1-1.8,1.8h-9' +
            'a38.2,38.2,0,0,1-8.3,22.8,1.8,1.8,0,0,1-1.4.7,1.8,1.8,0,0,' +
            '1-1.1-.4,1.8,1.8,0,0,1-.3-2.6,34.6,34.6,0,0,0,7.5-21.6V49' +
            'c0-.3,0-0.5,0-0.7a0.1,0.1,0,0,1,0-.1,33.2,33.2,0,0,0-.7-6.1H60' +
            'a5.1,5.1,0,0,1-3.1-9.1A33,33,0,0,0,52.9,27' +
            'a1.8,1.8,0,1,1,2.8-2.4,36.2,36.2,0,0,1,4.7,7.2,5.1,5.1,0,0,' +
            '1,3.1,8.7,38.3,38.3,0,0,1,.9,6.2h9.1A1.8,1.8,0,0,1,75.4,48.6Z' +
            'M46.5,71a1.8,1.8,0,0,1-1.4,3,1.8,1.8,0,0,1-1.4-.7,36.3,36.3,' +
            '0,0,1-4.3-6.7H39a5.1,5.1,0,0,1-2.9-9.3,40.3,40.3,0,0,1-.8-6.9H26' +
            'a1.8,1.8,0,0,1,0-3.7h9.3a38,38,0,0,1,8.3-21.5,1.8,1.8,0,1,1,2.8,' +
            '2.3,34.5,34.5,0,0,0-7.6,21.8,36,36,0,0,0,.7,7.2,5.1,5.1,0,0,' +
            '1,4.5,5.1,5,5,0,0,1-1.4,3.5A33.4,33.4,0,0,0,46.5,71Z' +
            'M44.9,56.9a1.8,1.8,0,0,1-1.1-.4,1.8,1.8,0,0,1-.3-2.6l0.6-.8' +
            'A1.8,1.8,0,1,1,47,55.3l-0.6.8A1.8,1.8,0,0,1,44.9,56.9Zm3.9-5' +
            'a1.8,1.8,0,0,1-1.1-.4,1.8,1.8,0,0,1-.3-2.6l0.6-.8' +
            'a1.8,1.8,0,1,1,2.9,2.3l-0.6.8A1.8,1.8,0,0,1,48.8,51.9Zm3.9-5' +
            'a1.8,1.8,0,0,1-1.1-.4,1.8,1.8,0,0,1-.3-2.6l0.6-.8' +
            'a1.8,1.8,0,1,1,2.9,2.3l-0.6.8A1.8,1.8,0,0,1,52.7,46.9Z'],
    ['m_source', 'M71,63.8l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V57.1' +
            'a1.8,1.8,0,0,1,3.7,0v1.7l8.2-4.5-8.2-4.4v1.7A1.8,1.8,0,0,1,71,53.4' +
            'H58.2a1.8,1.8,0,0,1,0-3.7H69.2V46.8a1.8,1.8,0,0,1,2.7-1.6l14,7.5' +
            'a1.8,1.8,0,0,1,0,3.2l-14,7.7Z' +
            'M32.7,77.7a3.6,3.6,0,0,1-3.1-1.8L16.1,52.1l-0.9-1.6' +
            'a19.3,19.3,0,0,1-2.1-8.7,19.6,19.6,0,0,1,6.1-14.2' +
            'A19.5,19.5,0,0,1,52.1,40.5h0a19.5,19.5,0,0,1-2,9.9l-1,1.8' +
            'L35.8,75.9A3.6,3.6,0,0,1,32.7,77.7Zm0-51.7' +
            'A15.8,15.8,0,0,0,18.5,48.8l0.8,1.4L32.7,73.9,46,50.3l0.8-1.4' +
            'a15.9,15.9,0,0,0,1.6-8.1h0A15.8,15.8,0,0,0,33.6,26h-1Z' +
            'm0,21.1A8.2,8.2,0,1,1,40.8,39,8.2,8.2,0,0,1,32.7,47.1Z' +
            'm0-12.6A4.5,4.5,0,1,0,37.1,39,4.5,4.5,0,0,0,32.7,34.5Z'],
    ['m_destination', 'M30.3,63.8l-0.9-.3a1.8,1.8,0,0,1-.9-1.6V57.1' +
            'a1.8,1.8,0,0,1,3.7,0v1.7l8.2-4.5-8.2-4.4v1.7a1.8,1.8,0,0,1-1.8,1.8' +
            'H17.5a1.8,1.8,0,1,1,0-3.7H28.4V46.8a1.8,1.8,0,0,1,2.7-1.6l14,7.5' +
            'a1.8,1.8,0,0,1,0,3.2l-14,7.7Z' +
            'M64.9,77.7a3.6,3.6,0,0,1-3.1-1.8L48.3,52.1l-0.9-1.6' +
            'a19.3,19.3,0,0,1-2-8.6,19.6,19.6,0,0,1,6.1-14.2' +
            'A19.5,19.5,0,0,1,84.3,40.5a19.5,19.5,0,0,1-1.9,9.8v0.2l-0.9,1.7' +
            'L68,75.9A3.6,3.6,0,0,1,64.9,77.7ZM50.7,48.8l0.8,1.4' +
            'L64.9,73.9,78.2,50.3,79,48.8h0a15.8,15.8,0,0,0,1.6-8' +
            'a15.8,15.8,0,1,0-29.9,8h0Zm14.1-1.7' +
            'A8.2,8.2,0,1,1,73,39,8.2,8.2,0,0,1,64.9,47.1Z' +
            'm0-12.6A4.5,4.5,0,1,0,69.3,39,4.5,4.5,0,0,0,64.9,34.5Z'],
    ['m_topo', 'M31.3,73H21.5a3.1,3.1,0,0,1-3-3V60.1a3.1,3.1,0,0,1,3-3' +
            'h9.8a3.2,3.2,0,0,1,3,3V70A3.1,3.1,0,0,1,31.3,73Z' +
            'M78.5,46.7H68.7a3.1,3.1,0,0,1-3-3V33.8a3.1,3.1,0,0,1,3-3h9.8' +
            'a3.1,3.1,0,0,1,3,3v9.8A3.1,3.1,0,0,1,78.5,46.7Z' +
            'M40.8,42.9H31a3.1,3.1,0,0,1-3-3V30a3.1,3.1,0,0,1,3-3' +
            'h9.9a2.9,2.9,0,0,1,2.9,3v9.8A3.1,3.1,0,0,1,40.8,42.9Z' +
            'M37.4,66.1a1.8,1.8,0,0,1-1.2-3.3L61.1,42a1.8,1.8,0,1,1,2.4,2.8' +
            'L38.6,65.7A1.8,1.8,0,0,1,37.4,66.1Z' +
            'M27.4,55.5a1.8,1.8,0,0,1-1.5-3l5.8-7.7a1.8,1.8,0,1,1,2.9,2.2' +
            'l-5.8,7.7A1.8,1.8,0,0,1,27.4,55.5Z' +
            'M62.5,39.7H62.2L46.6,36.5a1.8,1.8,0,1,1,.7-3.6L62.9,36' +
            'A1.8,1.8,0,0,1,62.5,39.7Z'],
    ['m_shortestPath', 'M28.2,31.2H19.5a3,3,0,0,1-3-3V19.5a3,3,0,0,1,3-3' +
            'h8.6c1.8,0.4,3,1.4,3,3v8.6A3,3,0,0,1,28.2,31.2Z' +
            'M80.2,83.2H71.6a3,3,0,0,1-3-3V71.5a3,3,0,0,1,3-3h8.6' +
            'c1.7,0.4,3,1.4,3,3v8.6A3,3,0,0,1,80.2,83.2Z' +
            'M67.6,67.4a1.8,1.8,0,0,1-1.3.5,1.9,1.9,0,0,1-1.3-.5L54.7,57.1' +
            'H45.6a3,3,0,0,1-3-3V45.5a2.1,2.1,0,0,1,.1-0.5L32.3,34.7' +
            'a1.8,1.8,0,0,1,0-2.6,1.9,1.9,0,0,1,2.6,0L45.3,42.5h8.9' +
            'a3,3,0,0,1,3,3v8.6a0.9,0.9,0,0,1,0,.2L67.6,64.8' +
            'A1.8,1.8,0,0,1,67.6,67.4Z'],
    ['m_disjointPaths', 'M67.7,59.8h9.4a2.9,2.9,0,0,1,3,3v9.4' +
            'a3.1,3.1,0,0,1-3,3H67.7a3.1,3.1,0,0,1-3-3V62.9' +
            'A3.1,3.1,0,0,1,67.7,59.8Z' +
            'M22.9,59.8h9.4a2.9,2.9,0,0,1,3,3v9.4a3.1,3.1,0,0,1-3,3H22.9' +
            'a3.1,3.1,0,0,1-3-3V62.9A3.1,3.1,0,0,1,22.9,59.8Z' +
            'M45.3,24.7h9.4a2.9,2.9,0,0,1,3,3v9.4a3.1,3.1,0,0,1-3,3H45.3' +
            'a3.1,3.1,0,0,1-3-3V27.7A3.1,3.1,0,0,1,45.3,24.7Z' +
            'M65.9,58.5a1.8,1.8,0,0,1-1.5-.8L55.3,44.3a1.8,1.8,0,0,1,3.1-2.1' +
            'l9.1,13.4A1.8,1.8,0,0,1,65.9,58.5Z' +
            'M61.1,68.8H39.1a1.8,1.8,0,1,1,0-3.7H61.1A1.8,1.8,0,0,1,61.1,68.8Z' +
            'M35.5,59.9l-1-.3a1.8,1.8,0,0,1-.6-2.5l8.8-14.3' +
            'a1.8,1.8,0,0,1,3.1,1.9L37.1,59A1.8,1.8,0,0,1,35.5,59.9Z'],
    ['m_region', 'M49.8,70.9a3.4,3.4,0,0,1-3-1.8L34.3,47l-0.8-1.5' +
            'a18.2,18.2,0,0,1-1.9-8.2,18.4,18.4,0,0,1,5.8-13.3' +
            'A18.3,18.3,0,0,1,68.1,36.1h0a18.4,18.4,0,0,1-1.9,9.3' +
            'L65.3,47,52.8,69.2A3.4,3.4,0,0,1,49.8,70.9Zm0-48.3' +
            'A14.6,14.6,0,0,0,36.7,43.8l0.7,1.3L49.8,67,62.2,45.2l0.8-1.3' +
            'a14.7,14.7,0,0,0,1.5-7.5h0A14.8,14.8,0,0,0,50.7,22.7H49.8Z' +
            'm0,19.7a7.7,7.7,0,1,1,7.7-7.7A7.7,7.7,0,0,1,49.8,42.4Zm0-11.8' +
            'a4.1,4.1,0,1,0,4.1,4.1A4.1,4.1,0,0,0,49.8,30.6Z' +
            'M81.7,80.8H17.9a1.8,1.8,0,0,1-1.6-2.7l9.2-16.8' +
            'a1.8,1.8,0,0,1,1.6-1h9.5a1.8,1.8,0,1,1,0,3.7H28.2L21,77.1H78.6' +
            'L71.4,64H61.9a1.8,1.8,0,1,1,0-3.7H72.5a1.8,1.8,0,0,1,1.6,1' +
            'l9.2,16.8A1.8,1.8,0,0,1,81.7,80.8Z'],
]);
/** @type {?} */
var extraGlyphs = new Map([
    ['_yang', '0 0 400 400'],
    ['yang', 'M323.3,199.2a33.2,33.2,0,1,1-66.4,0' +
            'c0-18.4,14.9-34.1,33.2-33.3S323.3,180.8,323.3,199.2Z' +
            'M286.5,289.9c-78.2-.3-86.6-72.2-86.9-89.1s-14.6-91.8-88.3-88.3' +
            'c-7.5.3-34.6,1.2-56.9,20.1-25.8,21.8-29,53.9-30.5,68.2-0.2,' +
            '2.2-.4,4.4-0.5,6.5h0a175.5,175.5,0,0,0,171,172.9H199' +
            'a175.5,175.5,0,0,0,58.6-10l3.9-1.4,3.9-1.5,3.9-1.7h0' +
            'l3.9-1.7,2.8-1.3,2.7-1.4a175.6,175.6,0,0,0,95.9-155.1' +
            'C372.4,226.7,358,290.1,286.5,289.9ZM110.1,237.7' +
            'A33.6,33.6,0,1,1,143.7,204,33.6,33.6,0,0,1,110.1,237.7Z'],
]);
/**
 * ONOS GUI -- SVG -- Glyph Data Service
 */
var GlyphDataService = /** @class */ (function () {
    function GlyphDataService(log) {
        this.log = log;
        this.log.debug('GlyphDataService constructed');
    }
    GlyphDataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    GlyphDataService.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    /** @nocollapse */ GlyphDataService.ngInjectableDef = defineInjectable({ factory: function GlyphDataService_Factory() { return new GlyphDataService(inject(LogService)); }, token: GlyphDataService, providedIn: "root" });
    return GlyphDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
// --- Ordinal scales for 7 values.
// TODO: migrate these colors to the theme service.
// Colors per Mojo-Design's color palette.. (version one)
//               blue       red        dk grey    steel      lt blue    lt red     lt grey
// var lightNorm = ['#5b99d2', '#d05a55', '#716b6b', '#7e9aa8', '#66cef6', '#db7773', '#aeada8' ],
//     lightMute = ['#a8cceb', '#f1a7a7', '#b9b5b5', '#bdcdd5', '#a8e9fd', '#f8c9c9', '#d7d6d4' ],
// Colors per Mojo-Design's color palette.. (version two)
//               blue       lt blue    red        green      brown      teal       lime
/** @type {?} */
var lightNorm = ['#5b99d2', '#66cef6', '#d05a55', '#0f9d58', '#ba7941', '#3dc0bf', '#56af00'];
/** @type {?} */
var lightMute = ['#9ebedf', '#abdef5', '#d79a96', '#7cbe99', '#cdab8d', '#96d5d5', '#a0c96d'];
/** @type {?} */
var darkNorm = ['#5b99d2', '#66cef6', '#d05a55', '#0f9d58', '#ba7941', '#3dc0bf', '#56af00'];
/** @type {?} */
var darkMute = ['#9ebedf', '#abdef5', '#d79a96', '#7cbe99', '#cdab8d', '#96d5d5', '#a0c96d'];
/** @type {?} */
var colors = {
    light: {
        norm: scaleOrdinal().range(lightNorm),
        mute: scaleOrdinal().range(lightMute),
    },
    dark: {
        norm: scaleOrdinal().range(darkNorm),
        mute: scaleOrdinal().range(darkMute),
    },
};
/**
 * ONOS GUI -- SVG -- Util Service
 *
 * The SVG Util Service provides a miscellany of utility functions.
 */
var SvgUtilService = /** @class */ (function () {
    function SvgUtilService(fs, log) {
        this.fs = fs;
        this.log = log;
        this.log.debug('SvgUtilService constructed');
    }
    /**
     * @param {?} x
     * @param {?=} y
     * @return {?}
     */
    SvgUtilService.prototype.translate = /**
     * @param {?} x
     * @param {?=} y
     * @return {?}
     */
    function (x, y) {
        if (this.fs.isA(x) && x.length === 2 && !y) {
            return 'translate(' + x[0] + ',' + x[1] + ')';
        }
        return 'translate(' + x + ',' + y + ')';
    };
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    SvgUtilService.prototype.scale = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        return 'scale(' + x + ',' + y + ')';
    };
    /**
     * @param {?} x
     * @return {?}
     */
    SvgUtilService.prototype.skewX = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        return 'skewX(' + x + ')';
    };
    /**
     * @param {?} deg
     * @return {?}
     */
    SvgUtilService.prototype.rotate = /**
     * @param {?} deg
     * @return {?}
     */
    function (deg) {
        return 'rotate(' + deg + ')';
    };
    /**
     * @return {?}
     */
    SvgUtilService.prototype.cat7 = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tcid = 'd3utilTestCard';
        /**
         * @param {?} id
         * @param {?} muted
         * @param {?} theme
         * @return {?}
         */
        function getColor(id, muted, theme) {
            // NOTE: since we are lazily assigning domain ids, we need to
            //       get the color from all 4 scales, to keep the domains
            //       in sync.
            /** @type {?} */
            var ln = colors.light.norm(id);
            /** @type {?} */
            var lm = colors.light.mute(id);
            /** @type {?} */
            var dn = colors.dark.norm(id);
            /** @type {?} */
            var dm = colors.dark.mute(id);
            if (theme === 'dark') {
                return muted ? dm : dn;
            }
            else {
                return muted ? lm : ln;
            }
        }
        /**
         * @param {?} svg
         * @return {?}
         */
        function testCard(svg) {
            /** @type {?} */
            var g = svg.select('g#' + tcid);
            /** @type {?} */
            var dom = range(7);
            /** @type {?} */
            var k;
            /** @type {?} */
            var muted;
            /** @type {?} */
            var theme;
            /** @type {?} */
            var what;
            if (!g.empty()) {
                g.remove();
            }
            else {
                g = svg.append('g')
                    .attr('id', tcid)
                    .attr('transform', 'scale(4)translate(20,20)');
                for (k = 0; k < 4; k++) {
                    muted = k % 2;
                    what = muted ? ' muted' : ' normal';
                    theme = k < 2 ? 'light' : 'dark';
                    dom.forEach(function (id, i) {
                        /** @type {?} */
                        var x = i * 20;
                        /** @type {?} */
                        var y = k * 20;
                        g.append('circle')
                            .attr('cx', x)
                            .attr('cy', y)
                            .attr('r', 5)
                            .attr('fill', getColor(id, muted, theme));
                    });
                    g.append('rect')
                        .attr('x', 140)
                        .attr('y', k * 20 - 5)
                        .attr('width', 32)
                        .attr('height', 10)
                        .attr('rx', 2)
                        .attr('fill', '#888');
                    g.append('text').text(theme + what)
                        .attr('x', 142)
                        .attr('y', k * 20 + 2)
                        .attr('fill', 'white');
                    // .style('font-size', '4pt');
                }
            }
        }
        return {
            testCard: testCard,
            getColor: getColor,
        };
    };
    SvgUtilService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    SvgUtilService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService }
    ]; };
    /** @nocollapse */ SvgUtilService.ngInjectableDef = defineInjectable({ factory: function SvgUtilService_Factory() { return new SvgUtilService(inject(FnService), inject(LogService)); }, token: SvgUtilService, providedIn: "root" });
    return SvgUtilService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
// constants
/** @type {?} */
var msgGS = 'GlyphService.';
/** @type {?} */
var rg = 'registerGlyphs(): ';
/** @type {?} */
var rgs = 'registerGlyphSet(): ';
/**
 * ONOS GUI -- SVG -- Glyph Service
 */
var GlyphService = /** @class */ (function () {
    function GlyphService(fs, log, sus) {
        this.fs = fs;
        this.log = log;
        this.sus = sus;
        // internal state
        this.glyphs = map();
        this.clear();
        this.init();
        this.api = {
            registerGlyphs: this.registerGlyphs,
            registerGlyphSet: this.registerGlyphSet,
            ids: this.ids,
            glyph: this.glyph,
            glyphDefined: this.glyphDefined,
            loadDefs: this.loadDefs,
            addGlyph: this.addGlyph,
        };
        this.log.debug('GlyphService constructed');
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    GlyphService.prototype.warn = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.log.warn(msgGS + msg);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} vbox
     * @param {?} overwrite
     * @param {?} dups
     * @return {?}
     */
    GlyphService.prototype.addToMap = /**
     * @param {?} key
     * @param {?} value
     * @param {?} vbox
     * @param {?} overwrite
     * @param {?} dups
     * @return {?}
     */
    function (key, value, vbox, overwrite, dups) {
        if (!overwrite && this.glyphs.get(key)) {
            dups.push(key);
        }
        else {
            this.glyphs.set(key, { id: key, vb: vbox, d: value });
        }
    };
    /**
     * @param {?} dups
     * @param {?} which
     * @return {?}
     */
    GlyphService.prototype.reportDups = /**
     * @param {?} dups
     * @param {?} which
     * @return {?}
     */
    function (dups, which) {
        var _this = this;
        /** @type {?} */
        var ok = (dups.length === 0);
        /** @type {?} */
        var msg = 'ID collision: ';
        if (!ok) {
            dups.forEach(function (id) {
                _this.warn(which + msg + '"' + id + '"');
            });
        }
        return ok;
    };
    /**
     * @param {?} missing
     * @param {?} which
     * @return {?}
     */
    GlyphService.prototype.reportMissVb = /**
     * @param {?} missing
     * @param {?} which
     * @return {?}
     */
    function (missing, which) {
        var _this = this;
        /** @type {?} */
        var ok = (missing.length === 0);
        /** @type {?} */
        var msg = 'Missing viewbox property: ';
        if (!ok) {
            missing.forEach(function (vbk) {
                _this.warn(which + msg + '"' + vbk + '"');
            });
        }
        return ok;
    };
    /**
     * @return {?}
     */
    GlyphService.prototype.clear = /**
     * @return {?}
     */
    function () {
        // start with a fresh map
        this.glyphs = map();
    };
    /**
     * @return {?}
     */
    GlyphService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.log.info('Registering glyphs');
        this.registerGlyphs(logos);
        this.registerGlyphSet(glyphDataSet);
        this.registerGlyphSet(badgeDataSet);
        this.registerGlyphs(spriteData);
        this.registerGlyphSet(mojoDataSet);
        this.registerGlyphs(extraGlyphs);
    };
    /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    GlyphService.prototype.registerGlyphs = /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    function (data, overwrite) {
        if (overwrite === void 0) { overwrite = false; }
        var e_1, _a;
        /** @type {?} */
        var dups = [];
        /** @type {?} */
        var missvb = [];
        try {
            for (var _b = __values(data.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                /** @type {?} */
                var vbk = '_' + key;
                /** @type {?} */
                var vb = data.get(vbk);
                if (key[0] !== '_') {
                    if (!vb) {
                        missvb.push(vbk);
                        continue;
                    }
                    this.addToMap(key, value, vb, overwrite, dups);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this.reportDups(dups, rg) && this.reportMissVb(missvb, rg);
    };
    /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    GlyphService.prototype.registerGlyphSet = /**
     * @param {?} data
     * @param {?=} overwrite
     * @return {?}
     */
    function (data, overwrite) {
        if (overwrite === void 0) { overwrite = false; }
        var e_2, _a;
        /** @type {?} */
        var dups = [];
        /** @type {?} */
        var vb = data.get('_viewbox');
        if (!vb) {
            this.warn(rgs + 'no "_viewbox" property found');
            return false;
        }
        try {
            for (var _b = __values(data.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                //        angular.forEach(data, function (value, key) {
                if (key[0] !== '_') {
                    this.addToMap(key, value, vb, overwrite, dups);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.reportDups(dups, rgs);
    };
    /**
     * @return {?}
     */
    GlyphService.prototype.ids = /**
     * @return {?}
     */
    function () {
        return this.glyphs.keys();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GlyphService.prototype.glyph = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.glyphs.get(id);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GlyphService.prototype.glyphDefined = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.glyphs.has(id);
    };
    /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     */
    /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     * @param {?} defs
     * @param {?} glyphIds
     * @param {?} noClear
     * @return {?}
     */
    GlyphService.prototype.loadDefs = /**
     * Load definitions of a glyph
     *
     * Note: defs should be a D3 selection of a single <defs> element
     * @param {?} defs
     * @param {?} glyphIds
     * @param {?} noClear
     * @return {?}
     */
    function (defs, glyphIds, noClear) {
        var _this = this;
        /** @type {?} */
        var list = this.fs.isA(glyphIds) || this.ids();
        if (!noClear) {
            // remove all existing content
            defs.html(null);
        }
        // load up the requested glyphs
        list.forEach(function (id) {
            /** @type {?} */
            var g = _this.glyph(id);
            if (g) {
                if (noClear) {
                    // quick exit if symbol is already present
                    // TODO: check if this should be a continue or break instead
                    if (defs.select('symbol#' + g.id).size() > 0) {
                        return;
                    }
                }
                defs.append('symbol')
                    .attr('id', g.id)
                    .attr('viewBox', g.vb)
                    .append('path')
                    .attr('d', g.d);
            }
        });
    };
    /**
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} size
     * @param {?} overlay
     * @param {?} trans
     * @return {?}
     */
    GlyphService.prototype.addGlyph = /**
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} size
     * @param {?} overlay
     * @param {?} trans
     * @return {?}
     */
    function (elem, glyphId, size, overlay, trans) {
        /** @type {?} */
        var sz = size || 40;
        /** @type {?} */
        var ovr = !!overlay;
        /** @type {?} */
        var xns = this.fs.isA(trans);
        /** @type {?} */
        var glyphUse = elem
            .append('use')
            .attr('width', sz)
            .attr('height', sz)
            .attr('class', 'glyph')
            .attr('xlink:href', '#' + glyphId)
            .classed('overlay', ovr);
        if (xns) {
            glyphUse.attr('transform', this.sus.translate(trans));
        }
        return glyphUse;
    };
    GlyphService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    GlyphService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: SvgUtilService }
    ]; };
    /** @nocollapse */ GlyphService.ngInjectableDef = defineInjectable({ factory: function GlyphService_Factory() { return new GlyphService(inject(FnService), inject(LogService), inject(SvgUtilService)); }, token: GlyphService, providedIn: "root" });
    return GlyphService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var vboxSize = 50;
/** @type {?} */
var cornerSize = vboxSize / 10;
/** @type {?} */
var viewBox = '0 0 ' + vboxSize + ' ' + vboxSize;
/** @type {?} */
var glyphMapping = new Map([
    // Maps icon ID to the glyph ID it uses.
    // NOTE: icon ID maps to a CSS class for styling that icon
    ['active', 'checkMark'],
    ['inactive', 'xMark'],
    ['plus', 'plus'],
    ['minus', 'minus'],
    ['play', 'play'],
    ['stop', 'stop'],
    ['upload', 'upload'],
    ['download', 'download'],
    ['delta', 'delta'],
    ['nonzero', 'nonzero'],
    ['close', 'xClose'],
    ['m_cloud', 'm_cloud'],
    ['m_map', 'm_map'],
    ['m_selectMap', 'm_selectMap'],
    ['thatsNoMoon', 'thatsNoMoon'],
    ['m_ports', 'm_ports'],
    ['m_switch', 'm_switch'],
    ['m_roadm', 'm_roadm'],
    ['m_router', 'm_router'],
    ['m_uiAttached', 'm_uiAttached'],
    ['m_endstation', 'm_endstation'],
    ['m_summary', 'm_summary'],
    ['m_details', 'm_details'],
    ['m_oblique', 'm_oblique'],
    ['m_filters', 'm_filters'],
    ['m_cycleLabels', 'm_cycleLabels'],
    ['m_cycleGridDisplay', 'm_cycleGridDisplay'],
    ['m_prev', 'm_prev'],
    ['m_next', 'm_next'],
    ['m_flows', 'm_flows'],
    ['m_allTraffic', 'm_allTraffic'],
    ['m_xMark', 'm_xMark'],
    ['m_resetZoom', 'm_resetZoom'],
    ['m_eqMaster', 'm_eqMaster'],
    ['m_unknown', 'm_unknown'],
    ['m_controller', 'm_controller'],
    ['m_eqMaster', 'm_eqMaster'],
    ['m_virtual', 'm_virtual'],
    ['m_other', 'm_other'],
    ['m_bgpSpeaker', 'm_bgpSpeaker'],
    ['m_otn', 'm_otn'],
    ['m_roadm_otn', 'm_roadm_otn'],
    ['m_fiberSwitch', 'm_fiberSwitch'],
    ['m_microwave', 'm_microwave'],
    ['m_relatedIntents', 'm_relatedIntents'],
    ['m_intentTraffic', 'm_intentTraffic'],
    ['m_firewall', 'm_firewall'],
    ['m_balancer', 'm_balancer'],
    ['m_ips', 'm_ips'],
    ['m_ids', 'm_ids'],
    ['m_olt', 'm_olt'],
    ['m_onu', 'm_onu'],
    ['m_swap', 'm_swap'],
    ['m_shortestGeoPath', 'm_shortestGeoPath'],
    ['m_source', 'm_source'],
    ['m_destination', 'm_destination'],
    ['m_topo', 'm_topo'],
    ['m_shortestPath', 'm_shortestPath'],
    ['m_disjointPaths', 'm_disjointPaths'],
    ['m_region', 'm_region'],
    ['topo', 'topo'],
    ['bird', 'bird'],
    ['refresh', 'refresh'],
    ['query', 'query'],
    ['garbage', 'garbage'],
    ['upArrow', 'triangleUp'],
    ['downArrow', 'triangleDown'],
    ['triangleLeft', 'triangleLeft'],
    ['triangleRight', 'triangleRight'],
    ['appInactive', 'unknown'],
    ['uiAttached', 'uiAttached'],
    ['node', 'node'],
    ['devIcon_SWITCH', 'switch'],
    ['devIcon_ROADM', 'roadm'],
    ['devIcon_OTN', 'otn'],
    ['portIcon_DEFAULT', 'm_ports'],
    ['meter', 'meterTable'],
    ['deviceTable', 'switch'],
    ['flowTable', 'flowTable'],
    ['portTable', 'portTable'],
    ['groupTable', 'groupTable'],
    ['meterTable', 'meterTable'],
    ['pipeconfTable', 'pipeconfTable'],
    ['hostIcon_endstation', 'endstation'],
    ['hostIcon_router', 'router'],
    ['hostIcon_bgpSpeaker', 'bgpSpeaker'],
    // navigation menu icons...
    ['nav_apps', 'bird'],
    ['nav_settings', 'cog'],
    ['nav_cluster', 'node'],
    ['nav_processors', 'allTraffic'],
    ['nav_partitions', 'unknown'],
    ['nav_topo', 'topo'],
    ['nav_topo2', 'm_cloud'],
    ['nav_devs', 'switch'],
    ['nav_links', 'ports'],
    ['nav_hosts', 'endstation'],
    ['nav_intents', 'relatedIntents'],
    ['nav_tunnels', 'ports'],
    ['nav_yang', 'yang'],
]);
/**
 * ONOS GUI -- SVG -- Icon Service
 */
var IconService = /** @class */ (function () {
    function IconService(gs, log, sus) {
        this.gs = gs;
        this.log = log;
        this.sus = sus;
        this.log.debug('IconService constructed');
    }
    /**
     * @return {?}
     */
    IconService.prototype.ensureIconLibDefs = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var body = select('body');
        /** @type {?} */
        var svg = body.select('svg#IconLibDefs');
        if (svg.empty()) {
            svg = body.append('svg').attr('id', 'IconLibDefs');
            svg.append('defs');
        }
        return svg.select('defs');
    };
    /**
     * Load an icon
     *
     * @param div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param glyphId Identifies the glyph to use
     * @param size The dimension of icon in pixels. Defaults to 20.
     * @param installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     */
    /**
     * Load an icon
     *
     * @param {?} div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param {?=} glyphId Identifies the glyph to use
     * @param {?=} size The dimension of icon in pixels. Defaults to 20.
     * @param {?=} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    IconService.prototype.loadIcon = /**
     * Load an icon
     *
     * @param {?} div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param {?=} glyphId Identifies the glyph to use
     * @param {?=} size The dimension of icon in pixels. Defaults to 20.
     * @param {?=} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    function (div, glyphId, size, installGlyph, svgClass) {
        if (glyphId === void 0) { glyphId = 'unknown'; }
        if (size === void 0) { size = 20; }
        if (installGlyph === void 0) { installGlyph = true; }
        if (svgClass === void 0) { svgClass = 'embeddedIcon'; }
        /** @type {?} */
        var dim = size || 20;
        /** @type {?} */
        var svgCls = svgClass || 'embeddedIcon';
        /** @type {?} */
        var gid = glyphId || 'unknown';
        /** @type {?} */
        var g;
        /** @type {?} */
        var svgIcon;
        if (installGlyph) {
            this.gs.loadDefs(this.ensureIconLibDefs(), [gid], true);
        }
        this.log.warn('loadEmbeddedIcon. install done');
        svgIcon = div
            .append('svg')
            .attr('class', svgCls)
            .attr('width', dim)
            .attr('height', dim)
            .attr('viewBox', viewBox);
        g = svgIcon.append('g')
            .attr('class', 'icon');
        g.append('rect')
            .attr('width', vboxSize)
            .attr('height', vboxSize)
            .attr('rx', cornerSize);
        g.append('use')
            .attr('width', vboxSize)
            .attr('height', vboxSize)
            .attr('class', 'glyph')
            .attr('xlink:href', '#' + gid);
    };
    /**
     * Load an icon by class.
     * @param div A D3 selection of the <DIV> element into which icon should load
     * @param iconCls The CSS class used to identify the icon
     * @param size The dimension of icon in pixels. Defaults to 20.
     * @param installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     */
    /**
     * Load an icon by class.
     * @param {?} div A D3 selection of the <DIV> element into which icon should load
     * @param {?} iconCls The CSS class used to identify the icon
     * @param {?} size The dimension of icon in pixels. Defaults to 20.
     * @param {?} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    IconService.prototype.loadIconByClass = /**
     * Load an icon by class.
     * @param {?} div A D3 selection of the <DIV> element into which icon should load
     * @param {?} iconCls The CSS class used to identify the icon
     * @param {?} size The dimension of icon in pixels. Defaults to 20.
     * @param {?} installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param {?=} svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     * @return {?}
     */
    function (div, iconCls, size, installGlyph, svgClass) {
        if (svgClass === void 0) { svgClass = 'embeddedIcon'; }
        this.loadIcon(div, glyphMapping.get(iconCls), size, installGlyph, svgClass);
        div.select('svg g').classed(iconCls, true);
    };
    /**
     * Load an embedded icon.
     */
    /**
     * Load an embedded icon.
     * @param {?} div
     * @param {?} iconCls
     * @param {?} size
     * @return {?}
     */
    IconService.prototype.loadEmbeddedIcon = /**
     * Load an embedded icon.
     * @param {?} div
     * @param {?} iconCls
     * @param {?} size
     * @return {?}
     */
    function (div, iconCls, size) {
        this.loadIconByClass(div, iconCls, size, true);
    };
    /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param iconCls The icon class as a string
     */
    /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param {?} iconCls The icon class as a string
     * @return {?}
     */
    IconService.prototype.loadIconDef = /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param {?} iconCls The icon class as a string
     * @return {?}
     */
    function (iconCls) {
        /** @type {?} */
        var glyphName = glyphMapping.get(iconCls);
        if (!glyphName) {
            glyphName = iconCls;
        }
        this.gs.loadDefs(this.ensureIconLibDefs(), [glyphName], true);
        this.log.debug('icon definition', iconCls, 'added to defs');
    };
    /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     */
    /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} iconDim
     * @return {?}
     */
    IconService.prototype.addDeviceIcon = /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     * @param {?} elem
     * @param {?} glyphId
     * @param {?} iconDim
     * @return {?}
     */
    function (elem, glyphId, iconDim) {
        /** @type {?} */
        var gid = this.gs.glyphDefined(glyphId) ? glyphId : 'query';
        return elem.append('use').attr({
            'xlink:href': '#' + gid,
            width: iconDim,
            height: iconDim,
        });
    };
    /**
     * @param {?} elem
     * @param {?} radius
     * @param {?} glyphId
     * @return {?}
     */
    IconService.prototype.addHostIcon = /**
     * @param {?} elem
     * @param {?} radius
     * @param {?} glyphId
     * @return {?}
     */
    function (elem, radius, glyphId) {
        /** @type {?} */
        var dim = radius * 1.5;
        /** @type {?} */
        var xlate = -dim / 2;
        /** @type {?} */
        var g = elem.append('g')
            .attr('class', 'svgIcon hostIcon');
        g.append('circle').attr('r', radius);
        g.append('use').attr({
            'xlink:href': '#' + glyphId,
            width: dim,
            height: dim,
            transform: this.sus.translate([xlate], xlate),
        });
        return g;
    };
    /**
     * @param {?} iconId
     * @param {?} glyphId
     * @return {?}
     */
    IconService.prototype.registerIconMapping = /**
     * @param {?} iconId
     * @param {?} glyphId
     * @return {?}
     */
    function (iconId, glyphId) {
        if (glyphMapping[iconId]) {
            this.log.warn('Icon with id', iconId, 'already mapped. Ignoring.');
        }
        else {
            // map icon-->glyph
            glyphMapping[iconId] = glyphId;
            // make sure definition is installed
            this.gs.loadDefs(this.ensureIconLibDefs(), [glyphId], true);
        }
    };
    IconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    IconService.ctorParameters = function () { return [
        { type: GlyphService },
        { type: LogService },
        { type: SvgUtilService }
    ]; };
    /** @nocollapse */ IconService.ngInjectableDef = defineInjectable({ factory: function IconService_Factory() { return new IconService(inject(GlyphService), inject(LogService), inject(SvgUtilService)); }, token: IconService, providedIn: "root" });
    return IconService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Icon Component
 *
 * Note: This is an alternative to the Icon Directive from ONOS 1.0.0
 * It has been implemented as a Component because it was inadvertently adding
 * in a template through d3 DOM manipulations - it's better to make it a Comp
 * and build a template the Angular 7 way
 *
 * Remember: The CSS files applied here only apply to this component
 */
var IconComponent = /** @class */ (function () {
    function IconComponent(is, log) {
        this.is = is;
        this.log = log;
        this.iconSize = 20;
        this.toolTip = undefined;
        this.classes = undefined;
        // The displayed tooltip - undefined until mouse hovers over, then equals toolTip
        this.toolTipDisp = undefined;
        // Note: iconId is not available until initialization
        this.log.debug('IconComponent constructed');
    }
    /**
     * Icons are loaded in to the DOM under iconDefs
     */
    /**
     * Icons are loaded in to the DOM under iconDefs
     * @return {?}
     */
    IconComponent.prototype.ngOnInit = /**
     * Icons are loaded in to the DOM under iconDefs
     * @return {?}
     */
    function () {
        this.is.loadIconDef(this.iconId);
    };
    /**
     * This is needed in case the iconId changes while icon component
     * is displayed on screen.
     */
    /**
     * This is needed in case the iconId changes while icon component
     * is displayed on screen.
     * @return {?}
     */
    IconComponent.prototype.ngOnChanges = /**
     * This is needed in case the iconId changes while icon component
     * is displayed on screen.
     * @return {?}
     */
    function () {
        this.is.loadIconDef(this.iconId);
    };
    /**
     * Get the corresponding iconTag from the glyphMapping in the iconService
     * @returns The iconTag corresponding to the iconId of this instance
     */
    /**
     * Get the corresponding iconTag from the glyphMapping in the iconService
     * @return {?} The iconTag corresponding to the iconId of this instance
     */
    IconComponent.prototype.iconTag = /**
     * Get the corresponding iconTag from the glyphMapping in the iconService
     * @return {?} The iconTag corresponding to the iconId of this instance
     */
    function () {
        /** @type {?} */
        var iconIdStr = glyphMapping.get(this.iconId);
        if (iconIdStr) {
            return '#' + iconIdStr;
        }
        else {
            return '#' + this.iconId;
        }
    };
    IconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-icon',
                    template: "<!--\n~ Copyright 2018-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n<div class=\"tooltip\">\n<svg class=\"embeddedIcon\" [attr.width]=\"iconSize\" [attr.height]=\"iconSize\" viewBox=\"0 0 50 50\" (mouseover)=\"toolTipDisp = toolTip\" (mouseout)=\"toolTipDisp = undefined\">\n    <g class=\"icon\" [ngClass]=\"classes\">\n        <rect width=\"50\" height=\"50\" rx=\"5\"></rect>\n        <use width=\"50\" height=\"50\" class=\"glyph\" [attr.href]=\"iconTag()\"></use>\n    </g>\n</svg>\n<!-- I'm fixing class as light as view encapsulation changes how the hirerarchy of css is handled -->\n\n<!-- <p id=\"tooltip\" class=\"light\" *ngIf=\"toolTip\" [ngStyle]=\"{ 'display': toolTipDisp ? 'inline-block':'none'}\">{{ toolTipDisp }}</p> -->\n\n    <span class=\"tooltiptext\" [ngStyle]=\"{ 'display': toolTipDisp ? 'inline-block':'none'}\">{{toolTipDisp}}</span>\n</div>\n",
                    styles: ["svg#IconLibDefs{display:none}svg .svgIcon{fill-rule:evenodd}svg.embeddedIcon g.icon{fill:none}.ctrl-btns div svg.embeddedIcon g.icon use{fill:#e0dfd6}.ctrl-btns div.active svg.embeddedIcon g.icon use{fill:#939598}.ctrl-btns div.active:hover svg.embeddedIcon g.icon use{fill:#ce5b58}.ctrl-btns div.current-view svg.embeddedIcon g.icon rect{fill:#518ecc}.ctrl-btns div.current-view svg.embeddedIcon g.icon use{fill:#fff}svg.embeddedIcon .icon.active .glyph{fill:#04bf34}svg.embeddedIcon .icon.inactive .glyph{fill:#c0242b}svg.embeddedIcon .icon.active-rect .glyph{fill:#939598}svg.embeddedIcon .icon.active-sort .glyph{fill:#333}svg.embeddedIcon g.icon.active-rect:hover use{fill:#ce5b58}svg.embeddedIcon g.icon.active-type .glyph{fill:#3c3a3a}svg.embeddedIcon g.icon.active-close:hover use{fill:#ce5b58}svg.embeddedIcon g.icon.active-close .glyph{fill:#333}svg.embeddedIcon g.icon.details-icon .glyph{fill:#0071bd}", "div.close-btn svg.embeddedIcon g.icon .glyph{fill:#333}div.tableColSort svg.embeddedIcon .icon .glyph{fill:#353333;fill:#888}svg.embeddedIcon g.icon use{fill:#e0dfd6}.ctrl-btns div.active svg.embeddedIcon g.icon use{fill:#939598}svg.embeddedIcon g.icon.active:hover use{fill:#ce5b58}svg.embeddedIcon g.icon.current-view rect{fill:#518ecc}svg.embeddedIcon g.icon.current-view use{fill:#fff}svg.embeddedIcon g.icon.refresh use{fill:#cdeff2}svg.embeddedIcon g.icon.refresh:hover use{fill:#ce5b58}svg.embeddedIcon g.icon.refresh.active use{fill:#009fdb}svg.embeddedIcon g.icon.refresh.active:hover use{fill:#ce5b58}div.close-btn svg.embeddedIcon g.icon .glyph{fill:#8d8d8d}table svg.embeddedIcon .icon .glyph{fill:#99a}svg.embeddedIcon g.icon.devIcon_SWITCH .glyph,svg.embeddedIcon g.icon.hostIcon_endstation .glyph{fill:#0071bd}", "svg .glyph{stroke:none;fill-rule:evenodd}", ".dark svg .glyph,.dark svg .glyph.overlay,.light svg .glyph,.light svg .glyph.overlay{fill:#00f}", "#tooltip{text-align:center;font-size:80%;border:1px solid;padding:5px;position:absolute;z-index:5000;display:inline-block;pointer-events:none;top:40px;right:auto}.tooltip{position:relative;display:inline-block}.tooltip .tooltiptext{display:inline-block;visibility:hidden;background-color:#dbeffc;color:#3c3a3a;border-color:#c7c7c0;text-align:center;border-radius:6px;font-size:80%;padding:5px;position:absolute;z-index:5000;top:42px;right:10%;white-space:nowrap}.tooltip:hover .tooltiptext{visibility:visible}", "svg.embeddedIcon .radioButton.selected .icon rect,svg.embeddedIcon .toggleButton.selected .icon rect{fill:#e4f0f6}svg.embeddedIcon .button:hover .icon rect{stroke:#000;stroke-width:1px}svg.embeddedIcon .toggleButton.selected:hover .icon rect{fill:#c0d8f0;stroke:#000;stroke-width:1px}svg.embeddedIcon .button .glyph,svg.embeddedIcon .radioButton.selected .glyph,svg.embeddedIcon .toggleButton.selected .glyph{fill:#5b99d2}svg.embeddedIcon .icon.radioButton:hover:not(.selected) rect,svg.embeddedIcon .icon.toggleButton:hover rect{fill:#e4f0f6;stroke:#000;stroke-width:1px}svg.embeddedIcon .radioButton .glyph,svg.embeddedIcon .toggleButton .glyph{fill:#bbb}svg.embeddedIcon .radioButton:hover:not(.selected) .glyph,svg.embeddedIcon .toggleButton:hover:not(.selected) .glyph{fill:#5b99d2}.dark .radioButton.selected svg.embeddedIcon .icon rect,.dark .toggleButton.selected svg.embeddedIcon .icon rect{fill:#353e45}.dark .button:hover svg.embeddedIcon .icon rect{stroke:#fff;stroke-width:1px}.dark .toggleButton.selected:hover svg.embeddedIcon .icon rect{fill:#444d54;stroke:#fff;stroke-width:1px}.dark .button svg.embeddedIcon .glyph,.dark .radioButton.selected svg.embeddedIcon .glyph,.dark .toggleButton.selected svg.embeddedIcon .glyph{fill:#5b99d2}.dark .radioButton:hover:not(.selected) svg.embeddedIcon .icon rect,.dark .toggleButton:hover svg.embeddedIcon .icon rect{fill:#353e45;stroke:#fff;stroke-width:1px}.dark .radioButton svg.embeddedIcon .glyph,.dark .toggleButton svg.embeddedIcon .glyph{fill:#bbb}.dark .radioButton:hover:not(.selected) svg.embeddedIcon .glyph,.dark .toggleButton:hover:not(.selected) svg.embeddedIcon .glyph{fill:#5b99d2}"]
                },] },
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return [
        { type: IconService },
        { type: LogService }
    ]; };
    IconComponent.propDecorators = {
        iconId: [{ type: Input }],
        iconSize: [{ type: Input }],
        toolTip: [{ type: Input }],
        classes: [{ type: Input }]
    };
    return IconComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var UICONTEXT = '/onos/ui/';
/** @type {?} */
var RSSUFFIX = UICONTEXT + 'rs/';
/** @type {?} */
var WSSUFFIX = UICONTEXT + 'websock/';
/**
 * ONOS GUI -- Remote -- General Purpose URL Functions
 */
var UrlFnService = /** @class */ (function () {
    function UrlFnService(log, w) {
        this.log = log;
        this.w = w;
        this.log.debug('UrlFnService constructed');
    }
    /**
     * @param {?} protocol
     * @return {?}
     */
    UrlFnService.prototype.matchSecure = /**
     * @param {?} protocol
     * @return {?}
     */
    function (protocol) {
        /** @type {?} */
        var p = this.w.location.protocol;
        /** @type {?} */
        var secure = (p === 'https' || p === 'wss');
        return secure ? protocol + 's' : protocol;
    };
    /* A little bit of funky here. It is possible that ONOS sits
     * behind a proxy and has an app prefix, e.g.
     *      http://host:port/my/app/onos/ui...
     * This bit of regex grabs everything after the host:port and
     * before the UICONTEXT (/onos/ui/) and uses that as an app
     * prefix by inserting it back into the WS URL.
     * If no prefix, then no insert.
     */
    /* A little bit of funky here. It is possible that ONOS sits
         * behind a proxy and has an app prefix, e.g.
         *      http://host:port/my/app/onos/ui...
         * This bit of regex grabs everything after the host:port and
         * before the UICONTEXT (/onos/ui/) and uses that as an app
         * prefix by inserting it back into the WS URL.
         * If no prefix, then no insert.
         */
    /**
     * @param {?} protocol
     * @param {?=} port
     * @param {?=} host
     * @return {?}
     */
    UrlFnService.prototype.urlBase = /* A little bit of funky here. It is possible that ONOS sits
         * behind a proxy and has an app prefix, e.g.
         *      http://host:port/my/app/onos/ui...
         * This bit of regex grabs everything after the host:port and
         * before the UICONTEXT (/onos/ui/) and uses that as an app
         * prefix by inserting it back into the WS URL.
         * If no prefix, then no insert.
         */
    /**
     * @param {?} protocol
     * @param {?=} port
     * @param {?=} host
     * @return {?}
     */
    function (protocol, port, host) {
        if (port === void 0) { port = ''; }
        if (host === void 0) { host = ''; }
        /** @type {?} */
        var match = this.w.location.href.match('.*//[^/]+/(.+)' + UICONTEXT);
        /** @type {?} */
        var appPrefix = match ? '/' + match[1] : '';
        return this.matchSecure(protocol) +
            '://' +
            (host === '' ? this.w.location.hostname : host) +
            ':' +
            (port === '' ? this.w.location.port : port) +
            appPrefix;
    };
    /**
     * @param {?} suffix
     * @return {?}
     */
    UrlFnService.prototype.httpPrefix = /**
     * @param {?} suffix
     * @return {?}
     */
    function (suffix) {
        return this.urlBase('http') + suffix;
    };
    /**
     * @param {?} suffix
     * @param {?} wsport
     * @param {?} host
     * @return {?}
     */
    UrlFnService.prototype.wsPrefix = /**
     * @param {?} suffix
     * @param {?} wsport
     * @param {?} host
     * @return {?}
     */
    function (suffix, wsport, host) {
        return this.urlBase('ws', wsport, host) + suffix;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    UrlFnService.prototype.rsUrl = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.httpPrefix(RSSUFFIX) + path;
    };
    /**
     * @param {?} path
     * @param {?=} wsport
     * @param {?=} host
     * @return {?}
     */
    UrlFnService.prototype.wsUrl = /**
     * @param {?} path
     * @param {?=} wsport
     * @param {?=} host
     * @return {?}
     */
    function (path, wsport, host) {
        return this.wsPrefix(WSSUFFIX, wsport, host) + path;
    };
    UrlFnService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    UrlFnService.ctorParameters = function () { return [
        { type: LogService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ UrlFnService.ngInjectableDef = defineInjectable({ factory: function UrlFnService_Factory() { return new UrlFnService(inject(LogService), inject("Window")); }, token: UrlFnService, providedIn: "root" });
    return UrlFnService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Remote -- Web Socket Wrapper Service
 *
 * This service provided specifically so that it can be mocked in unit tests.
 */
var WSock = /** @class */ (function () {
    function WSock(log) {
        this.log = log;
        this.log.debug('WSockService constructed');
    }
    /**
     * @param {?} url
     * @return {?}
     */
    WSock.prototype.newWebSocket = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var ws = null;
        try {
            ws = new WebSocket(url);
        }
        catch (e) {
            this.log.error('Unable to create web socket:', e);
        }
        return ws;
    };
    WSock.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    WSock.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    /** @nocollapse */ WSock.ngInjectableDef = defineInjectable({ factory: function WSock_Factory() { return new WSock(inject(LogService)); }, token: WSock, providedIn: "root" });
    return WSock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Remote -- Web Socket Service
 *
 * To see debug messages add ?debug=txrx to the URL
 */
var WebSocketService = /** @class */ (function () {
    function WebSocketService(fs, gs, log, ufs, wsock, window) {
        var _this = this;
        this.fs = fs;
        this.gs = gs;
        this.log = log;
        this.ufs = ufs;
        this.wsock = wsock;
        this.window = window;
        // web socket options
        this.ws = null; // web socket reference
        // web socket reference
        this.wsUp = false; // web socket is good to go
        // web socket is good to go
        // A map of event handler bindings - names and functions (that accept data and return void)
        this.handlers = new Map([]);
        this.pendingEvents = []; // events TX'd while socket not up
        // web socket URL
        this.clusterNodes = []; // ONOS instances data for failover
        // ONOS instances data for failover
        this.clusterIndex = -1; // the instance to which we are connected
        // the instance to which we are connected
        this.glyphs = [];
        this.connectRetries = 0; // limit our attempts at reconnecting
        // limit our attempts at reconnecting
        // A map of registered Callbacks for websocket open()
        this.openListeners = new Map([]);
        this.nextListenerId = 1; // internal ID for open listeners
        // internal ID for open listeners
        this.loggedInUser = null; // name of logged-in user
        this.log.debug(window.location.hostname);
        // Bind the boot strap event by default
        this.bindHandlers(new Map([
            ['bootstrap', function (data) { return _this.bootstrap(data); }],
            ['error', function (data) { return _this.error(data); }]
        ]));
        this.log.debug('WebSocketService constructed');
    }
    /**
     * built-in handler for the 'boostrap' event
     */
    // The veil component delegate
    /**
     * built-in handler for the 'boostrap' event
     * @param {?} data
     * @return {?}
     */
    WebSocketService.prototype.bootstrap = 
    // The veil component delegate
    /**
     * built-in handler for the 'boostrap' event
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.loggedInUser = data.user;
        this.log.info('Websocket connection bootstraped', data);
        this.clusterNodes = data.clusterNodes;
        this.clusterNodes.forEach(function (d, i) {
            if (d.m_uiAttached) {
                _this.clusterIndex = i;
                _this.log.info('Connected to cluster node ' + d.ip);
                // TODO: add connect info to masthead somewhere
            }
        });
        this.glyphs = data.glyphs;
        /** @type {?} */
        var glyphsMap = new Map([]);
        this.glyphs.forEach(function (d) {
            glyphsMap.set('_' + d.id, d.viewbox);
            glyphsMap.set(d.id, d.path);
            _this.gs.registerGlyphs(glyphsMap);
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    WebSocketService.prototype.error = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var m = data.message || 'error from server';
        this.log.error(m, data);
        // Unrecoverable error - throw up the veil...
        if (this.vcd) {
            this.vcd.show([
                'Oops!',
                'Server reports error...',
                m,
            ]);
        }
    };
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     */
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     * @return {?}
     */
    WebSocketService.prototype.handleOpen = 
    // ==========================
    // === Web socket callbacks
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     * @return {?}
     */
    function () {
        var _this = this;
        this.log.info('Web socket open - ', this.url);
        // Hide the veil
        if (this.vcd) {
            this.vcd.hide();
        }
        if (this.fs.debugOn('txrx')) {
            this.log.debug('Sending ' + this.pendingEvents.length + ' pending event(s)...');
        }
        this.pendingEvents.forEach(function (ev) {
            _this.send(ev);
        });
        this.pendingEvents = [];
        this.connectRetries = 0;
        this.wsUp = true;
        this.informListeners(this.host, this.url);
    };
    /**
     * Function called when WebSocket send a message
     */
    /**
     * Function called when WebSocket send a message
     * @param {?} msgEvent
     * @return {?}
     */
    WebSocketService.prototype.handleMessage = /**
     * Function called when WebSocket send a message
     * @param {?} msgEvent
     * @return {?}
     */
    function (msgEvent) {
        /** @type {?} */
        var ev;
        /** @type {?} */
        var h;
        try {
            ev = JSON.parse(msgEvent.data);
        }
        catch (e) {
            this.log.error('Message.data is not valid JSON', msgEvent.data, e);
            return null;
        }
        if (this.fs.debugOn('txrx')) {
            this.log.debug(' << *Rx* ', ev.event, ev.payload);
        }
        h = this.handlers.get(ev.event);
        if (h) {
            try {
                h(ev.payload);
            }
            catch (e) {
                this.log.error('Problem handling event:', ev, e);
                return null;
            }
        }
        else {
            this.log.warn('Unhandled event:', ev);
        }
    };
    /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     */
    /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     * @return {?}
     */
    WebSocketService.prototype.handleClose = /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     * @return {?}
     */
    function () {
        this.log.warn('Web socket closed');
        if (this.lcd) {
            this.lcd.stop();
        }
        this.wsUp = false;
        /** @type {?} */
        var gsucc;
        if (gsucc = this.findGuiSuccessor()) {
            this.url = this.createWebSocket(this.webSockOpts, gsucc);
        }
        else {
            // If no controllers left to contact, show the Veil...
            if (this.vcd) {
                this.vcd.show([
                    'Oops!',
                    'Web-socket connection to server closed...',
                    'Try refreshing the page.',
                ]);
            }
        }
    };
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     */
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     * @return {?}
     */
    WebSocketService.prototype.findGuiSuccessor = 
    // ==============================
    // === Private Helper Functions
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ncn = this.clusterNodes.length;
        /** @type {?} */
        var ip;
        /** @type {?} */
        var node;
        while (this.connectRetries < ncn && !ip) {
            this.connectRetries++;
            this.clusterIndex = (this.clusterIndex + 1) % ncn;
            node = this.clusterNodes[this.clusterIndex];
            ip = node && node.ip;
        }
        return ip;
    };
    /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     */
    /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    WebSocketService.prototype.informListeners = /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     * @param {?} host
     * @param {?} url
     * @return {?}
     */
    function (host, url) {
        var e_1, _a;
        try {
            for (var _b = __values(this.openListeners.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], cb = _d[1];
                cb.cb(host, url);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    WebSocketService.prototype.send = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        if (this.fs.debugOn('txrx')) {
            this.log.debug(' *Tx* >> ', ev.event, ev.payload);
        }
        this.ws.send(JSON.stringify(ev));
    };
    /**
     * Check if there are no WSS event handlers left
     */
    /**
     * Check if there are no WSS event handlers left
     * @param {?} handlers
     * @param {?} caller
     * @return {?}
     */
    WebSocketService.prototype.noHandlersWarn = /**
     * Check if there are no WSS event handlers left
     * @param {?} handlers
     * @param {?} caller
     * @return {?}
     */
    function (handlers, caller) {
        if (!handlers || handlers.size === 0) {
            this.log.warn('WSS.' + caller + '(): no event handlers');
            return true;
        }
        return false;
    };
    /* ===================
     * === API Functions
     */
    /**
     * Required for unit tests to set to known state
     */
    /* ===================
         * === API Functions
         */
    /**
     * Required for unit tests to set to known state
     * @return {?}
     */
    WebSocketService.prototype.resetState = /* ===================
         * === API Functions
         */
    /**
     * Required for unit tests to set to known state
     * @return {?}
     */
    function () {
        this.webSockOpts = undefined;
        this.ws = null;
        this.wsUp = false;
        this.host = undefined;
        this.url = undefined;
        this.pendingEvents = [];
        this.handlers.clear();
        this.clusterNodes = [];
        this.clusterIndex = -1;
        this.glyphs = [];
        this.connectRetries = 0;
        this.openListeners.clear();
        this.nextListenerId = 1;
    };
    /*
     * Currently supported opts:
     *  wsport: web socket port (other than default 8181)
     *  host:   if defined, is the host address to use
     */
    /*
         * Currently supported opts:
         *  wsport: web socket port (other than default 8181)
         *  host:   if defined, is the host address to use
         */
    /**
     * @param {?=} opts
     * @param {?=} host
     * @return {?}
     */
    WebSocketService.prototype.createWebSocket = /*
         * Currently supported opts:
         *  wsport: web socket port (other than default 8181)
         *  host:   if defined, is the host address to use
         */
    /**
     * @param {?=} opts
     * @param {?=} host
     * @return {?}
     */
    function (opts, host) {
        var _this = this;
        this.webSockOpts = opts; // preserved for future calls
        this.host = host === undefined ? this.window.location.host : host;
        this.url = this.ufs.wsUrl('core', opts === undefined ? '' : opts['wsport'].toString(), host);
        this.log.debug('Attempting to open websocket to: ' + this.url);
        this.ws = this.wsock.newWebSocket(this.url);
        if (this.ws) {
            // fat arrow => syntax means that the 'this' context passed will
            // be of WebSocketService, not the WebSocket
            this.ws.onopen = (function () { return _this.handleOpen(); });
            this.ws.onmessage = (function (msgEvent) { return _this.handleMessage(msgEvent); });
            this.ws.onclose = (function () { return _this.handleClose(); });
            /** @type {?} */
            var authToken = this.window['onosAuth'];
            this.log.debug('Auth Token for opening WebSocket', authToken);
            this.sendEvent('authentication', { token: authToken });
        }
        // Note: Wsock logs an error if the new WebSocket call fails
        return this.url;
    };
    /**
     * Tell the WebSocket to close - this should call the handleClose() method
     */
    /**
     * Tell the WebSocket to close - this should call the handleClose() method
     * @return {?}
     */
    WebSocketService.prototype.closeWebSocket = /**
     * Tell the WebSocket to close - this should call the handleClose() method
     * @return {?}
     */
    function () {
        this.ws.close();
    };
    /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     */
    /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     * @param {?} handlerMap
     * @return {?}
     */
    WebSocketService.prototype.bindHandlers = /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     * @param {?} handlerMap
     * @return {?}
     */
    function (handlerMap) {
        var e_2, _a;
        /** @type {?} */
        var dups = [];
        if (this.noHandlersWarn(handlerMap, 'bindHandlers')) {
            return null;
        }
        try {
            for (var handlerMap_1 = __values(handlerMap), handlerMap_1_1 = handlerMap_1.next(); !handlerMap_1_1.done; handlerMap_1_1 = handlerMap_1.next()) {
                var _b = __read(handlerMap_1_1.value, 2), eventId = _b[0], api = _b[1];
                this.log.debug('Adding handler for ', eventId);
                /** @type {?} */
                var fn = this.fs.isF(api) || this.fs.isF(api[eventId]);
                if (!fn) {
                    this.log.warn(eventId + ' handler not a function');
                    return;
                }
                if (this.handlers.get(eventId)) {
                    dups.push(eventId);
                }
                else {
                    this.handlers.set(eventId, fn);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (handlerMap_1_1 && !handlerMap_1_1.done && (_a = handlerMap_1.return)) _a.call(handlerMap_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (dups.length) {
            this.log.warn('duplicate bindings ignored:', dups);
        }
    };
    /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     */
    /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     * @param {?} handlerIds
     * @return {?}
     */
    WebSocketService.prototype.unbindHandlers = /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     * @param {?} handlerIds
     * @return {?}
     */
    function (handlerIds) {
        var e_3, _a;
        if (handlerIds.length === 0) {
            this.log.warn('WSS.unbindHandlers(): no event handlers');
            return null;
        }
        try {
            for (var handlerIds_1 = __values(handlerIds), handlerIds_1_1 = handlerIds_1.next(); !handlerIds_1_1.done; handlerIds_1_1 = handlerIds_1.next()) {
                var eventId = handlerIds_1_1.value;
                this.handlers.delete(eventId);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (handlerIds_1_1 && !handlerIds_1_1.done && (_a = handlerIds_1.return)) _a.call(handlerIds_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @param {?} handlerId
     * @return {?}
     */
    WebSocketService.prototype.isHandling = /**
     * @param {?} handlerId
     * @return {?}
     */
    function (handlerId) {
        return this.handlers.get(handlerId) !== undefined;
    };
    /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     */
    /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     * @param {?} callback
     * @return {?}
     */
    WebSocketService.prototype.addOpenListener = /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        /** @type {?} */
        var id = this.nextListenerId++;
        /** @type {?} */
        var cb = this.fs.isF(callback);
        /** @type {?} */
        var o = (/** @type {?} */ ({ id: id, cb: cb }));
        if (cb) {
            this.openListeners.set(id, o);
        }
        else {
            this.log.error('WSS.addOpenListener(): callback not a function');
            o.error = 'No callback defined';
        }
        return o;
    };
    /**
     * Remove a listener of WebSocket opening
     */
    /**
     * Remove a listener of WebSocket opening
     * @param {?} lsnr
     * @return {?}
     */
    WebSocketService.prototype.removeOpenListener = /**
     * Remove a listener of WebSocket opening
     * @param {?} lsnr
     * @return {?}
     */
    function (lsnr) {
        /** @type {?} */
        var id = this.fs.isO(lsnr) && lsnr.id;
        /** @type {?} */
        var o;
        if (!id) {
            this.log.warn('WSS.removeOpenListener(): invalid listener', lsnr);
            return null;
        }
        o = this.openListeners[id];
        if (o) {
            this.openListeners.delete(id);
        }
    };
    /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     */
    /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     * @param {?} evType
     * @param {?} payload
     * @return {?}
     */
    WebSocketService.prototype.sendEvent = /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     * @param {?} evType
     * @param {?} payload
     * @return {?}
     */
    function (evType, payload) {
        /** @type {?} */
        var ev = (/** @type {?} */ ({
            event: evType,
            payload: payload
        }));
        if (this.wsUp) {
            this.send(ev);
        }
        else {
            this.pendingEvents.push(ev);
        }
    };
    /**
     * Binds the veil service as a delegate.
     */
    /**
     * Binds the veil service as a delegate.
     * @param {?} vd
     * @return {?}
     */
    WebSocketService.prototype.setVeilDelegate = /**
     * Binds the veil service as a delegate.
     * @param {?} vd
     * @return {?}
     */
    function (vd) {
        this.vcd = vd;
    };
    /**
     * Binds the loading service as a delegate
     */
    /**
     * Binds the loading service as a delegate
     * @param {?} ld
     * @return {?}
     */
    WebSocketService.prototype.setLoadingDelegate = /**
     * Binds the loading service as a delegate
     * @param {?} ld
     * @return {?}
     */
    function (ld) {
        // TODO - Investigate changing Loading Service to LoadingComponent
        this.log.debug('Loading delegate set', ld);
        this.lcd = ld;
    };
    /**
     * @return {?}
     */
    WebSocketService.prototype.isConnected = /**
     * @return {?}
     */
    function () {
        return this.wsUp;
    };
    WebSocketService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    WebSocketService.ctorParameters = function () { return [
        { type: FnService },
        { type: GlyphService },
        { type: LogService },
        { type: UrlFnService },
        { type: WSock },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ WebSocketService.ngInjectableDef = defineInjectable({ factory: function WebSocketService_Factory() { return new WebSocketService(inject(FnService), inject(GlyphService), inject(LogService), inject(UrlFnService), inject(WSock), inject("Window")); }, token: WebSocketService, providedIn: "root" });
    return WebSocketService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var BIRD = 'bird';
/**
 * ONOS GUI -- Layer -- Veil Component
 *
 * Provides a mechanism to display an overlaying div with information.
 * Used mainly for web socket connection interruption.
 *
 * It can be added to an component's template as follows:
 *     <onos-veil #veil></onos-veil>
 *     <p (click)="veil.show(['t1','t2','t3'])">Test Veil</p>
 */
var VeilComponent = /** @class */ (function () {
    function VeilComponent(fs, gs, log, sus, wss) {
        this.fs = fs;
        this.gs = gs;
        this.log = log;
        this.sus = sus;
        this.wss = wss;
        this.enabled = false;
        this.messages = [];
        /** @type {?} */
        var wSize = this.fs.windowSize();
        this.ww = wSize.width;
        this.wh = wSize.height;
        /** @type {?} */
        var shrink = this.wh * 0.3;
        this.birdDim = this.wh - shrink;
        /** @type {?} */
        var birdCenter = (this.ww - this.birdDim) / 2;
        this.trans = this.sus.translate([birdCenter, shrink / 2]);
        this.log.debug('VeilComponent with ' + BIRD + ' constructed');
    }
    /**
     * @return {?}
     */
    VeilComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    // msg should be an array of strings
    // msg should be an array of strings
    /**
     * @param {?} msgs
     * @return {?}
     */
    VeilComponent.prototype.show = 
    // msg should be an array of strings
    /**
     * @param {?} msgs
     * @return {?}
     */
    function (msgs) {
        this.messages = msgs;
        this.enabled = true;
        //        this.ks.enableKeys(false);
    };
    /**
     * @return {?}
     */
    VeilComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.veilStyle = 'display: none';
        //        this.ks.enableKeys(true);
    };
    VeilComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-veil',
                    template: "<!--\n~ Copyright 2018-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n\n<div id=\"veil\" *ngIf=\"enabled\">\n    <p *ngFor=\"let msg of messages\">{{ msg }}</p>\n    <svg [attr.width]=\"fs.windowSize().width\" [attr.height]=\"fs.windowSize().height\">\n        <use [attr.width]=\"birdDim\" [attr.height]=\"birdDim\" class=\"glyph\"\n             style=\"opacity: 0.2;\"\n             xlink:href = \"#bird\" [attr.transform]=\"trans\"/>\n\n    </svg>\n</div>\n",
                    styles: ["#veil{z-index:5000;display:block;position:absolute;top:0;left:0;padding:60px}#veil p{display:block;text-align:left;font-size:14pt;font-style:italic}", "#veil,.light{background-color:rgba(0,0,0,.75)}#veil,.dark{background-color:rgba(64,64,64,.75)}#veil p{color:#ddd}#veil svg .glyph{fill:#222}"]
                },] },
    ];
    /** @nocollapse */
    VeilComponent.ctorParameters = function () { return [
        { type: FnService },
        { type: GlyphService },
        { type: LogService },
        { type: SvgUtilService },
        { type: WebSocketService }
    ]; };
    return VeilComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Layer -- Flash Component
 *
 * Replaces Flash Service in old GUI.
 * Provides a mechanism to flash short informational messages to the screen
 * to alert the user of something, e.g. "Hosts visible" or "Hosts hidden".
 *
 * It can be used in a warning mode, where text will appear in red
 * The dwell time (milliseconds) can be controlled or the default is 1200ms
 *
 * To use add an element to the template like
 *   <onos-flash message="Hosts visible" dwell="2000" warning="true"></onos-flash>
 * This whole element can be disabled until needed with an ngIf, but if this is done
 * the animated fade-in and fade-out will not happen
 * There is also a (closed) event that tells you when the message is closed, or
 * fades-out
 */
var FlashComponent = /** @class */ (function () {
    function FlashComponent() {
        this.dwell = 1200; // milliseconds
        // milliseconds
        this.warning = false;
        this.closed = new EventEmitter();
        this.visible = false;
    }
    /**
     * Flash a message up for 1200ms then disappear again.
     * See animation parameter for the ease in and ease out params
     */
    /**
     * Flash a message up for 1200ms then disappear again.
     * See animation parameter for the ease in and ease out params
     * @param {?} changes
     * @return {?}
     */
    FlashComponent.prototype.ngOnChanges = /**
     * Flash a message up for 1200ms then disappear again.
     * See animation parameter for the ease in and ease out params
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['message'] && this.message && this.message !== '') {
            this.visible = true;
            setTimeout(function () {
                _this.visible = false;
                _this.closed.emit(false);
            }, this.dwell);
        }
    };
    /**
     * The message will flash up for 'dwell' milliseconds
     * If dwell is > 2000ms, then there will be a button that allows it to be dismissed now
     */
    /**
     * The message will flash up for 'dwell' milliseconds
     * If dwell is > 2000ms, then there will be a button that allows it to be dismissed now
     * @return {?}
     */
    FlashComponent.prototype.closeNow = /**
     * The message will flash up for 'dwell' milliseconds
     * If dwell is > 2000ms, then there will be a button that allows it to be dismissed now
     * @return {?}
     */
    function () {
        this.visible = false;
        this.closed.emit(false);
    };
    FlashComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-flash',
                    template: "<!--\n~ Copyright 2018-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n<div id=\"flash\" class=\"dialog\" [ngClass]=\"warning?'warning':''\" [@flashState]=\"visible\">\n    <div id=\"flashBox\" *ngIf=\"visible\">\n        <p id=\"flashText\">{{ message }}</p>\n        <div class=\"dialog-button\" *ngIf=\"dwell>1200\" (click)=\"closeNow()\">Dismiss</div>\n    </div>\n</div>",
                    styles: ["#flash{position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);z-index:1400}#flash.warning div#flashBox{border:2px solid #222;border-radius:10px;background:#fff;padding:10px}#flash div#flashBox{background:#ccc;border-radius:10px;padding:1px}#flash div#flashBox div.dialog-button{-webkit-transform:translateY(-32px);transform:translateY(-32px)}#flash.warning p#flashText{stroke:red;color:red;text-anchor:middle;alignment-baseline:middle;text-align:center;font-size:16pt;border-radius:10px;background:#fff;padding:10px}#flash p#flashText{stroke:none;color:#222;text-anchor:middle;alignment-baseline:middle;text-align:center;font-size:16pt;border-radius:10px;background:#ccc;padding:5px}", ".dialog h2{margin:0;word-wrap:break-word;display:inline-block;width:210px;vertical-align:middle}.dialog .dialog-button{display:inline-block;cursor:pointer;height:20px;padding:6px 8px 2px;margin:4px;float:right}", ".dialog .dialog-button{background-color:#518ecc;color:#fff}.dark .dialog .dialog-button{background-color:#345e85;color:#cccccd}"],
                    animations: [
                        trigger('flashState', [
                            state('false', style({
                                //                transform: 'translateY(-400%)',
                                opacity: '0.0',
                            })),
                            state('true', style({
                                //                transform: 'translateY(0%)',
                                opacity: '1.0',
                            })),
                            transition('0 => 1', animate('200ms ease-in')),
                            transition('1 => 0', animate('200ms ease-out'))
                        ])
                    ]
                },] },
    ];
    FlashComponent.propDecorators = {
        message: [{ type: Input }],
        dwell: [{ type: Input }],
        warning: [{ type: Input }],
        closed: [{ type: Output }]
    };
    return FlashComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Lion -- Localization Utilities
 */
var LionService = /** @class */ (function () {
    function LionService(log, wss) {
        var _this = this;
        this.log = log;
        this.wss = wss;
        this.ubercache = [];
        this.loadCbs = new Map([]); // A map of functions
        this.wss.bindHandlers(new Map([
            ['uberlion', function (data) { return _this.uberlion(data); }]
        ]));
        this.log.debug('LionService constructed');
    }
    /**
     * Handler for uberlion event from WSS
     */
    // A map of functions
    /**
     * Handler for uberlion event from WSS
     * @param {?} data
     * @return {?}
     */
    LionService.prototype.uberlion = 
    // A map of functions
    /**
     * Handler for uberlion event from WSS
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_1, _a;
        this.ubercache = data.lion;
        this.log.info('LION service: Locale... [' + data.locale + ']');
        this.log.info('LION service: Bundles installed...');
        for (var p in this.ubercache) {
            if (this.ubercache[p]) {
                this.log.info('            :=> ', p);
            }
        }
        try {
            // If any component had registered a callback, call it now
            // that LION is loaded
            for (var _b = __values(this.loadCbs.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cbname = _c.value;
                this.log.debug('Updating', cbname, 'with LION');
                this.loadCbs.get(cbname)();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.log.debug('LION service: uber-lion bundle received:', data);
    };
    /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     */
    /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     * @param {?} bundleId
     * @return {?}
     */
    LionService.prototype.bundle = /**
     * Returns a lion bundle (function) for the given bundle ID (string)
     * returns a function that takes a string and returns a string
     * @param {?} bundleId
     * @return {?}
     */
    function (bundleId) {
        /** @type {?} */
        var bundleObj = this.ubercache[bundleId];
        if (!bundleObj) {
            this.log.warn('No lion bundle registered:', bundleId);
            bundleObj = {};
        }
        return function (key) {
            return bundleObj[key] || '%' + key + '%';
        };
    };
    LionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    LionService.ctorParameters = function () { return [
        { type: LogService },
        { type: WebSocketService }
    ]; };
    /** @nocollapse */ LionService.ngInjectableDef = defineInjectable({ factory: function LionService_Factory() { return new LionService(inject(LogService), inject(WebSocketService)); }, token: LionService, providedIn: "root" });
    return LionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Layer -- Confirm Component
 *
 * Replaces Flash Service in old GUI.
 * Provides a mechanism to present a confirm dialog to the screen
 *
 * To use add an element to the template like
 *   <onos-confirm message="Performing something dangerous. Would you like to proceed"></onos-flash>
 *
 * An event is raised with either OK or Cancel
 */
var ConfirmComponent = /** @class */ (function () {
    function ConfirmComponent(log, lion) {
        this.log = log;
        this.lion = lion;
        this.chosen = new EventEmitter();
        this.log.debug('ConfirmComponent constructed');
        this.doLion();
    }
    /**
     * When OK or Cancel is pressed, send an event to parent with choice
     */
    /**
     * When OK or Cancel is pressed, send an event to parent with choice
     * @param {?} chosen
     * @return {?}
     */
    ConfirmComponent.prototype.choice = /**
     * When OK or Cancel is pressed, send an event to parent with choice
     * @param {?} chosen
     * @return {?}
     */
    function (chosen) {
        this.chosen.emit(chosen);
    };
    /**
     * Read the LION bundle for App to get confirm dialouge header
     */
    /**
     * Read the LION bundle for App to get confirm dialouge header
     * @return {?}
     */
    ConfirmComponent.prototype.doLion = /**
     * Read the LION bundle for App to get confirm dialouge header
     * @return {?}
     */
    function () {
        this.lionFn = this.lion.bundle('core.view.App');
    };
    ConfirmComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-confirm',
                    template: "<!--\n~ Copyright 2018-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n<div id=\"app-dialog\" class=\"floatpanel dialog\" [@confirmDlgState]=\"message!==''\">\n    <h3> {{ title }} </h3>\n    <p>{{ message }}</p>\n    <p *ngIf=\"warning\" class=\"warning strong\">{{ warning }}</p>\n    <div tabindex=\"10\" class=\"dialog-button\" (click)=\"choice(true)\">OK</div>\n    <div tabindex=\"11\" class=\"dialog-button\" (click)=\"choice(false)\">Cancel</div>\n</div>\n",
                    styles: ["#app-dialog{top:140px;padding:12px}#app-dialog h3{display:inline-block;font-weight:700;font-size:18pt}#app-dialog p{font-size:12pt}#app-dialog p.strong{font-weight:700;padding:8px;text-align:center}", "#app-dialog.floatpanel.dialog{background-color:#fff}#app-dialog p.strong{color:#fff;background-color:#ce5b58}", ".dialog h2{margin:0;word-wrap:break-word;display:inline-block;width:210px;vertical-align:middle}.dialog .dialog-button{display:inline-block;cursor:pointer;height:20px;padding:6px 8px 2px;margin:4px;float:right}", ".dialog .dialog-button{background-color:#518ecc;color:#fff}.dark .dialog .dialog-button{background-color:#345e85;color:#cccccd}", ".floatpanel{position:absolute;z-index:100;display:block;top:160px;width:544px;right:-550px;opacity:100;padding:2px;font-size:10pt;background-color:#fff;color:#3c3a3a;border:1px solid #c7c7c0}.floatpanel hr{border:1px solid #c7c7c0}.floatpanel .bottom tr:nth-child(odd){background-color:#f4f4f4}.floatpanel .bottom tr:nth-child(even){background-color:#fbfbfb}.floatpanel.dialog{top:180px}html[data-platform=iPad] .floatpanel{top:80px}", ".light .floatpanel{background-color:#fff;color:#3c3a3a;border:1px solid #c7c7c0}.light .floatpanel hr{border:1px solid #c7c7c0}.light .floatpanel .bottom tr:nth-child(odd){background-color:#f4f4f4}.light .floatpanel .bottom tr:nth-child(even){background-color:#fbfbfb}.dark .floatpanel{background-color:#282528;color:#888c8c;border:1px solid #364144}.dark .floatpanel th{background-color:#242424}.dark .floatpanel h2{color:#ddd}.dark .floatpanel hr{border:1px solid #30303a}.dark .floatpanel .bottom tr:nth-child(odd){background-color:#333}.dark .floatpanel .bottom tr:nth-child(even){background-color:#3a3a3a}"],
                    animations: [
                        trigger('confirmDlgState', [
                            state('true', style({
                                transform: 'translateX(-100%)',
                                opacity: '100'
                            })),
                            state('false', style({
                                transform: 'translateX(0%)',
                                opacity: '0'
                            })),
                            transition('0 => 1', animate('100ms ease-in')),
                            transition('1 => 0', animate('100ms ease-out'))
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    ConfirmComponent.ctorParameters = function () { return [
        { type: LogService },
        { type: LionService }
    ]; };
    ConfirmComponent.propDecorators = {
        message: [{ type: Input }],
        warning: [{ type: Input }],
        title: [{ type: Input }],
        chosen: [{ type: Output }]
    };
    return ConfirmComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Navigation Service
 */
var NavService = /** @class */ (function () {
    function NavService(_fn_, log, httpClient) {
        this._fn_ = _fn_;
        this.log = log;
        this.httpClient = httpClient;
        this.showNav = false;
        this.uiPlatformViews = new Array();
        this.uiNetworkViews = new Array();
        this.uiOtherViews = new Array();
        this.uiHiddenViews = new Array();
        this.log.debug('NavService constructed');
    }
    /**
     * @return {?}
     */
    NavService.prototype.hideNav = /**
     * @return {?}
     */
    function () {
        this.showNav = false;
        this.log.debug('Hiding Nav menu');
    };
    /**
     * @return {?}
     */
    NavService.prototype.toggleNav = /**
     * @return {?}
     */
    function () {
        this.showNav = !this.showNav;
        if (this.showNav) {
            this.log.debug('Showing Nav menu');
        }
        else {
            this.log.debug('Hiding Nav menu');
        }
    };
    /**
     * @return {?}
     */
    NavService.prototype.getUiViews = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.uiPlatformViews = new Array();
        this.uiNetworkViews = new Array();
        this.uiOtherViews = new Array();
        this.uiHiddenViews = new Array();
        this.httpClient.get('rs/nav/uiextensions').subscribe(function (v) {
            v.forEach(function (uiView) {
                if (uiView.cat === 'PLATFORM') {
                    _this.uiPlatformViews.push(uiView);
                }
                else if (uiView.cat === 'NETWORK') {
                    if (uiView.id !== 'topo') {
                        _this.uiNetworkViews.push(uiView);
                    }
                    else {
                        _this.uiNetworkViews.push((/** @type {?} */ ({
                            id: 'topo2',
                            icon: 'nav_topo',
                            cat: 'NETWORK',
                            label: uiView.label
                        })));
                    }
                }
                else if (uiView.cat === 'HIDDEN') {
                    _this.uiHiddenViews.push(uiView);
                }
                else {
                    _this.uiOtherViews.push(uiView);
                }
            });
        });
    };
    NavService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    NavService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ NavService.ngInjectableDef = defineInjectable({ factory: function NavService_Factory() { return new NavService(inject(FnService), inject(LogService), inject(HttpClient)); }, token: NavService, providedIn: "root" });
    return NavService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Masthead Component
 */
var MastComponent = /** @class */ (function () {
    function MastComponent(lion, log, ns, wss, router, zone, window) {
        this.lion = lion;
        this.log = log;
        this.ns = ns;
        this.wss = wss;
        this.router = router;
        this.zone = zone;
        this.window = window;
        // Function
        this.viewMap = new Map([]); // A map of app names
        // A map of app names
        this.confirmMessage = '';
        this.strongWarning = '';
        this.viewMap.set('apps', 'https://wiki.onosproject.org/display/ONOS/GUI+Application+View');
        this.viewMap.set('device', 'https://wiki.onosproject.org/display/ONOS/GUI+Device+View');
        this.viewMap.set('', 'https://wiki.onosproject.org/display/ONOS/The+ONOS+Web+GUI');
    }
    /**
     * @return {?}
     */
    MastComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lion.ubercache.length === 0) {
            this.lionFn = this.dummyLion;
            this.lion.loadCbs.set('mast', function () { return _this.doLion(); });
            this.log.debug('LION not available when MastComponent initialized');
        }
        else {
            this.doLion();
        }
        this.wss.bindHandlers(new Map([
            ['guiRemoved', function (data) { return _this.triggerRefresh(data, false); }],
            ['guiAdded', function (data) { return _this.triggerRefresh(data, true); }]
        ]));
        this.log.debug('MastComponent initialized');
    };
    /**
     * Nav component should never be closed, but in case it does, it's
     * safer to tidy up after itself
     */
    /**
     * Nav component should never be closed, but in case it does, it's
     * safer to tidy up after itself
     * @return {?}
     */
    MastComponent.prototype.ngOnDestroy = /**
     * Nav component should never be closed, but in case it does, it's
     * safer to tidy up after itself
     * @return {?}
     */
    function () {
        this.lion.loadCbs.delete('mast');
    };
    /**
    * Read the LION bundle for App and set up the lionFn
    */
    /**
     * Read the LION bundle for App and set up the lionFn
     * @return {?}
     */
    MastComponent.prototype.doLion = /**
     * Read the LION bundle for App and set up the lionFn
     * @return {?}
     */
    function () {
        this.lionFn = this.lion.bundle('core.fw.Mast');
        if (this.username === undefined) {
            this.username = this.lionFn('unknown_user');
        }
    };
    /**
    * A dummy implementation of the lionFn until the response is received and the LION
    * bundle is received from the WebSocket
    */
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    MastComponent.prototype.dummyLion = /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return '%' + key + '%';
    };
    /**
     * @return {?}
     */
    MastComponent.prototype.directTo = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var curId = this.window.location.pathname.replace('/', '');
        /** @type {?} */
        var helpUrl = this.viewMap.get(curId);
        if (helpUrl === undefined) {
            helpUrl = this.viewMap.get('');
            this.log.warn('No help file linked for view:', curId);
        }
        this.window.open(helpUrl);
    };
    /**
     * @param {?} data
     * @param {?} added
     * @return {?}
     */
    MastComponent.prototype.triggerRefresh = /**
     * @param {?} data
     * @param {?} added
     * @return {?}
     */
    function (data, added) {
        this.confirmMessage = this.lionFn(added ? 'uicomp_added' : 'uicomp_removed');
        this.log.debug('Refresh has been triggered - item', added ? 'added' : 'removed', ' - ', data);
    };
    /**
     * Callback when the Confirm dialog is shown and a choice is made
     */
    /**
     * Callback when the Confirm dialog is shown and a choice is made
     * @param {?} choice
     * @return {?}
     */
    MastComponent.prototype.dOk = /**
     * Callback when the Confirm dialog is shown and a choice is made
     * @param {?} choice
     * @return {?}
     */
    function (choice) {
        if (choice) {
            this.ns.getUiViews();
            this.router.navigate(['/']);
            this.zone.runOutsideAngular(function () {
                location.reload();
            });
            this.log.debug('Refresh confirmed'); // Will not be printed if page reloads
        }
        else {
            this.log.debug('Refresh cancelled');
        }
        this.confirmMessage = '';
        this.strongWarning = '';
    };
    MastComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-mast',
                    template: "<!--\n~ Copyright 2018-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n<div id=\"mast-top-block\"></div>\n<!-- The mast-top-block is an inline display element that pushes any\n  subsequent elements down the page. It has a height of 48px\n     The mast block overlays the mast-top-block. It is is positioned\n     absolutely so that the nav component can slide in behind it when\n     not shown -->\n<div id=\"mast\" align=\"left\">\n    <span class=\"nav-menu-button clickable\" (click)=\"ns.toggleNav()\">\n        <img src=\"data/img/nav-menu-mojo.png\"/>\n    </span>\n    <img class=\"logo\" src=\"data/img/masthead-logo-mojo.png\">\n    <onos-confirm title=\"{{ lionFn('ui_ok_to_update') }}\" message=\"{{ confirmMessage }}\" warning=\"{{ strongWarning }}\" (chosen)=\"dOk($event)\"></onos-confirm>\n    <div id=\"mast-right\">\n        <nav>\n            <div class=\"dropdown-parent\">\n                <a class=\"clickable user-menu__name\">{{ username }} <i class=\"dropdown-icon\"></i></a>\n                <div class=\"dropdown\">\n                    <a href=\"rs/logout\"> {{ lionFn('logout') }} </a>\n                </div>\n            </div>\n            <div class=\"ctrl-btns\">\n                <div class=\"active clickable icon\" (click)=\"directTo()\">\n                    <onos-icon iconId=\"query\" iconSize=\"32\" toolTip=\"{{ lionFn('tt_help') }}\"></onos-icon>\n                </div>\n            </div>\n        </nav>\n\n    </div>\n</div>\n",
                    styles: ["#mast-top-block{display:block;z-index:-1;height:48px;width:100%}#mast{position:absolute;width:100%;top:0;height:48px;padding:0;z-index:10000}#mast a:hover{text-decoration:none}html[data-platform=iPad] #mast{padding-top:16px}#mast .nav-menu-button{display:inline-block;vertical-align:middle;text-align:center;line-height:48px;padding:0 12px;cursor:pointer;cursor:hand;font-size:0}#mast .nav-menu-button img{width:25px;vertical-align:middle}#mast .logo{height:47px;width:511px;vertical-align:bottom}#mast-right{display:inline-block;float:right;position:relative;top:0;padding-right:15px;line-height:48px}#mast-right div.ctrl-btns{float:right}#mast-right div.icon{box-sizing:border-box;position:relative;height:48px;width:48px;padding:9px}#mast .dropdown-parent{position:relative;float:right}#mast .dropdown-parent i.dropdown-icon{display:inline-block;height:7px;width:9px;margin-left:10px;background:url(data/img/dropdown-icon.png) no-repeat}#mast .dropdown{position:absolute;top:40px;right:-8px;display:none;min-width:100px;line-height:16px;font-size:12pt;z-index:1000}#mast .dropdown a{text-decoration:none;font-size:12px;display:block;padding:8px 16px 6px 12px}#mast .dropdown-parent:hover .dropdown{display:block}#mast .dropdown-parent:hover i.dropdown-icon{background-position-x:-14px}html[data-platform=iPad] #mast .dropdown{top:57px}", "#mast{background-color:#231f20}#mast .nav-menu-button:hover{background-color:#888}#mast nav,#mast-right a{color:#009fdb}#mast .dropdown{background-color:#231f20;border:1px solid #ddd}#mast .dropdown a{color:#009fdb;border-bottom:1px solid #444}#mast .dropdown a:hover{color:#fff}"]
                },] },
    ];
    /** @nocollapse */
    MastComponent.ctorParameters = function () { return [
        { type: LionService },
        { type: LogService },
        { type: NavService },
        { type: WebSocketService },
        { type: Router },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    MastComponent.propDecorators = {
        username: [{ type: Input }]
    };
    return MastComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Only return the tabledata that matches filtering with some queries
 *
 * Note: the pipe is marked pure here as we need to filter on the
 * content of the filter object (it's not a primitive type)
 */
var TableFilterPipe = /** @class */ (function () {
    function TableFilterPipe() {
    }
    /**
     * From an array of table items just return those that match the filter
     */
    /**
     * From an array of table items just return those that match the filter
     * @param {?} items
     * @param {?} tableDataFilter
     * @return {?}
     */
    TableFilterPipe.prototype.transform = /**
     * From an array of table items just return those that match the filter
     * @param {?} items
     * @param {?} tableDataFilter
     * @return {?}
     */
    function (items, tableDataFilter) {
        if (!items) {
            return [];
        }
        if (!tableDataFilter.queryStr) {
            return items;
        }
        /** @type {?} */
        var queryStr = tableDataFilter.queryStr.toLowerCase();
        return items.filter(function (it) {
            if (tableDataFilter.queryBy === '$') {
                /** @type {?} */
                var t1 = Object.values(it);
                /** @type {?} */
                var t2 = Object.values(it).filter(function (value) {
                    return ((/** @type {?} */ (value))).toLowerCase().includes(queryStr);
                });
                return Object.values(it).filter(function (value) {
                    return ((/** @type {?} */ (value))).toLowerCase().includes(queryStr);
                }).length > 0;
            }
            else {
                return it[tableDataFilter.queryBy].toLowerCase().includes(queryStr);
            }
        });
    };
    TableFilterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'filter',
                    pure: false
                },] },
    ];
    return TableFilterPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var PADMOBILE = 16;
/**
 * ONOS GUI -- Masthead Service
 */
var MastService = /** @class */ (function () {
    function MastService(fs, log) {
        this.fs = fs;
        this.log = log;
        this.mastHeight = 48;
        if (this.fs.isMobile()) {
            this.mastHeight += PADMOBILE;
        }
        this.log.debug('MastService constructed');
    }
    MastService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    MastService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService }
    ]; };
    /** @nocollapse */ MastService.ngInjectableDef = defineInjectable({ factory: function MastService_Factory() { return new MastService(inject(FnService), inject(LogService)); }, token: MastService, providedIn: "root" });
    return MastService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Widget -- Table Resize Directive
 */
var TableResizeDirective = /** @class */ (function () {
    function TableResizeDirective(fs, log, mast, w) {
        this.fs = fs;
        this.log = log;
        this.mast = mast;
        this.w = w;
        this.pdg = 22;
        log.info('TableResizeDirective constructed');
    }
    /**
     * @return {?}
     */
    TableResizeDirective.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.tables = {
            thead: select('div.table-header').select('table'),
            tbody: select('div.table-body').select('table')
        };
        this.windowSize(this.tables);
    };
    /**
     * @param {?} tables
     * @return {?}
     */
    TableResizeDirective.prototype.windowSize = /**
     * @param {?} tables
     * @return {?}
     */
    function (tables) {
        /** @type {?} */
        var wsz = this.fs.windowSize(0, 30);
        this.adjustTable(tables, wsz.width, wsz.height);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableResizeDirective.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event$$1) {
        this.windowSize(this.tables);
        return {
            h: this.w.innerHeight,
            w: this.w.innerWidth
        };
    };
    /**
     * @param {?} tables
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    TableResizeDirective.prototype.adjustTable = /**
     * @param {?} tables
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (tables, width, height) {
        this._width(tables.thead, width + 'px');
        this._width(tables.tbody, width + 'px');
        this.setHeight(tables.thead, select('div.table-body'), height);
    };
    /**
     * @param {?} elem
     * @param {?} width
     * @return {?}
     */
    TableResizeDirective.prototype._width = /**
     * @param {?} elem
     * @param {?} width
     * @return {?}
     */
    function (elem, width) {
        elem.style('width', width);
    };
    /**
     * @param {?} thead
     * @param {?} body
     * @param {?} height
     * @return {?}
     */
    TableResizeDirective.prototype.setHeight = /**
     * @param {?} thead
     * @param {?} body
     * @param {?} height
     * @return {?}
     */
    function (thead, body, height) {
        /** @type {?} */
        var h = height - (this.mast.mastHeight +
            this.fs.noPxStyle(select('.tabular-header'), 'height') +
            this.fs.noPxStyle(thead, 'height') + this.pdg);
        body.style('height', h + 'px');
    };
    TableResizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[onosTableResize]',
                },] },
    ];
    /** @nocollapse */
    TableResizeDirective.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: MastService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    TableResizeDirective.propDecorators = {
        onResize: [{ type: HostListener, args: ['window:resize', ['$event.target'],] }]
    };
    return TableResizeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {string} */
var KeysToken = {
    KEYEV: 'keyev',
};
/**
 * ONOS GUI -- Keys Service Module.
 */
var KeysService = /** @class */ (function () {
    function KeysService(log, fs, ls, ns) {
        this.log = log;
        this.fs = fs;
        this.ls = ls;
        this.ns = ns;
        this.enabled = true;
        this.globalEnabled = true;
        this.keyHandler = (/** @type {?} */ ({
            globalKeys: {},
            maskedKeys: {},
            dialogKeys: {},
            viewKeys: {},
            viewFn: null,
            viewGestures: [],
        }));
        this.seq = {};
        this.matching = false;
        this.matched = '';
        this.textFieldDoesNotBlock = {
            enter: 1,
            esc: 1,
        };
        this.quickHelpShown = false;
        this.log.debug('KeyService constructed');
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    KeysService.prototype.installOn = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        var _this = this;
        this.log.debug('Installing keys handler');
        elem.on('keydown', function () { _this.keyIn(); });
        this.setupGlobalKeys();
    };
    /**
     * @param {?} x
     * @return {?}
     */
    KeysService.prototype.keyBindings = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        if (x === undefined) {
            return this.getKeyBindings();
        }
        else {
            this.setKeyBindings(x);
        }
    };
    /**
     * @return {?}
     */
    KeysService.prototype.unbindKeys = /**
     * @return {?}
     */
    function () {
        this.keyHandler.viewKeys = {};
        this.keyHandler.viewFn = null;
        this.keyHandler.viewGestures = [];
    };
    /**
     * @param {?} x
     * @return {?}
     */
    KeysService.prototype.dialogKeys = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        if (x === undefined) {
            this.unbindDialogKeys();
        }
        else {
            this.bindDialogKeys(x);
        }
    };
    /**
     * @param {?} word
     * @param {?} data
     * @return {?}
     */
    KeysService.prototype.addSeq = /**
     * @param {?} word
     * @param {?} data
     * @return {?}
     */
    function (word, data) {
        this.fs.addToTrie(this.seq, word, data);
    };
    /**
     * @param {?} word
     * @return {?}
     */
    KeysService.prototype.remSeq = /**
     * @param {?} word
     * @return {?}
     */
    function (word) {
        this.fs.removeFromTrie(this.seq, word);
    };
    /**
     * @param {?=} g
     * @return {?}
     */
    KeysService.prototype.gestureNotes = /**
     * @param {?=} g
     * @return {?}
     */
    function (g) {
        if (g === undefined) {
            return this.keyHandler.viewGestures;
        }
        else {
            this.keyHandler.viewGestures = this.fs.isA(g) || [];
        }
    };
    /**
     * @param {?} b
     * @return {?}
     */
    KeysService.prototype.enableKeys = /**
     * @param {?} b
     * @return {?}
     */
    function (b) {
        this.enabled = b;
    };
    /**
     * @param {?} b
     * @return {?}
     */
    KeysService.prototype.enableGlobalKeys = /**
     * @param {?} b
     * @return {?}
     */
    function (b) {
        this.globalEnabled = b;
    };
    /**
     * @param {?} o
     * @return {?}
     */
    KeysService.prototype.checkNotGlobal = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        var _this = this;
        /** @type {?} */
        var oops = [];
        if (this.fs.isO(o)) {
            o.forEach(function (val, key) {
                if (_this.keyHandler.globalKeys[key]) {
                    oops.push(key);
                }
            });
            if (oops.length) {
                this.log.warn('Ignoring reserved global key(s):', oops.join(','));
                oops.forEach(function (key) {
                    delete o[key];
                });
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    KeysService.prototype.matchSeq = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (!this.matching && key === 'shift-shift') {
            this.matching = true;
            return true;
        }
        if (this.matching) {
            this.matched += key;
            this.lookup = this.fs.trieLookup(this.seq, this.matched);
            if (this.lookup === -1) {
                return true;
            }
            this.matching = false;
            this.matched = '';
            if (!this.lookup) {
                return;
            }
            // ee.cluck(lookup);
            return true;
        }
    };
    /**
     * @param {?} code
     * @return {?}
     */
    KeysService.prototype.whatKey = /**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        switch (code) {
            case 8: return 'delete';
            case 9: return 'tab';
            case 13: return 'enter';
            case 16: return 'shift';
            case 27: return 'esc';
            case 32: return 'space';
            case 37: return 'leftArrow';
            case 38: return 'upArrow';
            case 39: return 'rightArrow';
            case 40: return 'downArrow';
            case 186: return 'semicolon';
            case 187: return 'equals';
            case 188: return 'comma';
            case 189: return 'dash';
            case 190: return 'dot';
            case 191: return 'slash';
            case 192: return 'backQuote';
            case 219: return 'openBracket';
            case 220: return 'backSlash';
            case 221: return 'closeBracket';
            case 222: return 'quote';
            default:
                if ((code >= 48 && code <= 57) ||
                    (code >= 65 && code <= 90)) {
                    return String.fromCharCode(code);
                }
                else if (code >= 112 && code <= 123) {
                    return 'F' + (code - 111);
                }
                return null;
        }
    };
    /**
     * @return {?}
     */
    KeysService.prototype.textFieldInput = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var t = event.target.tagName.toLowerCase();
        return t === 'input' || t === 'textarea';
    };
    /**
     * @return {?}
     */
    KeysService.prototype.keyIn = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var event$$1 = event;
        // d3.events can set the keyCode, but unit tests based on KeyboardEvent
        // cannot set keyCode since the attribute has been deprecated
        /** @type {?} */
        var code = event$$1.keyCode ? event$$1.keyCode : event$$1.code;
        /** @type {?} */
        var key = this.whatKey(Number.parseInt(code));
        this.log.debug('Key detected', event$$1, key, event$$1.code, event$$1.keyCode);
        /** @type {?} */
        var textBlockable = !this.textFieldDoesNotBlock[key];
        /** @type {?} */
        var modifiers = [];
        if (event$$1.metaKey) {
            modifiers.push('cmd');
        }
        if (event$$1.altKey) {
            modifiers.push('alt');
        }
        if (event$$1.shiftKey) {
            modifiers.push('shift');
        }
        if (!key) {
            return;
        }
        modifiers.push(key);
        key = modifiers.join('-');
        if (textBlockable && this.textFieldInput()) {
            return;
        }
        /** @type {?} */
        var kh = this.keyHandler;
        /** @type {?} */
        var gk = kh.globalKeys[key];
        /** @type {?} */
        var gcb = this.fs.isF(gk) || (this.fs.isA(gk) && this.fs.isF(gk[0]));
        /** @type {?} */
        var dk = kh.dialogKeys[key];
        /** @type {?} */
        var dcb = this.fs.isF(dk);
        /** @type {?} */
        var vk = kh.viewKeys[key];
        /** @type {?} */
        var kl = this.fs.isF(kh.viewKeys._keyListener);
        /** @type {?} */
        var vcb = this.fs.isF(vk) || (this.fs.isA(vk) && this.fs.isF(vk[0])) || this.fs.isF(kh.viewFn);
        /** @type {?} */
        var token = KeysToken.KEYEV;
        event$$1.stopPropagation();
        if (this.enabled) {
            if (this.matchSeq(key)) {
                return;
            }
            // global callback?
            if (gcb && gcb(token, key, code, event$$1)) {
                // if the event was 'handled', we are done
                return;
            }
            // dialog callback?
            if (dcb) {
                dcb(token, key, code, event$$1);
                // assume dialog handled the event
                return;
            }
            // otherwise, let the view callback have a shot
            if (vcb) {
                this.log.debug('Letting view callback have a shot', vcb, token, key, code, event$$1);
                vcb(token, key, code, event$$1);
            }
            if (kl) {
                kl(key);
            }
        }
    };
    // functions to obtain localized strings deferred from the setup of the
    //  global key data structures.
    // functions to obtain localized strings deferred from the setup of the
    //  global key data structures.
    /**
     * @return {?}
     */
    KeysService.prototype.qhlion = 
    // functions to obtain localized strings deferred from the setup of the
    //  global key data structures.
    /**
     * @return {?}
     */
    function () {
        return this.ls.bundle('core.fw.QuickHelp');
    };
    /**
     * @return {?}
     */
    KeysService.prototype.qhlionShowHide = /**
     * @return {?}
     */
    function () {
        return this.qhlion()('qh_hint_show_hide_qh');
    };
    /**
     * @return {?}
     */
    KeysService.prototype.qhlionHintEsc = /**
     * @return {?}
     */
    function () {
        return this.qhlion()('qh_hint_esc');
    };
    /**
     * @return {?}
     */
    KeysService.prototype.qhlionHintT = /**
     * @return {?}
     */
    function () {
        return this.qhlion()('qh_hint_t');
    };
    /**
     * @return {?}
     */
    KeysService.prototype.setupGlobalKeys = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.assign(this.keyHandler, {
            globalKeys: {
                backSlash: [function (view, key, code, ev) { return _this.quickHelp(view, key, code, ev); }, this.qhlionShowHide],
                slash: [function (view, key, code, ev) { return _this.quickHelp(view, key, code, ev); }, this.qhlionShowHide],
                esc: [function (view, key, code, ev) { return _this.escapeKey(view, key, code, ev); }, this.qhlionHintEsc],
                T: [function (view, key, code, ev) { return _this.toggleTheme(view, key, code, ev); }, this.qhlionHintT],
            },
            globalFormat: ['backSlash', 'slash', 'esc', 'T'],
            // Masked keys are global key handlers that always return true.
            // That is, the view will never see the event for that key.
            maskedKeys: {
                slash: 1,
                backSlash: 1,
                T: 1,
            },
        });
    };
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    KeysService.prototype.quickHelp = /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    function (view, key, code, ev) {
        if (!this.globalEnabled) {
            return false;
        }
        this.quickHelpShown = !this.quickHelpShown;
        return true;
    };
    // returns true if we 'consumed' the ESC keypress, false otherwise
    // returns true if we 'consumed' the ESC keypress, false otherwise
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    KeysService.prototype.escapeKey = 
    // returns true if we 'consumed' the ESC keypress, false otherwise
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    function (view, key, code, ev) {
        this.quickHelpShown = false;
        return this.ns.hideNav();
    };
    /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    KeysService.prototype.toggleTheme = /**
     * @param {?} view
     * @param {?} key
     * @param {?} code
     * @param {?} ev
     * @return {?}
     */
    function (view, key, code, ev) {
        if (!this.globalEnabled) {
            return false;
        }
        // ts.toggleTheme();
        return true;
    };
    /**
     * @param {?} map
     * @param {?} caller
     * @param {?} remove
     * @return {?}
     */
    KeysService.prototype.filterMaskedKeys = /**
     * @param {?} map
     * @param {?} caller
     * @param {?} remove
     * @return {?}
     */
    function (map$$1, caller, remove) {
        var _this = this;
        /** @type {?} */
        var masked = [];
        /** @type {?} */
        var msgs = [];
        map(map$$1).keys().forEach(function (key) {
            if (_this.keyHandler.maskedKeys[key]) {
                masked.push(key);
                msgs.push(caller, ': Key "' + key + '" is reserved');
            }
        });
        if (msgs.length) {
            this.log.warn(msgs.join('\n'));
        }
        if (remove) {
            masked.forEach(function (k) {
                delete map$$1[k];
            });
        }
        return masked;
    };
    /**
     * @param {?} fname
     * @param {?} x
     * @return {?}
     */
    KeysService.prototype.unexParam = /**
     * @param {?} fname
     * @param {?} x
     * @return {?}
     */
    function (fname, x) {
        this.log.warn(fname, ': unexpected parameter-- ', x);
    };
    /**
     * @param {?} keyArg
     * @return {?}
     */
    KeysService.prototype.setKeyBindings = /**
     * @param {?} keyArg
     * @return {?}
     */
    function (keyArg) {
        /** @type {?} */
        var fname = 'setKeyBindings()';
        /** @type {?} */
        var kFunc = this.fs.isF(keyArg);
        /** @type {?} */
        var kMap = this.fs.isO(keyArg);
        if (kFunc) {
            // set general key handler callback
            this.keyHandler.viewFn = kFunc;
        }
        else if (kMap) {
            this.filterMaskedKeys(kMap, fname, true);
            this.keyHandler.viewKeys = kMap;
        }
        else {
            this.unexParam(fname, keyArg);
        }
    };
    /**
     * @return {?}
     */
    KeysService.prototype.getKeyBindings = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var gkeys = map(this.keyHandler.globalKeys).keys();
        /** @type {?} */
        var masked = map(this.keyHandler.maskedKeys).keys();
        /** @type {?} */
        var vkeys = map(this.keyHandler.viewKeys).keys();
        /** @type {?} */
        var vfn = !!this.fs.isF(this.keyHandler.viewFn);
        return {
            globalKeys: gkeys,
            maskedKeys: masked,
            viewKeys: vkeys,
            viewFunction: vfn,
        };
    };
    /**
     * @param {?} map
     * @return {?}
     */
    KeysService.prototype.bindDialogKeys = /**
     * @param {?} map
     * @return {?}
     */
    function (map$$1) {
        /** @type {?} */
        var fname = 'bindDialogKeys()';
        /** @type {?} */
        var kMap = this.fs.isO(map$$1);
        if (kMap) {
            this.filterMaskedKeys(map$$1, fname, true);
            this.keyHandler.dialogKeys = kMap;
        }
        else {
            this.unexParam(fname, map$$1);
        }
    };
    /**
     * @return {?}
     */
    KeysService.prototype.unbindDialogKeys = /**
     * @return {?}
     */
    function () {
        this.keyHandler.dialogKeys = {};
    };
    KeysService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    KeysService.ctorParameters = function () { return [
        { type: LogService },
        { type: FnService },
        { type: LionService },
        { type: NavService }
    ]; };
    /** @nocollapse */ KeysService.ngInjectableDef = defineInjectable({ factory: function KeysService_Factory() { return new KeysService(inject(LogService), inject(FnService), inject(LionService), inject(NavService)); }, token: KeysService, providedIn: "root" });
    return KeysService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var QuickhelpComponent = /** @class */ (function () {
    function QuickhelpComponent(log, fs, ks, lion) {
        var _this = this;
        this.log = log;
        this.fs = fs;
        this.ks = ks;
        this.lion = lion;
        if (this.lion.ubercache.length === 0) {
            this.lionFn = this.dummyLion;
            this.lion.loadCbs.set('quickhelp', function () { return _this.doLion(); });
        }
        else {
            this.doLion();
        }
        this.log.debug('Quickhelp component constructed');
    }
    /**
     * Read the LION bundle for Toolbar and set up the lionFn
     */
    /**
     * Read the LION bundle for Toolbar and set up the lionFn
     * @return {?}
     */
    QuickhelpComponent.prototype.doLion = /**
     * Read the LION bundle for Toolbar and set up the lionFn
     * @return {?}
     */
    function () {
        this.lionFn = this.lion.bundle('core.fw.QuickHelp');
    };
    /**
    * A dummy implementation of the lionFn until the response is received and the LION
    * bundle is received from the WebSocket
    */
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    QuickhelpComponent.prototype.dummyLion = /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return '%' + key + '%';
    };
    QuickhelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'onos-quickhelp',
                    template: "<!--\n~ Copyright 2019-present Open Networking Foundation\n~\n~ Licensed under the Apache License, Version 2.0 (the \"License\");\n~ you may not use this file except in compliance with the License.\n~ You may obtain a copy of the License at\n~\n~     http://www.apache.org/licenses/LICENSE-2.0\n~\n~ Unless required by applicable law or agreed to in writing, software\n~ distributed under the License is distributed on an \"AS IS\" BASIS,\n~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n~ See the License for the specific language governing permissions and\n~ limitations under the License.\n-->\n<div id=\"quickhelp\" [@quickHelpState]=\"ks.quickHelpShown\">\n    <div class=\"help\" *ngIf=\"ks.quickHelpShown\">\n        <p class=\"title\">{{lionFn(\"qh_title\")}}</p>\n        <!-- TODO: drive this through the keys service keyHandler -->\n        <table class=\"qhrow\">\n            <tr>\n                <td class=\"key\">&#92;</td>\n                <td class=\"desc\">Afficher/cacher l'aide rapide</td>\n            </tr>\n            <tr>\n                <td class=\"key\">/</td>\n                <td class=\"desc\">Afficher/cacher l'aide rapide</td>\n            </tr>\n            <tr>\n                <td class=\"key\">Esc</td>\n                <td class=\"desc\">ignorer la bo\u00EEte de dialogue ou annuler les\n                    s\u00E9lections\n                </td>\n            </tr>\n            <tr>\n                <td class=\"key\">T</td>\n                <td class=\"desc\">basculer de th\u00E8me</td>\n            </tr>\n        </table>\n        <hr class=\"qhrowsep\">\n        <table class=\"qhrow\">\n            <tr>\n                <td class=\"key\">I</td>\n                <td class=\"desc\">Basculer au panneau de instance\n                    ONOS\n                </td>\n                <td class=\"key\">O</td>\n                <td class=\"desc\">Baculer au panneau r\u00E9capitulatif\n                    ONOS\n                </td>\n                <td class=\"key\">D</td>\n                <td class=\"desc\">Basculer le panneau de d\u00E9tails</td>\n            </tr>\n            <tr>\n                <td class=\"key\">H</td>\n                <td class=\"desc\">Basculer la visibilit\u00E9 de l'h\u00F4te\n                </td>\n                <td class=\"key\">M</td>\n                <td class=\"desc\">Basculer la visibilit\u00E9 hors-ligne\n                </td>\n                <td class=\"key\">P</td>\n                <td class=\"desc\">Basculer le port mis en \u00E9vidence\n                </td>\n            </tr>\n            <tr>\n                <td class=\"key\">Dash</td>\n                <td class=\"desc\">Montrer les mauvais liens</td>\n                <td class=\"key\">B</td>\n                <td class=\"desc\">Basculer la carte g\u00E9o de fond</td>\n                <td class=\"key\">G</td>\n                <td class=\"desc\">S\u00E9lectionner la carte g\u00E9o de fond\n                </td>\n            </tr>\n            <tr>\n                <td class=\"key\">S</td>\n                <td class=\"desc\">Toggle sprite layer</td>\n                <td class=\"key\" y=\"0\">X</td>\n                <td class=\"desc\" y=\"0\" x=\"33.53125\">r\u00E9initialiser la\n                    carte des noeuds\n                </td>\n                <td class=\"key\">Z</td>\n                <td class=\"desc\">Basculer la vue oblique\n                    (exp\u00E9rimental)\n                </td>\n            </tr>\n            <tr>\n                <td class=\"key\">N</td>\n                <td class=\"desc\">cycle couche de noeuds</td>\n                <td class=\"key\">L</td>\n                <td class=\"desc\">Parcourir \u00E9tiquettes appareils</td>\n                <td class=\"key\">Shift-l</td>\n                <td class=\"desc\">Parcourir \u00E9tiquettes h\u00F4te</td>\n            </tr>\n            <tr>\n                <td class=\"key\">U</td>\n                <td class=\"desc\">survoler avec la souris</td>\n                <td class=\"key\">R</td>\n                <td class=\"desc\">r\u00E9initialiser le zoom et le\n                    panoramique\n                </td>\n                <td class=\"key\">E</td>\n                <td class=\"desc\">Egaliser les r\u00F4les de ma\u00EEtrises\n                </td>\n            </tr>\n            <tr>\n                <td class=\"key\">Dot</td>\n                <td class=\"desc\">Basculer a la barre d'outils</td>\n                <td class=\"key\">0</td>\n                <td class=\"desc\">Annuler la surveillance du trafic\n                </td>\n                <td class=\"key\">A</td>\n                <td class=\"desc\">Surveiller tout le trafic</td>\n            </tr>\n            <tr>\n                <td class=\"key\">F</td>\n                <td class=\"desc\">Afficher les flux de liaison de p\u00E9riph\u00E9rique\n                </td>\n                <td class=\"key\">V</td>\n                <td class=\"desc\">Show all related intents</td>\n                <td class=\"key\">L-arrow</td>\n                <td class=\"desc\">Show previous related intent</td>\n            </tr>\n            <tr>\n                <td class=\"key\">R-arrow</td>\n                <td class=\"desc\">Show next related intent</td>\n                <td class=\"key\">W</td>\n                <td class=\"desc\">Monitor traffic of selected intent</td>\n            </tr>\n        </table>\n        <hr>\n        <div class=\"qhrow\">\n            <table class=\"qh-r4-c0\">\n                <tr>\n                    <td class=\"key\">cliquer</td>\n                    <td class=\"desc\">S\u00E9lectionner l'article et montrer les\n                        d\u00E9tails\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"key\">Cliquer sur MAJ</td>\n                    <td class=\"desc\">Basculer l'\u00E9tat de s\u00E9lection</td>\n                </tr>\n                <tr>\n                    <td class=\"key\">Glisser</td>\n                    <td class=\"desc\">Repositionner (et \u00E9pingler) le p\u00E9riph\u00E9rique\n                        / l'h\u00F4te\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"key\">cmd d\u00E9filer</td>\n                    <td class=\"desc\">Zoom avant/arri\u00E8re</td>\n                </tr>\n                <tr>\n                    <td class=\"key\" y=\"48\">cmd-glisser</td>\n                    <td class=\"desc\" y=\"48\" x=\"74.84375\">Pan\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n",
                    styles: ["#quickhelp{top:100px;z-index:5000;position:relative}#quickhelp div.help{background:#000;opacity:.8}#quickhelp div.help table{vertical-align:top}#quickhelp div.help p{text-align:center;color:#fff;font-weight:700}#quickhelp td.key{color:#add;padding-left:8px;padding-right:4px}#quickhelp td.desc{color:#fff}"],
                    animations: [
                        trigger('quickHelpState', [
                            state('true', style({
                                opacity: '1.0',
                            })),
                            state('false', style({
                                opacity: '0.0',
                            })),
                            transition('0 => 1', animate('500ms ease-in')),
                            transition('1 => 0', animate('500ms ease-out'))
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    QuickhelpComponent.ctorParameters = function () { return [
        { type: LogService },
        { type: FnService },
        { type: KeysService },
        { type: LionService }
    ]; };
    return QuickhelpComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var Gui2FwLibModule = /** @class */ (function () {
    function Gui2FwLibModule() {
    }
    Gui2FwLibModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        DetectBrowserDirective,
                        TableResizeDirective,
                        IconComponent,
                        VeilComponent,
                        FlashComponent,
                        ConfirmComponent,
                        QuickhelpComponent,
                        MastComponent,
                        TableFilterPipe
                    ],
                    exports: [
                        DetectBrowserDirective,
                        TableResizeDirective,
                        IconComponent,
                        VeilComponent,
                        FlashComponent,
                        ConfirmComponent,
                        QuickhelpComponent,
                        MastComponent,
                        TableFilterPipe
                    ]
                },] },
    ];
    return Gui2FwLibModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2018-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `.angular-cli.json`.
/** @type {?} */
var environment = {
    production: false,
    isDebugMode: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var isDebugMode = !environment.production;
/** @type {?} */
var noop = function () { return undefined; };
/**
 * ONOS GUI -- LogService
 * Inspired by https://robferguson.org/blog/2017/09/09/a-simple-logging-service-for-angular-4/
 */
var ConsoleLoggerService = /** @class */ (function () {
    function ConsoleLoggerService() {
    }
    Object.defineProperty(ConsoleLoggerService.prototype, "debug", {
        get: /**
         * @return {?}
         */
        function () {
            {
                return console.debug.bind(console);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsoleLoggerService.prototype, "info", {
        get: /**
         * @return {?}
         */
        function () {
            {
                return console.info.bind(console);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsoleLoggerService.prototype, "warn", {
        get: /**
         * @return {?}
         */
        function () {
            return console.warn.bind(console);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsoleLoggerService.prototype, "error", {
        get: /**
         * @return {?}
         */
        function () {
            return console.error.bind(console);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} type
     * @param {?=} args
     * @return {?}
     */
    ConsoleLoggerService.prototype.invokeConsoleMethod = /**
     * @param {?} type
     * @param {?=} args
     * @return {?}
     */
    function (type, args) {
        /** @type {?} */
        var logFn = (console)[type] || console.log || noop;
        logFn.apply(console, [args]);
    };
    ConsoleLoggerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */ ConsoleLoggerService.ngInjectableDef = defineInjectable({ factory: function ConsoleLoggerService_Factory() { return new ConsoleLoggerService(); }, token: ConsoleLoggerService, providedIn: "root" });
    return ConsoleLoggerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Util -- Theme Service
 */
var ThemeService = /** @class */ (function () {
    function ThemeService(log) {
        this.log = log;
        this.themes = ['light', 'dark'];
        this.thidx = 0;
        this.log.debug('ThemeService constructed');
    }
    /**
     * @return {?}
     */
    ThemeService.prototype.getTheme = /**
     * @return {?}
     */
    function () {
        return this.themes[this.thidx];
    };
    /**
     * @return {?}
     */
    ThemeService.prototype.themeStr = /**
     * @return {?}
     */
    function () {
        return this.themes.join(' ');
    };
    ThemeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    ThemeService.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    /** @nocollapse */ ThemeService.ngInjectableDef = defineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(inject(LogService)); }, token: ThemeService, providedIn: "root" });
    return ThemeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var id = 'loading-anim';
/** @type {?} */
var dir = 'data/img/loading/';
/** @type {?} */
var pfx = '/load-';
/** @type {?} */
var nImgs = 16;
/** @type {?} */
var speed = 100;
/** @type {?} */
var waitDelay = 500;
/**
 * ONOS GUI -- Layer -- Loading Service
 *
 * Provides a mechanism to start/stop the loading animation, center screen.
 */
var LoadingService = /** @class */ (function () {
    function LoadingService(fs, log, ts, w) {
        this.fs = fs;
        this.log = log;
        this.ts = ts;
        this.w = w;
        this.images = [];
        this.idx = 0;
        this.preloadImages();
        this.log.debug('LoadingService constructed');
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    LoadingService.prototype.dbg = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.fs.debug(this.constructor.name, args);
    };
    /**
     * @return {?}
     */
    LoadingService.prototype.preloadImages = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var idx;
        this.dbg('preload images start...');
        for (idx = 1; idx <= nImgs; idx++) {
            this.addImg('light', idx);
            this.addImg('dark', idx);
        }
        this.dbg('preload images DONE!', this.images);
    };
    /**
     * @param {?} theme
     * @param {?} idx
     * @return {?}
     */
    LoadingService.prototype.addImg = /**
     * @param {?} theme
     * @param {?} idx
     * @return {?}
     */
    function (theme, idx) {
        /** @type {?} */
        var img = new Image();
        img.src = this.fname(idx, theme);
        this.images.push(img);
    };
    /**
     * @param {?} i
     * @param {?} theme
     * @return {?}
     */
    LoadingService.prototype.fname = /**
     * @param {?} i
     * @param {?} theme
     * @return {?}
     */
    function (i, theme) {
        /** @type {?} */
        var z = i > 9 ? '' : '0';
        return dir + theme + pfx + z + i + '.png';
    };
    /**
     * @return {?}
     */
    LoadingService.prototype.nextFrame = /**
     * @return {?}
     */
    function () {
        this.idx = this.idx === 16 ? 1 : this.idx + 1;
        this.img.attr('src', this.fname(this.idx, this.theme));
    };
    // start displaying 'loading...' animation (idempotent)
    // start displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    LoadingService.prototype.startAnim = 
    // start displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dbg('start ANIMATION');
        this.theme = this.ts.getTheme();
        /** @type {?} */
        var div = select('#' + id);
        if (div.empty()) {
            div = select('body')
                .append('div')
                .attr('id', id);
            this.img = div
                .append('img')
                .attr('src', this.fname(1, this.theme));
            this.idx = 1;
            this.task = setInterval(function () { return _this.nextFrame(); }, speed);
        }
    };
    // stop displaying 'loading...' animation (idempotent)
    // stop displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    LoadingService.prototype.stopAnim = 
    // stop displaying 'loading...' animation (idempotent)
    /**
     * @return {?}
     */
    function () {
        this.dbg('*stop* ANIMATION');
        if (this.task) {
            clearInterval(this.task);
            this.task = null;
        }
        select('#' + id).remove();
    };
    // schedule function to start animation in the future
    // schedule function to start animation in the future
    /**
     * @return {?}
     */
    LoadingService.prototype.start = 
    // schedule function to start animation in the future
    /**
     * @return {?}
     */
    function () {
        this.dbg('start (schedule)');
        this.wait = this.w.setTimeout(this.startAnim(), waitDelay);
    };
    // cancel future start, if any; stop the animation
    // cancel future start, if any; stop the animation
    /**
     * @return {?}
     */
    LoadingService.prototype.stop = 
    // cancel future start, if any; stop the animation
    /**
     * @return {?}
     */
    function () {
        if (this.wait) {
            this.dbg('start CANCELED');
            clearTimeout(this.wait);
            this.wait = null;
        }
        this.stopAnim();
    };
    // return true if start() has been called but not stop()
    // return true if start() has been called but not stop()
    /**
     * @return {?}
     */
    LoadingService.prototype.waiting = 
    // return true if start() has been called but not stop()
    /**
     * @return {?}
     */
    function () {
        return !!this.wait;
    };
    LoadingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    LoadingService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: ThemeService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ LoadingService.ngInjectableDef = defineInjectable({ factory: function LoadingService_Factory() { return new LoadingService(inject(FnService), inject(LogService), inject(ThemeService), inject("Window")); }, token: LoadingService, providedIn: "root" });
    return LoadingService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var fs;
/** @type {?} */
var defaultSettings = {
    edge: 'right',
    width: 200,
    margin: 20,
    hideMargin: 20,
    xtnTime: 750,
    fade: true,
};
/** @type {?} */
var panels;
/** @type {?} */
var panelLayer;
/**
 * @return {?}
 */
function init() {
    panelLayer = select('div#floatpanels');
    panelLayer.text('');
    panels = {};
}
// helpers for panel
/**
 * @return {?}
 */
function noop$1() {
}
/**
 * @param {?} p
 * @return {?}
 */
function margin(p) {
    return p.settings.margin;
}
/**
 * @param {?} p
 * @return {?}
 */
function hideMargin(p) {
    return p.settings.hideMargin;
}
/**
 * @param {?} p
 * @param {?} what
 * @return {?}
 */
function noPx(p, what) {
    return Number(p.el.style(what).replace(/px$/, ''));
}
/**
 * @param {?} p
 * @return {?}
 */
function widthVal(p) {
    return noPx(p, 'width');
}
/**
 * @param {?} p
 * @return {?}
 */
function heightVal(p) {
    return noPx(p, 'height');
}
/**
 * @param {?} p
 * @return {?}
 */
function pxShow(p) {
    return margin(p) + 'px';
}
/**
 * @param {?} p
 * @return {?}
 */
function pxHide(p) {
    return (-hideMargin(p) - widthVal(p) - (noPx(p, 'padding') * 2)) + 'px';
}
/**
 * @param {?} id
 * @param {?} settings
 * @return {?}
 */
function makePanel(id, settings) {
    /** @type {?} */
    var p = {
        id: id,
        settings: settings,
        on: false,
        el: null,
    };
    /** @type {?} */
    var api = {
        show: showPanel,
        hide: hidePanel,
        toggle: togglePanel,
        empty: emptyPanel,
        append: appendPanel,
        width: panelWidth,
        height: panelHeight,
        bbox: panelBBox,
        isVisible: panelIsVisible,
        classed: classed,
        el: panelEl,
    };
    p.el = panelLayer.append('div')
        .attr('id', id)
        .attr('class', 'floatpanel')
        .style('opacity', 0);
    // has to be called after el is set
    p.el.style(p.settings.edge, pxHide(p));
    panelWidth(p.settings.width);
    if (p.settings.height) {
        panelHeight(p.settings.height);
    }
    panels[id] = p;
    /**
     * @param {?} cb
     * @return {?}
     */
    function showPanel(cb) {
        /** @type {?} */
        var endCb = fs.isF(cb) || noop$1;
        p.on = true;
        p.el.transition().duration(p.settings.xtnTime)
            .style(p.settings.edge, pxShow(p))
            .style('opacity', 1);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    function hidePanel(cb) {
        /** @type {?} */
        var endCb = fs.isF(cb) || noop$1;
        /** @type {?} */
        var endOpacity = p.settings.fade ? 0 : 1;
        p.on = false;
        p.el.transition().duration(p.settings.xtnTime)
            .style(p.settings.edge, pxHide(p))
            .style('opacity', endOpacity);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    function togglePanel(cb) {
        if (p.on) {
            hidePanel(cb);
        }
        else {
            showPanel(cb);
        }
        return p.on;
    }
    /**
     * @return {?}
     */
    function emptyPanel() {
        return p.el.text('');
    }
    /**
     * @param {?} what
     * @return {?}
     */
    function appendPanel(what) {
        return p.el.append(what);
    }
    /**
     * @param {?} w
     * @return {?}
     */
    function panelWidth(w) {
        if (w === undefined) {
            return widthVal(p);
        }
        p.el.style('width', w + 'px');
    }
    /**
     * @param {?} h
     * @return {?}
     */
    function panelHeight(h) {
        if (h === undefined) {
            return heightVal(p);
        }
        p.el.style('height', h + 'px');
    }
    /**
     * @return {?}
     */
    function panelBBox() {
        return p.el.node().getBoundingClientRect();
    }
    /**
     * @return {?}
     */
    function panelIsVisible() {
        return p.on;
    }
    /**
     * @param {?} cls
     * @param {?} bool
     * @return {?}
     */
    function classed(cls, bool) {
        return p.el.classed(cls, bool);
    }
    /**
     * @return {?}
     */
    function panelEl() {
        return p.el;
    }
    return api;
}
/**
 * @param {?} id
 * @return {?}
 */
function removePanel(id) {
    panelLayer.select('#' + id).remove();
    delete panels[id];
}
var PanelService = /** @class */ (function () {
    function PanelService(funcs, log, ts, wss) {
        this.funcs = funcs;
        this.log = log;
        this.ts = ts;
        this.wss = wss;
        fs = this.funcs;
        init();
    }
    /**
     * @param {?} id
     * @param {?} opts
     * @return {?}
     */
    PanelService.prototype.createPanel = /**
     * @param {?} id
     * @param {?} opts
     * @return {?}
     */
    function (id, opts) {
        /** @type {?} */
        var settings = Object.assign({}, defaultSettings, opts);
        if (!id) {
            this.log.warn('createPanel: no ID given');
            return null;
        }
        if (panels[id]) {
            this.log.warn('Panel with ID "' + id + '" already exists');
            return null;
        }
        if (fs.debugOn('widget')) {
            this.log.debug('creating panel:', id, settings);
        }
        return makePanel(id, settings);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PanelService.prototype.destroyPanel = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (panels[id]) {
            if (fs.debugOn('widget')) {
                this.log.debug('destroying panel:', id);
            }
            removePanel(id);
        }
        else {
            if (fs.debugOn('widget')) {
                this.log.debug('no panel to destroy:', id);
            }
        }
    };
    PanelService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    PanelService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: ThemeService },
        { type: WebSocketService }
    ]; };
    /** @nocollapse */ PanelService.ngInjectableDef = defineInjectable({ factory: function PanelService_Factory() { return new PanelService(inject(FnService), inject(LogService), inject(ThemeService), inject(WebSocketService)); }, token: PanelService, providedIn: "root" });
    return PanelService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/*
 * Copyright 2019-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var LONGITUDE_EXTENT = 180;
/** @type {?} */
var LATITUDE_EXTENT = 75;
/** @type {?} */
var GRID_EXTENT_X = 2000;
/** @type {?} */
var GRID_EXTENT_Y = 1000;
/** @type {?} */
var GRID_DIAGONAL = 2236;
// 2236 is the length of the diagonal of the 2000x1000 box
/** @type {?} */
var GRID_CENTRE_X = 500;
/** @type {?} */
var GRID_CENTRE_Y = 500;
/**
 * Utility class with static functions for scaling maps
 *
 * This is left as a class, so that the functions are loaded only as needed
 */
var  /**
 * Utility class with static functions for scaling maps
 *
 * This is left as a class, so that the functions are loaded only as needed
 */
ZoomUtils = /** @class */ (function () {
    function ZoomUtils() {
    }
    /**
     * @param {?} location
     * @return {?}
     */
    ZoomUtils.convertGeoToCanvas = /**
     * @param {?} location
     * @return {?}
     */
    function (location) {
        /** @type {?} */
        var calcX = (LONGITUDE_EXTENT + location.lng) / (LONGITUDE_EXTENT * 2) * GRID_EXTENT_X - GRID_CENTRE_X;
        /** @type {?} */
        var calcY = (LATITUDE_EXTENT - location.lat) / (LATITUDE_EXTENT * 2) * GRID_EXTENT_Y;
        return (/** @type {?} */ ({
            x: calcX,
            y: calcY,
            equivLoc: {
                lat: location.lat,
                lng: location.lng
            }
        }));
    };
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    ZoomUtils.convertXYtoGeo = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        /** @type {?} */
        var calcLong = (x + GRID_CENTRE_X) * 2 * LONGITUDE_EXTENT / GRID_EXTENT_X - LONGITUDE_EXTENT;
        /** @type {?} */
        var calcLat = -(y * 2 * LATITUDE_EXTENT / GRID_EXTENT_Y - LATITUDE_EXTENT);
        return (/** @type {?} */ ({
            x: x,
            y: y,
            equivLoc: (/** @type {?} */ ({
                lat: (calcLat === -0) ? 0 : calcLat,
                lng: calcLong
            }))
        }));
    };
    /**
     * This converts the bounds of a map loaded from a TopoGson file that has been
     * converted in to a GEOJson format by d3
     *
     * The bounds are in latitude and longitude from bottom left (min) to top right (max)
     *
     * First they are converted in to SVG viewbox coordinates 0,0 top left 1000x1000
     *
     * The the zoom level is calculated by scaling to the grid diagonal
     *
     * Finally the translation is calculated by applying the zoom first, and then
     * translating on the zoomed coordinate system
     * @param mapBounds - the bounding box of the chosen map in lat and long
     * @param log The LogService
     */
    /**
     * This converts the bounds of a map loaded from a TopoGson file that has been
     * converted in to a GEOJson format by d3
     *
     * The bounds are in latitude and longitude from bottom left (min) to top right (max)
     *
     * First they are converted in to SVG viewbox coordinates 0,0 top left 1000x1000
     *
     * The the zoom level is calculated by scaling to the grid diagonal
     *
     * Finally the translation is calculated by applying the zoom first, and then
     * translating on the zoomed coordinate system
     * @param {?} mapBounds - the bounding box of the chosen map in lat and long
     * @param {?=} log The LogService
     * @return {?}
     */
    ZoomUtils.convertBoundsToZoomLevel = /**
     * This converts the bounds of a map loaded from a TopoGson file that has been
     * converted in to a GEOJson format by d3
     *
     * The bounds are in latitude and longitude from bottom left (min) to top right (max)
     *
     * First they are converted in to SVG viewbox coordinates 0,0 top left 1000x1000
     *
     * The the zoom level is calculated by scaling to the grid diagonal
     *
     * Finally the translation is calculated by applying the zoom first, and then
     * translating on the zoomed coordinate system
     * @param {?} mapBounds - the bounding box of the chosen map in lat and long
     * @param {?=} log The LogService
     * @return {?}
     */
    function (mapBounds, log) {
        /** @type {?} */
        var min = this.convertGeoToCanvas((/** @type {?} */ ({
            lng: mapBounds.lngMin,
            lat: mapBounds.latMin
        })));
        /** @type {?} */
        var max = this.convertGeoToCanvas((/** @type {?} */ ({
            lng: mapBounds.lngMax,
            lat: mapBounds.latMax
        })));
        /** @type {?} */
        var diagonal = Math.sqrt(Math.pow(max.x - min.x, 2) + Math.pow(max.y - min.y, 2));
        /** @type {?} */
        var centreX = (max.x - min.x) / 2 + min.x;
        /** @type {?} */
        var centreY = (max.y - min.y) / 2 + min.y;
        // Zoom works from the top left of the 1000x1000 viewbox
        // The scale is applied first and then the translate is on the scaled coordinates
        /** @type {?} */
        var zoomscale = 0.5 * GRID_DIAGONAL / ((diagonal < 100) ? 100 : diagonal);
        // Don't divide by zero
        /** @type {?} */
        var zoomx = -centreX * zoomscale + GRID_CENTRE_X;
        /** @type {?} */
        var zoomy = -centreY * zoomscale + GRID_CENTRE_Y;
        // log.debug('MapBounds', mapBounds, 'XYMin', min, 'XYMax', max, 'Diag', diagonal,
        //     'Centre', centreX, centreY, 'translate', zoomx, zoomy, 'Scale', zoomscale);
        return (/** @type {?} */ ({ tx: zoomx, ty: zoomy, sc: zoomscale }));
    };
    /**
     * Calculate Zoom settings to fit the 1000x1000 grid in to the available window height
     * less the banner height
     *
     * Scaling always happens from the top left 0,0
     * If the height is greater than the width then no scaling is required - grid will
     * need to fill the SVG canvas
     * @param bannerHeight - the top band of the screen for the mast
     * @param innerWidth - the actual width of the screen
     * @param innerHeight - the actual height of the screen
     * @return Zoom settings - scale and translate
     */
    /**
     * Calculate Zoom settings to fit the 1000x1000 grid in to the available window height
     * less the banner height
     *
     * Scaling always happens from the top left 0,0
     * If the height is greater than the width then no scaling is required - grid will
     * need to fill the SVG canvas
     * @param {?} bannerHeight - the top band of the screen for the mast
     * @param {?} innerWidth - the actual width of the screen
     * @param {?} innerHeight - the actual height of the screen
     * @return {?} Zoom settings - scale and translate
     */
    ZoomUtils.zoomToWindowSize = /**
     * Calculate Zoom settings to fit the 1000x1000 grid in to the available window height
     * less the banner height
     *
     * Scaling always happens from the top left 0,0
     * If the height is greater than the width then no scaling is required - grid will
     * need to fill the SVG canvas
     * @param {?} bannerHeight - the top band of the screen for the mast
     * @param {?} innerWidth - the actual width of the screen
     * @param {?} innerHeight - the actual height of the screen
     * @return {?} Zoom settings - scale and translate
     */
    function (bannerHeight, innerWidth, innerHeight) {
        /** @type {?} */
        var newHeight = innerHeight - bannerHeight;
        if (newHeight > innerWidth) {
            return (/** @type {?} */ ({
                sc: 1.0,
                tx: 0,
                ty: 0
            }));
        }
        else {
            /** @type {?} */
            var scale = newHeight / innerWidth;
            return (/** @type {?} */ ({
                sc: scale,
                tx: (500 / scale - 500) * scale,
                ty: 0
            }));
        }
    };
    return ZoomUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var UPDATE_PREFS = 'updatePrefs';
/** @type {?} */
var UPDATE_PREFS_REQ = 'updatePrefReq';
/**
 * ONOS GUI -- Util -- User Preference Service
 */
var PrefsService = /** @class */ (function () {
    function PrefsService(fs, log, wss, window) {
        var _this = this;
        this.fs = fs;
        this.log = log;
        this.wss = wss;
        this.window = window;
        this.handlers = [];
        this.listeners = [];
        this.wss.bindHandlers(new Map([
            [UPDATE_PREFS, function (data) { return _this.updatePrefs(data); }]
        ]));
        this.handlers.push(UPDATE_PREFS);
        // When index.html is fetched it is served up by MainIndexResource.java
        // which fetches userPrefs in to the global scope.
        // After that updates are done through WebSocket
        this.cache = Object.assign({}, this.window['userPrefs']);
        this.log.debug('PrefsService constructed');
    }
    /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    PrefsService.prototype.setPrefs = /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    function (name, obj) {
        // keep a cached copy of the object and send an update to server
        this.cache[name] = obj;
        this.wss.sendEvent(UPDATE_PREFS_REQ, { key: name, value: obj });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PrefsService.prototype.updatePrefs = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.cache = data;
        this.listeners.forEach(function (lsnr) { return lsnr(data); });
    };
    /**
     * @param {?} obj
     * @param {?=} keys
     * @param {?=} not
     * @return {?}
     */
    PrefsService.prototype.asNumbers = /**
     * @param {?} obj
     * @param {?=} keys
     * @param {?=} not
     * @return {?}
     */
    function (obj, keys, not) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        var skip = {};
        if (not) {
            keys.forEach(function (k) {
                skip[k] = 1;
            });
        }
        if (!keys || not) {
            // do them all
            Array.from(obj).forEach(function (v, k) {
                if (!not || !skip[k]) {
                    obj[k] = Number(obj[k]);
                }
            });
        }
        else {
            // do the explicitly named keys
            keys.forEach(function (k) {
                obj[k] = Number(obj[k]);
            });
        }
        return obj;
    };
    /**
     * @param {?} name
     * @param {?} defaults
     * @param {?=} qparams
     * @return {?}
     */
    PrefsService.prototype.getPrefs = /**
     * @param {?} name
     * @param {?} defaults
     * @param {?=} qparams
     * @return {?}
     */
    function (name, defaults, qparams) {
        /** @type {?} */
        var obj = Object.assign({}, defaults || {}, this.cache[name] || {});
        // if query params are specified, they override...
        if (this.fs.isO(qparams)) {
            obj.forEach(function (k) {
                if (qparams.hasOwnProperty(k)) {
                    obj[k] = qparams[k];
                }
            });
        }
        return obj;
    };
    // merge preferences:
    // The assumption here is that obj is a sparse object, and that the
    //  defined keys should overwrite the corresponding values, but any
    //  existing keys that are NOT explicitly defined here should be left
    //  alone (not deleted).
    // merge preferences:
    // The assumption here is that obj is a sparse object, and that the
    //  defined keys should overwrite the corresponding values, but any
    //  existing keys that are NOT explicitly defined here should be left
    //  alone (not deleted).
    /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    PrefsService.prototype.mergePrefs = 
    // merge preferences:
    // The assumption here is that obj is a sparse object, and that the
    //  defined keys should overwrite the corresponding values, but any
    //  existing keys that are NOT explicitly defined here should be left
    //  alone (not deleted).
    /**
     * @param {?} name
     * @param {?} obj
     * @return {?}
     */
    function (name, obj) {
        /** @type {?} */
        var merged = this.cache[name] || {};
        this.setPrefs(name, Object.assign(merged, obj));
    };
    /**
     * Add a listener function
     * This will get called back when an 'updatePrefs' message is received on WSS
     * @param listener a function that can accept one param - data
     */
    /**
     * Add a listener function
     * This will get called back when an 'updatePrefs' message is received on WSS
     * @param {?} listener a function that can accept one param - data
     * @return {?}
     */
    PrefsService.prototype.addListener = /**
     * Add a listener function
     * This will get called back when an 'updatePrefs' message is received on WSS
     * @param {?} listener a function that can accept one param - data
     * @return {?}
     */
    function (listener) {
        this.listeners.push(listener);
    };
    /**
     * @param {?} listener
     * @return {?}
     */
    PrefsService.prototype.removeListener = /**
     * @param {?} listener
     * @return {?}
     */
    function (listener) {
        this.listeners = this.listeners.filter(function (obj) { return obj !== listener; });
    };
    PrefsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] },
    ];
    /** @nocollapse */
    PrefsService.ctorParameters = function () { return [
        { type: FnService },
        { type: LogService },
        { type: WebSocketService },
        { type: undefined, decorators: [{ type: Inject, args: ['Window',] }] }
    ]; };
    /** @nocollapse */ PrefsService.ngInjectableDef = defineInjectable({ factory: function PrefsService_Factory() { return new PrefsService(inject(FnService), inject(LogService), inject(WebSocketService), inject("Window")); }, token: PrefsService, providedIn: "root" });
    return PrefsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * ONOS GUI -- Widget -- Panel Base class
 *
 * Replacing the panel service in the old implementation
 * @abstract
 */
var  /**
 * ONOS GUI -- Widget -- Panel Base class
 *
 * Replacing the panel service in the old implementation
 * @abstract
 */
PanelBaseImpl = /** @class */ (function () {
    function PanelBaseImpl(fs, ls, log) {
        this.fs = fs;
        this.ls = ls;
        this.log = log;
        //        this.log.debug('Panel base class constructed');
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    PanelBaseImpl.prototype.showPanel = /**
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        this.on = true;
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    PanelBaseImpl.prototype.hidePanel = /**
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        this.on = false;
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    PanelBaseImpl.prototype.togglePanel = /**
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        if (this.on) {
            this.hidePanel(cb);
        }
        else {
            this.showPanel(cb);
        }
        return this.on;
    };
    /**
     * @return {?}
     */
    PanelBaseImpl.prototype.panelIsVisible = /**
     * @return {?}
     */
    function () {
        return this.on;
    };
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     */
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    PanelBaseImpl.prototype.dummyLion = /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return '%' + key + '%';
    };
    return PanelBaseImpl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Extends the PanelBase abstract class specifically for showing details
 *
 * This makes another call through WSS to the server for specific
 * details to fill the panel with
 *
 * This replaces the detailspanel service in the old gui
 * @abstract
 */
var DetailsPanelBaseImpl = /** @class */ (function (_super) {
    __extends(DetailsPanelBaseImpl, _super);
    function DetailsPanelBaseImpl(fs, ls, log, wss, tag) {
        var _this = _super.call(this, fs, ls, log) || this;
        _this.fs = fs;
        _this.ls = ls;
        _this.log = log;
        _this.wss = wss;
        _this.tag = tag;
        _this.closeEvent = new EventEmitter();
        _this.handlers = [];
        _this.detailsData = {};
        _this.closed = false;
        _this.root = tag + 's';
        _this.req = tag + 'DetailsRequest';
        _this.resp = tag + 'DetailsResponse';
        return _this;
    }
    /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     */
    /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.init = /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     * @return {?}
     */
    function () {
        var _this = this;
        this.wss.bindHandlers(new Map([
            [this.resp, function (data) { return _this.detailsPanelResponseCb(data); }]
        ]));
        this.handlers.push(this.resp);
    };
    /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     */
    /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.destroy = /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     * @return {?}
     */
    function () {
        this.wss.unbindHandlers(this.handlers);
    };
    /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     */
    /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     * @param {?} data
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.detailsPanelResponseCb = /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.detailsData = data['details'];
    };
    /**
     * Details Panel Data Request - should be called whenever row id changes
     */
    /**
     * Details Panel Data Request - should be called whenever row id changes
     * @param {?} query
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.requestDetailsPanelData = /**
     * Details Panel Data Request - should be called whenever row id changes
     * @param {?} query
     * @return {?}
     */
    function (query) {
        this.closed = false;
        // Do not send if the Web Socket hasn't opened
        if (this.wss.isConnected()) {
            if (this.fs.debugOn('panel')) {
                this.log.debug('Details panel data REQUEST:', this.req, query);
            }
            this.wss.sendEvent(this.req, query);
        }
    };
    /**
     * this should be called when the details panel close button is clicked
     */
    /**
     * this should be called when the details panel close button is clicked
     * @return {?}
     */
    DetailsPanelBaseImpl.prototype.close = /**
     * this should be called when the details panel close button is clicked
     * @return {?}
     */
    function () {
        this.closed = true;
        this.id = null;
        this.closeEvent.emit(this.id);
    };
    DetailsPanelBaseImpl.propDecorators = {
        id: [{ type: Input }],
        closeEvent: [{ type: Output }]
    };
    return DetailsPanelBaseImpl;
}(PanelBaseImpl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var REFRESH_INTERVAL = 2000;
/** @enum {string} */
var SortDir = {
    asc: 'asc', desc: 'desc',
};
/**
 * ONOS GUI -- Widget -- Table Base class
 * @abstract
 */
var  /**
 * ONOS GUI -- Widget -- Table Base class
 * @abstract
 */
TableBaseImpl = /** @class */ (function () {
    function TableBaseImpl(fs, ls, log, wss, tag, idKey, selCb // Function
    ) {
        if (idKey === void 0) { idKey = 'id'; }
        if (selCb === void 0) { selCb = function () { return ({}); }; }
        var _this = this;
        this.fs = fs;
        this.ls = ls;
        this.log = log;
        this.wss = wss;
        this.tag = tag;
        this.idKey = idKey;
        this.selCb = selCb;
        this.changedData = [];
        // Function
        this.parentSelCb = null;
        // Function
        this.selId = undefined;
        this.tableData = [];
        // Function
        this.autoRefresh = true;
        this.autoRefreshTip = 'Toggle auto refresh'; // TODO: get LION string
        this.refreshPromise = null;
        this.handlers = [];
        this.root = tag + 's';
        this.req = tag + 'DataRequest';
        this.resp = tag + 'DataResponse';
        this.selectCallback = this.rowSelectionCb;
        this.toggleRefresh = function () {
            _this.autoRefresh = !_this.autoRefresh;
            _this.autoRefresh ? _this.startRefresh() : _this.stopRefresh();
        };
        // Mapped to the search and searchBy inputs in template
        // Changes are handled through TableFilterPipe
        this.tableDataFilter = (/** @type {?} */ ({
            queryStr: '',
            queryBy: '$',
        }));
    }
    /**
     * @return {?}
     */
    TableBaseImpl.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.wss.bindHandlers(new Map([
            [this.resp, function (data) { return _this.tableDataResponseCb(data); }]
        ]));
        this.handlers.push(this.resp);
        this.annots = (/** @type {?} */ ({
            noRowsMsg: ''
        }));
        // Now send the WebSocket request and make it repeat every 2 seconds
        this.requestTableData();
        this.startRefresh();
        this.log.debug('TableBase initialized. Calling ', this.req, 'every', REFRESH_INTERVAL, 'ms');
    };
    /**
     * @return {?}
     */
    TableBaseImpl.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.wss.unbindHandlers(this.handlers);
        this.stopRefresh();
        this.ls.stop();
    };
    /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     */
    /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     * @param {?} data
     * @return {?}
     */
    TableBaseImpl.prototype.tableDataResponseCb = /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.ls.stop();
        /** @type {?} */
        var newTableData = Array.from(data[this.root]);
        this.annots.noRowsMsg = data.annots.no_rows_msg;
        // If the parents onResp() function is set then call it
        if (this.responseCallback) {
            this.responseCallback(data);
        }
        this.changedData = [];
        // checks if data changed for row flashing
        if (JSON.stringify(newTableData) !== JSON.stringify(this.tableData)) {
            this.log.debug('table data has changed');
            /** @type {?} */
            var oldTableData = this.tableData;
            this.tableData = __spread(newTableData); // ES6 spread syntax
            // only flash the row if the data already exists
            if (oldTableData.length > 0) {
                for (var idx in newTableData) {
                    if (!this.fs.containsObj(oldTableData, newTableData[idx])) {
                        this.changedData.push(newTableData[idx][this.idKey]);
                    }
                }
            }
        }
    };
    /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     */
    /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     * @return {?}
     */
    TableBaseImpl.prototype.requestTableData = /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     * @return {?}
     */
    function () {
        /** @type {?} */
        var p = Object.assign({}, this.sortParams, this.payloadParams);
        // Allow it to sit in pending events
        if (this.wss.isConnected()) {
            if (this.fs.debugOn('table')) {
                this.log.debug('Table data REQUEST:', this.req, p);
            }
            this.wss.sendEvent(this.req, p);
            this.ls.start();
        }
    };
    /**
     * Row Selected
     */
    /**
     * Row Selected
     * @param {?} event
     * @param {?} selRow
     * @return {?}
     */
    TableBaseImpl.prototype.rowSelectionCb = /**
     * Row Selected
     * @param {?} event
     * @param {?} selRow
     * @return {?}
     */
    function (event$$1, selRow) {
        /** @type {?} */
        var selId = selRow[this.idKey];
        this.selId = (this.selId === selId) ? undefined : selId;
        this.log.debug('Row', selId, 'selected');
        if (this.parentSelCb) {
            this.parentSelCb(event$$1, selRow);
        }
    };
    /**
     * autoRefresh functions
     */
    /**
     * autoRefresh functions
     * @return {?}
     */
    TableBaseImpl.prototype.startRefresh = /**
     * autoRefresh functions
     * @return {?}
     */
    function () {
        var _this = this;
        this.refreshPromise =
            setInterval(function () {
                if (!_this.ls.waiting()) {
                    if (_this.fs.debugOn('table')) {
                        _this.log.debug('Refreshing ' + _this.root + ' page');
                    }
                    _this.requestTableData();
                }
            }, REFRESH_INTERVAL);
    };
    /**
     * @return {?}
     */
    TableBaseImpl.prototype.stopRefresh = /**
     * @return {?}
     */
    function () {
        if (this.refreshPromise) {
            clearInterval(this.refreshPromise);
            this.refreshPromise = null;
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TableBaseImpl.prototype.isChanged = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return (this.fs.inArray(id, this.changedData) === -1) ? false : true;
    };
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     */
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    TableBaseImpl.prototype.dummyLion = /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return '%' + key + '%';
    };
    /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     */
    /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     * @param {?} colName
     * @return {?}
     */
    TableBaseImpl.prototype.onSort = /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     * @param {?} colName
     * @return {?}
     */
    function (colName) {
        if (this.sortParams.firstCol === colName) {
            if (this.sortParams.firstDir === SortDir.desc) {
                this.sortParams.firstDir = SortDir.asc;
                return;
            }
            else {
                this.sortParams.firstDir = SortDir.desc;
                return;
            }
        }
        else {
            this.sortParams.secondCol = this.sortParams.firstCol;
            this.sortParams.secondDir = this.sortParams.firstDir;
            this.sortParams.firstCol = colName;
            this.sortParams.firstDir = SortDir.desc;
        }
        this.log.debug('Sort params', this.sortParams);
        this.requestTableData();
    };
    /**
     * @param {?} column
     * @return {?}
     */
    TableBaseImpl.prototype.sortIcon = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (this.sortParams.firstCol === column) {
            if (this.sortParams.firstDir === SortDir.asc) {
                return 'upArrow';
            }
            else {
                return 'downArrow';
            }
        }
        else {
            return '';
        }
    };
    /**
     * De-selects the row
     */
    /**
     * De-selects the row
     * @param {?} event
     * @return {?}
     */
    TableBaseImpl.prototype.deselectRow = /**
     * De-selects the row
     * @param {?} event
     * @return {?}
     */
    function (event$$1) {
        this.log.debug('Details panel close event');
        this.selId = event$$1;
    };
    return TableBaseImpl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { Gui2FwLibModule, FnService, Logger, LogService, isDebugMode, ConsoleLoggerService, glyphMapping, IconService, NavService, MastService, WSock, UrlFnService, WebSocketService, OnosService, LoadingService, PanelService, SvgUtilService, logos, glyphDataSet, badgeDataSet, spriteData, mojoDataSet, extraGlyphs, GlyphDataService, GlyphService, ZoomUtils, PrefsService, LionService, ThemeService, KeysToken, KeysService, TrieRemoved, TrieInsert, TrieOp, Trie, MastComponent, VeilComponent, FlashComponent, ConfirmComponent, QuickhelpComponent, IconComponent, TableResizeDirective, DetectBrowserDirective, TableFilterPipe, DetailsPanelBaseImpl, PanelBaseImpl, SortDir, TableBaseImpl, environment as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,