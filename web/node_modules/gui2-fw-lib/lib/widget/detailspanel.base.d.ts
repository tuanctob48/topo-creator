import { FnService } from '../util/fn.service';
import { LoadingService } from '../layer/loading.service';
import { LogService } from '../log.service';
import { WebSocketService } from '../remote/websocket.service';
import { PanelBaseImpl } from './panel.base';
import { EventEmitter } from '@angular/core';
/**
 * A generic model of the data returned from the *DetailsResponse
 */
export interface DetailsResponse {
    details: any;
}
/**
 * Extends the PanelBase abstract class specifically for showing details
 *
 * This makes another call through WSS to the server for specific
 * details to fill the panel with
 *
 * This replaces the detailspanel service in the old gui
 */
export declare abstract class DetailsPanelBaseImpl extends PanelBaseImpl {
    protected fs: FnService;
    protected ls: LoadingService;
    protected log: LogService;
    protected wss: WebSocketService;
    protected tag: string;
    id: string;
    closeEvent: EventEmitter<string>;
    private root;
    private req;
    private resp;
    private handlers;
    detailsData: any;
    closed: boolean;
    constructor(fs: FnService, ls: LoadingService, log: LogService, wss: WebSocketService, tag: string);
    /**
     * When the details panel is created set up a listener on
     * Web Socket for details responses
     */
    init(): void;
    /**
     * When the details panel is destroyed this should be called to
     * de-register from the WebSocket
     */
    destroy(): void;
    /**
     * A callback that executes when the details data that was requested
     * on WebSocketService arrives.
     */
    detailsPanelResponseCb(data: DetailsResponse): void;
    /**
     * Details Panel Data Request - should be called whenever row id changes
     */
    requestDetailsPanelData(query: any): void;
    /**
     * this should be called when the details panel close button is clicked
     */
    close(): void;
}
