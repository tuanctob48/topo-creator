import { FnService } from '../util/fn.service';
import { LoadingService } from '../layer/loading.service';
import { LogService } from '../log.service';
import { WebSocketService } from '../remote/websocket.service';
/**
 * Model of table annotations within this table base class
 */
export interface TableAnnots {
    noRowsMsg: string;
}
/**
 * A model of data returned from Web Socket in a TableResponse
 *
 * There is an interface extending from this one in the parent component
 */
export interface TableResponse {
    annots: any;
}
/**
 * A criteria for filtering the tableData
 */
export interface TableFilter {
    queryStr: string;
    queryBy: string;
    sortBy: string;
}
/**
 * Enumerated values for the sort dir
 */
export declare enum SortDir {
    asc = "asc",
    desc = "desc"
}
/**
 * A structure to format sort params for table
 * This is sent to WebSocket as part of table request
 */
export interface SortParams {
    firstCol: string;
    firstDir: SortDir;
    secondCol: string;
    secondDir: SortDir;
}
export interface PayloadParams {
    devId: string;
}
/**
 * ONOS GUI -- Widget -- Table Base class
 */
export declare abstract class TableBaseImpl {
    protected fs: FnService;
    protected ls: LoadingService;
    protected log: LogService;
    protected wss: WebSocketService;
    protected tag: string;
    protected idKey: string;
    protected selCb: () => {};
    annots: TableAnnots;
    protected changedData: string[];
    protected payloadParams: PayloadParams;
    protected sortParams: SortParams;
    selectCallback: any;
    protected parentSelCb: any;
    protected responseCallback: any;
    selId: string;
    tableData: any[];
    tableDataFilter: TableFilter;
    toggleRefresh: any;
    autoRefresh: boolean;
    autoRefreshTip: string;
    readonly root: string;
    readonly req: string;
    readonly resp: string;
    private refreshPromise;
    private handlers;
    protected constructor(fs: FnService, ls: LoadingService, log: LogService, wss: WebSocketService, tag: string, idKey?: string, selCb?: () => {});
    init(): void;
    destroy(): void;
    /**
     * A callback that executes when the table data that was requested
     * on WebSocketService arrives.
     *
     * Happens every 2 seconds
     */
    tableDataResponseCb(data: TableResponse): void;
    /**
     * Table Data Request
     * Pass in sort parameters and the set will be returned sorted
     * In the old GUI there was also a query parameter, but this was not
     * implemented on the server end
     */
    requestTableData(): void;
    /**
     * Row Selected
     */
    rowSelectionCb(event: any, selRow: any): void;
    /**
     * autoRefresh functions
     */
    startRefresh(): void;
    stopRefresh(): void;
    isChanged(id: string): boolean;
    /**
     * A dummy implementation of the lionFn until the response is received and the LION
     * bundle is received from the WebSocket
     */
    dummyLion(key: string): string;
    /**
     * Change the sort order of the data returned
     *
     * sortParams are passed to the server by WebSocket and the data is
     * returned sorted
     *
     * This is usually assigned to the (click) event on a column, and the column
     * name passed in e.g. (click)="onSort('origin')
     * If the column that is passed in is already the firstCol, then reverse its direction
     * If a new column is passed in, then make the existing col the 2nd sort order
     */
    onSort(colName: string): void;
    sortIcon(column: string): string;
    /**
     * De-selects the row
     */
    deselectRow(event: any): void;
}
