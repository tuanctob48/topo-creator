import { FnService } from '../util/fn.service';
import { GlyphService } from '../svg/glyph.service';
import { LogService } from '../log.service';
import { UrlFnService } from './urlfn.service';
import { VeilComponent } from '../layer/veil/veil.component';
import { WSock } from './wsock.service';
/**
 * Event Type structure for the WebSocketService
 */
export interface EventType {
    event: string;
    payload: Object;
}
export interface Callback {
    id: number;
    error: string;
    cb(host: string, url: string): void;
}
export interface WsOptions {
    wsport: number;
}
/**
 * ONOS GUI -- Remote -- Web Socket Service
 *
 * To see debug messages add ?debug=txrx to the URL
 */
export declare class WebSocketService {
    private fs;
    private gs;
    private log;
    private ufs;
    private wsock;
    private window;
    private webSockOpts;
    private ws;
    private wsUp;
    private handlers;
    private pendingEvents;
    private host;
    private url;
    private clusterNodes;
    private clusterIndex;
    private glyphs;
    private connectRetries;
    private openListeners;
    private nextListenerId;
    private loggedInUser;
    private lcd;
    private vcd;
    /**
     * built-in handler for the 'boostrap' event
     */
    private bootstrap;
    private error;
    constructor(fs: FnService, gs: GlyphService, log: LogService, ufs: UrlFnService, wsock: WSock, window: any);
    /**
     * Called when WebSocket has just opened
     *
     * Lift the Veil if it is displayed
     * If there are any events pending, send them
     * Mark the WSS as up and inform any listeners for this open event
     */
    handleOpen(): void;
    /**
     * Function called when WebSocket send a message
     */
    handleMessage(msgEvent: MessageEvent): void;
    /**
     * Called by the WebSocket if it is closed from the server end
     *
     * If the loading component is shown, call stop() on it
     * Try to find another node in the cluster to connect to
     * If this is not possible then show the Veil Component
     */
    handleClose(): void;
    /**
     * Find the next node in the ONOS cluster.
     *
     * This is used if the WebSocket connection closes because a
     * node in the cluster ges down - fail over should be automatic
     */
    findGuiSuccessor(): string;
    /**
     * When the WebSocket is opened, inform any listeners that registered
     * for that event
     */
    informListeners(host: string, url: string): void;
    send(ev: EventType): void;
    /**
     * Check if there are no WSS event handlers left
     */
    noHandlersWarn(handlers: Map<string, Object>, caller: string): boolean;
    /**
     * Required for unit tests to set to known state
     */
    resetState(): void;
    createWebSocket(opts?: WsOptions, host?: string): any;
    /**
     * Tell the WebSocket to close - this should call the handleClose() method
     */
    closeWebSocket(): void;
    /**
     * Binds the message handlers to their message type (event type) as
     *  specified in the given map. Note that keys are the event IDs; values
     *  are either:
     *     * the event handler function, or
     *     * an API object which has an event handler for the key
     */
    bindHandlers(handlerMap: Map<string, (data: any) => void>): void;
    /**
     * Unbinds the specified message handlers.
     *   Expected that the same map will be used, but we only care about keys
     */
    unbindHandlers(handlerIds: string[]): void;
    isHandling(handlerId: string): boolean;
    /**
     * Add a listener function for listening for WebSocket opening.
     * The function must give a host and url and return void
     */
    addOpenListener(callback: (host: string, url: string) => void): Callback;
    /**
     * Remove a listener of WebSocket opening
     */
    removeOpenListener(lsnr: Callback): void;
    /**
     * Formulates an event message and sends it via the web-socket.
     * If the websocket is not up yet, we store it in a pending list.
     */
    sendEvent(evType: string, payload: Object): void;
    /**
     * Binds the veil service as a delegate.
     */
    setVeilDelegate(vd: VeilComponent): void;
    /**
     * Binds the loading service as a delegate
     */
    setLoadingDelegate(ld: any): void;
    isConnected(): boolean;
}
