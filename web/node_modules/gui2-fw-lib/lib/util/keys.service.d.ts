import { LogService } from '../log.service';
import { FnService } from '../util/fn.service';
import { LionService } from './lion.service';
import { NavService } from '../nav/nav.service';
export interface KeyHandler {
    globalKeys: Object;
    maskedKeys: Object;
    dialogKeys: Object;
    viewKeys: any;
    viewFn: any;
    viewGestures: string[][];
}
export declare enum KeysToken {
    KEYEV = "keyev"
}
/**
 * ONOS GUI -- Keys Service Module.
 */
export declare class KeysService {
    protected log: LogService;
    protected fs: FnService;
    protected ls: LionService;
    protected ns: NavService;
    enabled: boolean;
    globalEnabled: boolean;
    keyHandler: KeyHandler;
    seq: any;
    matching: boolean;
    matched: string;
    lookup: any;
    textFieldDoesNotBlock: any;
    quickHelpShown: boolean;
    constructor(log: LogService, fs: FnService, ls: LionService, ns: NavService);
    installOn(elem: any): void;
    keyBindings(x: any): {
        globalKeys: any;
        maskedKeys: any;
        viewKeys: any;
        viewFunction: boolean;
    };
    unbindKeys(): void;
    dialogKeys(x: any): void;
    addSeq(word: any, data: any): void;
    remSeq(word: any): void;
    gestureNotes(g?: any): string[][];
    enableKeys(b: any): void;
    enableGlobalKeys(b: any): void;
    checkNotGlobal(o: any): void;
    protected matchSeq(key: any): boolean;
    protected whatKey(code: number): string;
    protected textFieldInput(): boolean;
    protected keyIn(): void;
    protected qhlion(): (string: any) => string;
    protected qhlionShowHide(): string;
    protected qhlionHintEsc(): string;
    protected qhlionHintT(): string;
    protected setupGlobalKeys(): void;
    protected quickHelp(view: any, key: any, code: any, ev: any): boolean;
    protected escapeKey(view: any, key: any, code: any, ev: any): void;
    protected toggleTheme(view: any, key: any, code: any, ev: any): boolean;
    protected filterMaskedKeys(map: any, caller: any, remove: boolean): any[];
    protected unexParam(fname: any, x: any): void;
    protected setKeyBindings(keyArg: any): void;
    getKeyBindings(): {
        globalKeys: any;
        maskedKeys: any;
        viewKeys: any;
        viewFunction: boolean;
    };
    protected bindDialogKeys(map: any): void;
    protected unbindDialogKeys(): void;
}
