import { ActivatedRoute } from '@angular/router';
import { LogService } from '../log.service';
import { Trie } from './trie';
/**
 * Used with the Window size function;
 **/
export interface WindowSize {
    width: number;
    height: number;
}
/**
 * For the sanitize() and analyze() functions
 */
export interface Match {
    full: string;
    name: string;
}
/**
 * ONOS GUI -- Util -- General Purpose Functions
 */
export declare class FnService {
    private route;
    private log;
    private w;
    private debugFlags;
    constructor(route: ActivatedRoute, log: LogService, w: any);
    /**
     * Test if an argument is a function
     *
     * Note: the need for this would go away if all functions
     * were strongly typed
     */
    isF(f: any): any;
    /**
     * Test if an argument is an array
     *
     * Note: the need for this would go away if all arrays
     * were strongly typed
     */
    isA(a: any): any;
    /**
     * Test if an argument is a string
     *
     * Note: the need for this would go away if all strings
     * were strongly typed
     */
    isS(s: any): string;
    /**
     * Test if an argument is an object
     *
     * Note: the need for this would go away if all objects
     * were strongly typed
     */
    isO(o: any): Object;
    /**
     * Test that an array contains an object
     */
    contains(a: any[], x: any): boolean;
    /**
     * Returns width and height of window inner dimensions.
     * offH, offW : offset width/height are subtracted, if present
     */
    windowSize(offH?: number, offW?: number): WindowSize;
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise.
     * Also returns false if there are properties on the api that are NOT
     * listed in the array of names.
     *
     * This gets extra complicated when the api Object is an
     * Angular service - while the functions can be retrieved
     * by an indexed get, the ownProperties does not show the
     * functions of the class. We have to dive in to the prototypes
     * properties to get these - and even then we have to filter
     * out the constructor and any member variables
     */
    areFunctions(api: Object, fnNames: string[]): boolean;
    /**
     * Returns true if all names in the array are defined as functions
     * on the given api object; false otherwise. This is a non-strict version
     * that does not care about other properties on the api.
     */
    areFunctionsNonStrict(api: any, fnNames: any): boolean;
    /**
     * Returns true if current browser determined to be a mobile device
     */
    isMobile(): boolean;
    /**
     * Returns true if the current browser determined to be Chrome
     */
    isChrome(): boolean;
    isChromeHeadless(): boolean;
    /**
     * Returns true if the current browser determined to be Safari
     */
    isSafari(): boolean;
    /**
     * Returns true if the current browser determined to be Firefox
     */
    isFirefox(): boolean;
    /**
     * search through an array of objects, looking for the one with the
     * tagged property matching the given key. tag defaults to 'id'.
     * returns the index of the matching object, or -1 for no match.
     */
    find(key: string, array: Object[], tag?: string): number;
    /**
     * search through array to find (the first occurrence of) item,
     * returning its index if found; otherwise returning -1.
     */
    inArray(item: any, array: any[]): number;
    /**
     * remove (the first occurrence of) the specified item from the given
     * array, if any. Return true if the removal was made; false otherwise.
     */
    removeFromArray(item: any, array: any[]): boolean;
    /**
     * return true if the object is empty, return false otherwise
     */
    isEmptyObject(obj: Object): boolean;
    /**
     * returns true if the two objects have all the same properties
     */
    sameObjProps(obj1: Object, obj2: Object): boolean;
    /**
     * returns true if the array contains the object
     * does NOT use strict object reference equality,
     * instead checks each property individually for equality
     */
    containsObj(arr: any[], obj: Object): boolean;
    /**
     * Return the given string with the first character capitalized.
     */
    cap(s: string): string;
    /**
     * return the parameter without a px suffix
     */
    noPx(num: string): number;
    /**
     * return an element's given style property without px suffix
     */
    noPxStyle(elem: any, prop: string): number;
    /**
     * Return true if a str ends with suffix
     */
    endsWith(str: string, suffix: string): boolean;
    /**
     * output debug message to console, if debug tag set...
     * e.g. fs.debug('mytag', arg1, arg2, ...)
     */
    debug(tag: any, ...args: any[]): void;
    private parseDebugFlags;
    /**
      * Return true if the given debug flag was specified in the query params
      */
    debugOn(tag: string): boolean;
    inEvilList(tag: any): boolean;
    analyze(html: string): Match[];
    sanitize(html: string): string;
    /**
     * add word to trie (word will be converted to uppercase)
     * data associated with the word
     * returns 'added' or 'updated'
     */
    addToTrie(trie: any, word: any, data: any): Trie;
    /**
     * remove word from trie (word will be converted to uppercase)
     * returns 'removed' or 'absent'
     */
    removeFromTrie(trie: any, word: any): Trie;
    /**
     * lookup word (converted to uppercase) in trie
     * returns:
     *    undefined if the word is not in the trie
     *    -1 for a partial match (word is a prefix to an existing word)
     *    data for the word for an exact match
     */
    trieLookup(trie: any, word: any): any;
}
