export interface TrieC {
    p: any;
    s: string[];
}
export interface TrieT {
    k: any;
    p: any;
    q: any;
}
export declare enum TrieRemoved {
    REMOVED = "removed",
    ABSENT = "absent"
}
export declare enum TrieInsert {
    ADDED = "added",
    UPDATED = "updated"
}
/**
 * Combine TrieRemoved and TrieInsert in to a union type
 */
export declare type TrieActions = TrieRemoved | TrieInsert;
export declare enum TrieOp {
    PLUS = "+",
    MINUS = "-"
}
export declare class Trie {
    p: any;
    w: string;
    s: string[];
    c: TrieC;
    t: TrieT[];
    x: number;
    f1: (TrieC: any) => TrieC;
    f2: () => TrieActions;
    data: any;
    constructor(op: TrieOp, trie: any, word: string, data?: any);
    add(cAdded: TrieC): TrieC;
    probe(cProbed: TrieC): TrieC;
    insert(): TrieInsert;
    remove(): TrieRemoved;
}
