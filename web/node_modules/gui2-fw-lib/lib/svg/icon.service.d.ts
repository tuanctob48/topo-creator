import { GlyphService } from './glyph.service';
import { LogService } from '../log.service';
import { SvgUtilService } from './svgutil.service';
export declare const glyphMapping: Map<string, string>;
/**
 * ONOS GUI -- SVG -- Icon Service
 */
export declare class IconService {
    private gs;
    private log;
    private sus;
    constructor(gs: GlyphService, log: LogService, sus: SvgUtilService);
    ensureIconLibDefs(): any;
    /**
     * Load an icon
     *
     * @param div A D3 selection of the '&lt;div&gt;' element into which icon should load
     * @param glyphId Identifies the glyph to use
     * @param size The dimension of icon in pixels. Defaults to 20.
     * @param installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     */
    loadIcon(div: any, glyphId?: string, size?: number, installGlyph?: boolean, svgClass?: string): void;
    /**
     * Load an icon by class.
     * @param div A D3 selection of the <DIV> element into which icon should load
     * @param iconCls The CSS class used to identify the icon
     * @param size The dimension of icon in pixels. Defaults to 20.
     * @param installGlyph If truthy, will cause the glyph to be added to
     *      well-known defs element. Defaults to false.
     * @param svgClass The CSS class used to identify the SVG layer.
     *      Defaults to 'embeddedIcon'.
     */
    loadIconByClass(div: any, iconCls: string, size: number, installGlyph: boolean, svgClass?: string): void;
    /**
     * Load an embedded icon.
     */
    loadEmbeddedIcon(div: any, iconCls: string, size: number): void;
    /**
     * Load an icon only to the svg defs collection
     *
     * Note: This is added for use with IconComponent, where the icon's
     * svg element is defined in the component template (and not built
     * inline using d3 manipulation
     *
     * @param iconCls The icon class as a string
     */
    loadIconDef(iconCls: string): void;
    /**
     * Add a device icon
     *
     * Adds a device glyph to the specified element.
     * Returns the D3 selection of the glyph (use) element.
     */
    addDeviceIcon(elem: any, glyphId: any, iconDim: any): any;
    addHostIcon(elem: any, radius: any, glyphId: any): any;
    registerIconMapping(iconId: any, glyphId: any): void;
}
